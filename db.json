{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/images/git/git_merge_1.png","path":"images/git/git_merge_1.png","modified":0,"renderable":0},{"_id":"source/images/git/git_merge_2.png","path":"images/git/git_merge_2.png","modified":0,"renderable":0},{"_id":"source/images/git/git_merge_3.png","path":"images/git/git_merge_3.png","modified":0,"renderable":0},{"_id":"source/images/git/git_merge_4.png","path":"images/git/git_merge_4.png","modified":0,"renderable":0},{"_id":"source/images/git/git_merge_5.png","path":"images/git/git_merge_5.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705111640511.png","path":"images/jvm/image-20200705111640511.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705111843003.png","path":"images/jvm/image-20200705111843003.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705112036630.png","path":"images/jvm/image-20200705112036630.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705112416101.png","path":"images/jvm/image-20200705112416101.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705112601211.png","path":"images/jvm/image-20200705112601211.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/11.png","path":"images/jvm/PPT/11.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/1.png","path":"images/jvm/PPT/1.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/13.png","path":"images/jvm/PPT/13.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/10.png","path":"images/jvm/PPT/10.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/14.png","path":"images/jvm/PPT/14.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/15.png","path":"images/jvm/PPT/15.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/18.png","path":"images/jvm/PPT/18.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/20.png","path":"images/jvm/PPT/20.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/21.png","path":"images/jvm/PPT/21.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/2.png","path":"images/jvm/PPT/2.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/22.png","path":"images/jvm/PPT/22.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/23.png","path":"images/jvm/PPT/23.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/24.png","path":"images/jvm/PPT/24.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/25.png","path":"images/jvm/PPT/25.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/26.png","path":"images/jvm/PPT/26.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/27.png","path":"images/jvm/PPT/27.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/28.png","path":"images/jvm/PPT/28.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/29.png","path":"images/jvm/PPT/29.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/3.png","path":"images/jvm/PPT/3.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/30.png","path":"images/jvm/PPT/30.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/31.png","path":"images/jvm/PPT/31.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/32.png","path":"images/jvm/PPT/32.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/33.png","path":"images/jvm/PPT/33.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/34.png","path":"images/jvm/PPT/34.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/35.png","path":"images/jvm/PPT/35.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/36.png","path":"images/jvm/PPT/36.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/38.png","path":"images/jvm/PPT/38.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/37.png","path":"images/jvm/PPT/37.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/4.png","path":"images/jvm/PPT/4.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/41.png","path":"images/jvm/PPT/41.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/42.png","path":"images/jvm/PPT/42.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/43.png","path":"images/jvm/PPT/43.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/44.png","path":"images/jvm/PPT/44.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/45.png","path":"images/jvm/PPT/45.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/46.png","path":"images/jvm/PPT/46.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/48.png","path":"images/jvm/PPT/48.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/49.png","path":"images/jvm/PPT/49.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/5.png","path":"images/jvm/PPT/5.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/50.png","path":"images/jvm/PPT/50.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/51.png","path":"images/jvm/PPT/51.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/52.png","path":"images/jvm/PPT/52.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/53.png","path":"images/jvm/PPT/53.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/54.png","path":"images/jvm/PPT/54.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/55.png","path":"images/jvm/PPT/55.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/57.png","path":"images/jvm/PPT/57.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/58.png","path":"images/jvm/PPT/58.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/59.png","path":"images/jvm/PPT/59.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/60.png","path":"images/jvm/PPT/60.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/6.png","path":"images/jvm/PPT/6.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/61.png","path":"images/jvm/PPT/61.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/62.png","path":"images/jvm/PPT/62.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/63.png","path":"images/jvm/PPT/63.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/64.png","path":"images/jvm/PPT/64.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/65.png","path":"images/jvm/PPT/65.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/66.png","path":"images/jvm/PPT/66.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/67.png","path":"images/jvm/PPT/67.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/69.png","path":"images/jvm/PPT/69.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/7.png","path":"images/jvm/PPT/7.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/71.png","path":"images/jvm/PPT/71.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/70.png","path":"images/jvm/PPT/70.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/73.png","path":"images/jvm/PPT/73.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/75.png","path":"images/jvm/PPT/75.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/76.png","path":"images/jvm/PPT/76.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/72.png","path":"images/jvm/PPT/72.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/9.png","path":"images/jvm/PPT/9.png","modified":0,"renderable":0},{"_id":"source/images/jvm/PPT/77.png","path":"images/jvm/PPT/77.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705155551919.png","path":"images/jvm/image-20200705155551919.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705155728557.png","path":"images/jvm/image-20200705155728557.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705161409533.png","path":"images/jvm/image-20200705161409533.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705161007423.png","path":"images/jvm/image-20200705161007423.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705161812542.png","path":"images/jvm/image-20200705161812542.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706200739392.png","path":"images/jvm/image-20200706200739392.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706201904057.png","path":"images/jvm/image-20200706201904057.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706205756045.png","path":"images/jvm/image-20200706205756045.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706203419496.png","path":"images/jvm/image-20200706203419496.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706205947535.png","path":"images/jvm/image-20200706205947535.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706203835403.png","path":"images/jvm/image-20200706203835403.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706211652779.png","path":"images/jvm/image-20200706211652779.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706205821919.png","path":"images/jvm/image-20200706205821919.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707075847954.png","path":"images/jvm/image-20200707075847954.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706210000461.png","path":"images/jvm/image-20200706210000461.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707080154039.png","path":"images/jvm/image-20200707080154039.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707085232646.png","path":"images/jvm/image-20200707085232646.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707091058346.png","path":"images/jvm/image-20200707091058346.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707085737207.png","path":"images/jvm/image-20200707085737207.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707101511025.png","path":"images/jvm/image-20200707101511025.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707095606813.png","path":"images/jvm/image-20200707095606813.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707101543871.png","path":"images/jvm/image-20200707101543871.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707103547712.png","path":"images/jvm/image-20200707103547712.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707203441718.png","path":"images/jvm/image-20200707203441718.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707104253530.png","path":"images/jvm/image-20200707104253530.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707205634266.png","path":"images/jvm/image-20200707205634266.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707203038615.png","path":"images/jvm/image-20200707203038615.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200709152801713.png","path":"images/jvm/image-20200709152801713.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200709164149920.png","path":"images/jvm/image-20200709164149920.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200709164342002.png","path":"images/jvm/image-20200709164342002.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200709164350466.png","path":"images/jvm/image-20200709164350466.png","modified":0,"renderable":0},{"_id":"source/images/jvm/垃圾回收.gif","path":"images/jvm/垃圾回收.gif","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705080719531.png","path":"images/jvm/image-20200705080719531.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705081813409.png","path":"images/jvm/image-20200705081813409.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705081913538.png","path":"images/jvm/image-20200705081913538.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705080911284.png","path":"images/jvm/image-20200705080911284.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705082601441.png","path":"images/jvm/image-20200705082601441.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705082255746.png","path":"images/jvm/image-20200705082255746.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705084038680.png","path":"images/jvm/image-20200705084038680.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705090328171.png","path":"images/jvm/image-20200705090328171.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705090237078.png","path":"images/jvm/image-20200705090237078.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705103516138.png","path":"images/jvm/image-20200705103516138.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705105810107.png","path":"images/jvm/image-20200705105810107.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705094149223.png","path":"images/jvm/image-20200705094149223.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705103636003.png","path":"images/jvm/image-20200705103636003.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705161849557.png","path":"images/jvm/image-20200705161849557.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200705105151258.png","path":"images/jvm/image-20200705105151258.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200706195127740.png","path":"images/jvm/image-20200706195127740.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707084208115.png","path":"images/jvm/image-20200707084208115.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200707084714886.png","path":"images/jvm/image-20200707084714886.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200709095356247.png","path":"images/jvm/image-20200709095356247.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200709151033237.png","path":"images/jvm/image-20200709151033237.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712102205795.png","path":"images/jvm/image-20200712102205795.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712104149246.png","path":"images/jvm/image-20200712104149246.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712103230349.png","path":"images/jvm/image-20200712103230349.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712104312406.png","path":"images/jvm/image-20200712104312406.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712104622677.png","path":"images/jvm/image-20200712104622677.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712110411885.png","path":"images/jvm/image-20200712110411885.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712112026317.png","path":"images/jvm/image-20200712112026317.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712112512720.png","path":"images/jvm/image-20200712112512720.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712113256075.png","path":"images/jvm/image-20200712113256075.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712150229048.png","path":"images/jvm/image-20200712150229048.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712150303710.png","path":"images/jvm/image-20200712150303710.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712150935078.png","path":"images/jvm/image-20200712150935078.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712152029615.png","path":"images/jvm/image-20200712152029615.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712151916991.png","path":"images/jvm/image-20200712151916991.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712152847218.png","path":"images/jvm/image-20200712152847218.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712153236508.png","path":"images/jvm/image-20200712153236508.png","modified":0,"renderable":0},{"_id":"source/images/jvm/image-20200712165318590.png","path":"images/jvm/image-20200712165318590.png","modified":0,"renderable":0},{"_id":"source/images/cert/chrome-cert-1.png","path":"images/cert/chrome-cert-1.png","modified":0,"renderable":0},{"_id":"source/images/cert/chrome-cert-2.png","path":"images/cert/chrome-cert-2.png","modified":0,"renderable":0},{"_id":"source/images/cert/chrome-cert-3.png","path":"images/cert/chrome-cert-3.png","modified":0,"renderable":0},{"_id":"source/books/2020最新Java面试题及答案.pdf","path":"books/2020最新Java面试题及答案.pdf","modified":0,"renderable":0},{"_id":"source/books/Java面试宝典.pdf","path":"books/Java面试宝典.pdf","modified":0,"renderable":0},{"_id":"source/images/spring/image-20200614155732584.png","path":"images/spring/image-20200614155732584.png","modified":0,"renderable":0},{"_id":"source/img/bg1.jpg","path":"img/bg1.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"ce3a0beee62a407fb214ce99b39f7619a011d83a","modified":1701590840790},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"49f681a203eecfa7127ac22edc13bd3b49693d0a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"cdde6c6d6a1bdf9fb965313e21d92cf6213582b6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"ad4ae0509e3c13073bf17bff0e8eec0a5da718ad","modified":1701590949319},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/.DS_Store","hash":"e2295dbe42d85b294e6f3aeefaf3623bd31759ed","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/.DS_Store","hash":"daec53fd4601c37ca272321ba2eb594d9b0a43ac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/.DS_Store","hash":"e11e97632e6d13d5b9dccadcc514268f3c039508","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/.DS_Store","hash":"80308812974d7cb7e001cd8f64ff9fced30ff139","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"b2f61b91fffb17d11ad56811f07d52d23f012741","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":499162500000},{"_id":"source/about/index.md","hash":"ba3be7db6d887eaae0b72fa844a6f30cafb443dd","modified":1702119298989},{"_id":"public/local-search.xml","hash":"2d40ee3c53a913df5da7dbba451e2ba44ba7ae7b","modified":1702121804863},{"_id":"public/about/index.html","hash":"e22ca9036ee7dee424dd6e901150fbc09563f21f","modified":1702121804863},{"_id":"public/archives/index.html","hash":"6330bf56ae97ab0818dde09967044f3b9b9c2856","modified":1702121804863},{"_id":"public/index.html","hash":"ea3d6d7448c04fa9761625dd2b47e481d4fac4b9","modified":1702121804863},{"_id":"public/archives/2023/index.html","hash":"2f30d83b6ed69f0c00a37960fb2650a2115028b4","modified":1702121804863},{"_id":"public/404.html","hash":"1d2736654fbf195533f14dfa1dce8fc304898191","modified":1702121804863},{"_id":"public/archives/2023/12/index.html","hash":"b4c24b5b20c6fb90e3b7af257b531c255acf4f7c","modified":1702121804863},{"_id":"public/tags/index.html","hash":"8a92afff6f10bee335d24c5862acbac771e7e7e9","modified":1702121804863},{"_id":"public/categories/index.html","hash":"6edc39292b36309620dbf2a5535745c93b515e2f","modified":1702121804863},{"_id":"public/links/index.html","hash":"9188df57a362e800c36fec592ab225b6c4bec982","modified":1702121804863},{"_id":"public/2023/12/03/hello-world/index.html","hash":"92f5884a9b83dc72294fcd6d0b08d841b9864bfc","modified":1701595730897},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1701595730897},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1701595730897},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1701595730897},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1701595730897},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1701595730897},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1701595730897},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1701595730897},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1701595730897},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1701595730897},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1701595730897},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1701595730897},{"_id":"public/css/style.css","hash":"4b65ba99401dce8b954f99a41762967e21eb40c7","modified":1701595730897},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1701595730897},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1701595730897},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1701595730897},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1701595730897},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1701595730897},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1701595730897},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1701595730897},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1701595730897},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1701595730897},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1701595730897},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1701595730897},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1701595730897},{"_id":"source/_posts/类加载子系统.md","hash":"cde11c5473a47698913a2a2764ed543d71baa30c","modified":1701608243220},{"_id":"source/_posts/images/image-20200705090237078.png","hash":"20849cfdec9178a72ff147a3ee9ca3b116c9111b","modified":1701607023319},{"_id":"source/jvm/images/image-20200705090237078.png","hash":"20849cfdec9178a72ff147a3ee9ca3b116c9111b","modified":1701607023319},{"_id":"source/_posts/images/image-20200705081913538.png","hash":"853d8d274c5a127b16415017fb6882af54c58c3a","modified":1701607023319},{"_id":"source/_posts/images/image-20200705081813409.png","hash":"292b4f1d4ff7b99adacb0842932a6dc95f417cab","modified":1701607023319},{"_id":"source/_posts/images/image-20200705082255746.png","hash":"be4e911d134a19140a905c42669386febbb9867e","modified":1701607023319},{"_id":"source/_posts/images/image-20200705090328171.png","hash":"4b16f40b094dce8c10873fd4b527962217699431","modified":1701607023319},{"_id":"source/_posts/images/image-20200705094149223.png","hash":"7ed293684c015dfd06dc88b2d74810a2d16c5baa","modified":1701607023319},{"_id":"source/jvm/images/image-20200705081813409.png","hash":"292b4f1d4ff7b99adacb0842932a6dc95f417cab","modified":1701607023319},{"_id":"source/jvm/images/image-20200705081913538.png","hash":"853d8d274c5a127b16415017fb6882af54c58c3a","modified":1701607023319},{"_id":"source/jvm/images/image-20200705082255746.png","hash":"be4e911d134a19140a905c42669386febbb9867e","modified":1701607023319},{"_id":"source/jvm/images/image-20200705090328171.png","hash":"4b16f40b094dce8c10873fd4b527962217699431","modified":1701607023319},{"_id":"source/jvm/images/image-20200705094149223.png","hash":"7ed293684c015dfd06dc88b2d74810a2d16c5baa","modified":1701607023319},{"_id":"source/_posts/images/image-20200705080719531.png","hash":"c60f44f584a5d02aae45dc0bdef7932a06e78002","modified":1701607023319},{"_id":"source/_posts/images/image-20200705082601441.png","hash":"e5bff9fd77e96e926209dec82d6cefdb8a7d28ca","modified":1701607023319},{"_id":"source/_posts/images/image-20200705084038680.png","hash":"0dfd39d72d75521c7b19d1a2ea44aa55873ff375","modified":1701607023319},{"_id":"source/_posts/images/image-20200705103516138.png","hash":"05934b5536d201bf14cf593948a1db02a0d35b79","modified":1701607023319},{"_id":"source/jvm/images/image-20200705080719531.png","hash":"c60f44f584a5d02aae45dc0bdef7932a06e78002","modified":1701607023319},{"_id":"source/jvm/images/image-20200705082601441.png","hash":"e5bff9fd77e96e926209dec82d6cefdb8a7d28ca","modified":1701607023319},{"_id":"source/jvm/images/image-20200705084038680.png","hash":"0dfd39d72d75521c7b19d1a2ea44aa55873ff375","modified":1701607023319},{"_id":"source/jvm/images/image-20200705103516138.png","hash":"05934b5536d201bf14cf593948a1db02a0d35b79","modified":1701607023319},{"_id":"source/_posts/images/image-20200705080911284.png","hash":"7a38e064b14f803a69eb1a3b59d26bc5170903a9","modified":1701607023319},{"_id":"source/_posts/images/image-20200705105151258.png","hash":"68e1cb4066f7a2f62f4f1b3ef036e68e1a0f2d1e","modified":1701607023319},{"_id":"source/_posts/images/image-20200705103636003.png","hash":"934951c09fb9c4eebc16d8a2258592920bb0ea26","modified":1701607023319},{"_id":"source/jvm/images/image-20200705080911284.png","hash":"7a38e064b14f803a69eb1a3b59d26bc5170903a9","modified":1701607023319},{"_id":"source/jvm/images/image-20200705103636003.png","hash":"934951c09fb9c4eebc16d8a2258592920bb0ea26","modified":1701607023319},{"_id":"source/jvm/images/image-20200705105151258.png","hash":"68e1cb4066f7a2f62f4f1b3ef036e68e1a0f2d1e","modified":1701607023319},{"_id":"source/_posts/images/image-20200705105810107.png","hash":"c51c0c76538db07558cf3cba481cb2e1780bc0f9","modified":1701607023319},{"_id":"source/jvm/images/image-20200705105810107.png","hash":"c51c0c76538db07558cf3cba481cb2e1780bc0f9","modified":1701607023319},{"_id":"source/images/image-20200705090237078.png","hash":"20849cfdec9178a72ff147a3ee9ca3b116c9111b","modified":1701607023319},{"_id":"source/images/image-20200705081913538.png","hash":"853d8d274c5a127b16415017fb6882af54c58c3a","modified":1701607023319},{"_id":"source/images/image-20200705082255746.png","hash":"be4e911d134a19140a905c42669386febbb9867e","modified":1701607023319},{"_id":"source/images/image-20200705081813409.png","hash":"292b4f1d4ff7b99adacb0842932a6dc95f417cab","modified":1701607023319},{"_id":"source/images/image-20200705090328171.png","hash":"4b16f40b094dce8c10873fd4b527962217699431","modified":1701607023319},{"_id":"source/images/image-20200705094149223.png","hash":"7ed293684c015dfd06dc88b2d74810a2d16c5baa","modified":1701607023319},{"_id":"source/images/image-20200705080719531.png","hash":"c60f44f584a5d02aae45dc0bdef7932a06e78002","modified":1701607023319},{"_id":"source/images/image-20200705084038680.png","hash":"0dfd39d72d75521c7b19d1a2ea44aa55873ff375","modified":1701607023319},{"_id":"source/images/image-20200705082601441.png","hash":"e5bff9fd77e96e926209dec82d6cefdb8a7d28ca","modified":1701607023319},{"_id":"source/images/image-20200705103516138.png","hash":"05934b5536d201bf14cf593948a1db02a0d35b79","modified":1701607023319},{"_id":"source/images/image-20200705080911284.png","hash":"7a38e064b14f803a69eb1a3b59d26bc5170903a9","modified":1701607023319},{"_id":"source/images/image-20200705103636003.png","hash":"934951c09fb9c4eebc16d8a2258592920bb0ea26","modified":1701607023319},{"_id":"source/images/image-20200705105151258.png","hash":"68e1cb4066f7a2f62f4f1b3ef036e68e1a0f2d1e","modified":1701607023319},{"_id":"source/images/image-20200705105810107.png","hash":"c51c0c76538db07558cf3cba481cb2e1780bc0f9","modified":1701607023319},{"_id":"source/_posts/JVM-运行时数据区概述及线程.md","hash":"6a713c71496f6e7b1c3830d45abfaa23f6ab5c76","modified":1701608675039},{"_id":"source/images/image-20200705111843003.png","hash":"184e1ee7ec59e3f0de734b46370ead8a61140363","modified":1701607023335},{"_id":"source/images/image-20200705112601211.png","hash":"b658e72306a5f328994104ceed364ba4eca10189","modified":1701607023335},{"_id":"source/images/image-20200705111640511.png","hash":"87f90a65b36a95cf2fd01cfd6756b7452ed22784","modified":1701607023335},{"_id":"source/images/image-20200705112036630.png","hash":"4484f62c9f5ebeca29ac5b274e70396ef4d1e37f","modified":1701607023335},{"_id":"source/images/image-20200705112416101.png","hash":"2bbc650222dce101dc39fa3ed5cbbb3b15ef6aa5","modified":1701607023335},{"_id":"source/_posts/程序计数器.md","hash":"a8adb931ffa85ed45cd97afd8cc0f6c67cd0eb18","modified":1701609033556},{"_id":"source/images/image-20200705161409533.png","hash":"d079319ebb743ae71f02605eed87da9ecbc197b1","modified":1701607023335},{"_id":"source/images/image-20200705161812542.png","hash":"76a9ca0847a75d53b069da0a3821ad9ac2f49f84","modified":1701607023335},{"_id":"source/images/image-20200705161849557.png","hash":"7ab6fbf102e1a507b8555492de0cd63528b4f042","modified":1701607023335},{"_id":"source/images/image-20200705155551919.png","hash":"def48f33b3d5bfa91caeadf8ff3e1c4bc0a3ec1b","modified":1701607023335},{"_id":"source/images/image-20200705155728557.png","hash":"5b0419debf47f35e78ba2b1252f556a61866450a","modified":1701607023335},{"_id":"source/images/image-20200705161007423.png","hash":"880ef9a3eb8a156af91d9c46bb8dbaf4d1ad5a89","modified":1701607023335},{"_id":"source/PPT/1.png","hash":"c10e0bd9b5acfee3b98fc08009da45fc85cab57b","modified":1701607023366},{"_id":"source/PPT/14.png","hash":"a98dba904ee368e03fa672b63e1ec6029e112ddc","modified":1701607023366},{"_id":"source/PPT/20.png","hash":"2ecde51b494c5a68615cf32481b24235b837a8a8","modified":1701607023366},{"_id":"source/PPT/25.png","hash":"ab8017c589bfa3d507b30b4098681c718ff2f7d1","modified":1701607023382},{"_id":"source/PPT/28.png","hash":"13f70f048b203584d25d2e792f22c3dcc416b25d","modified":1701607023382},{"_id":"source/PPT/41.png","hash":"355f718b54b5fe70767cd96c02d1ae6d29fc6d56","modified":1701607023397},{"_id":"source/PPT/44.png","hash":"798fc8ac7c32c66c2fcaa0a471f370013ccd3a8f","modified":1701607023397},{"_id":"source/_posts/java堆.md","hash":"0c3f9a206c2c084f19c9738331307e56f2f9488d","modified":1701609287204},{"_id":"source/images/image-20200706205756045.png","hash":"2e309294e64a8a0b9b70dadd51457b4939f0f037","modified":1701607023460},{"_id":"source/PPT/24.png","hash":"afb7f648eb33621cbff7792f9adc058a86155763","modified":1701607023382},{"_id":"source/PPT/27.png","hash":"c23bfe0e5595b360718bf9ed5c44991b90ce7afc","modified":1701607023382},{"_id":"source/PPT/29.png","hash":"7770a28404668859f480b3cd221ba52cae6736ba","modified":1701607023382},{"_id":"source/PPT/33.png","hash":"f169871fa54962d53f7f220afaa4c3d40c1fc518","modified":1701607023382},{"_id":"source/PPT/32.png","hash":"d5788f98084440eafbf5fb74af6bedfe50fc69f8","modified":1701607023382},{"_id":"source/PPT/4.png","hash":"757aeb4becfdf5c39a74ebbb95a7f9e628842161","modified":1701607023397},{"_id":"source/PPT/48.png","hash":"68424b32f8352df88abe5b7e7be50c2cedcb2c51","modified":1701607023413},{"_id":"source/PPT/51.png","hash":"7d2ad29e58f2f6ad5d04bc49afa0dcca20f82dd8","modified":1701607023413},{"_id":"source/PPT/54.png","hash":"fa5c8cc6d6502b750bff814eb4d5bcf03a705c7a","modified":1701607023413},{"_id":"source/PPT/58.png","hash":"f8ad254209307583b0f6101bd57c0afe6ea8a5c4","modified":1701607023413},{"_id":"source/PPT/61.png","hash":"f2c2e6baf44d1b936e532520994561bcd3c5e66b","modified":1701607023429},{"_id":"source/PPT/65.png","hash":"63d99b339b91c58e98c8983c71dd132f96b027eb","modified":1701607023429},{"_id":"source/PPT/73.png","hash":"899eb26bb57d6f505dbe16dae29fd75a1536f9ab","modified":1701607023444},{"_id":"source/PPT/9.png","hash":"115d8de913470669b5cce64802708141b71de725","modified":1701607023460},{"_id":"source/images/image-20200706201904057.png","hash":"10bf7dd7cb4713ba9d263299d761728a705bbb23","modified":1701607023460},{"_id":"source/images/image-20200706210000461.png","hash":"fe741001f868ddc6a184c56a209d17915bff17bb","modified":1701607023460},{"_id":"source/images/image-20200707075847954.png","hash":"625a66b8d5c37f5b47bc41eb5076aec2d1242fc0","modified":1701607023460},{"_id":"source/images/image-20200707080154039.png","hash":"4c73a20ac25a9a64b9c0b22990d841187b2b08c9","modified":1701607023476},{"_id":"source/images/image-20200707084208115.png","hash":"8aeb34d5145267919b584081bb264c4841095f9f","modified":1701607023476},{"_id":"source/images/image-20200707084714886.png","hash":"bac9c7a1d3a09a94fce66e53a83dbde20bd55907","modified":1701607023476},{"_id":"source/images/image-20200707101511025.png","hash":"54a67dbc1ec4998c437deb8598636bcd302990e6","modified":1701607023476},{"_id":"source/images/image-20200707101543871.png","hash":"9a10e95c95abbbff6768cde919446bcda28ad141","modified":1701607023476},{"_id":"source/images/image-20200707103547712.png","hash":"b9c2fea17dd4c765e544b933c98baf981c52e409","modified":1701607023476},{"_id":"source/images/image-20200707203038615.png","hash":"15fe98cae3c99be3883aa79da7126b5042b88293","modified":1701607023476},{"_id":"source/images/image-20200707203441718.png","hash":"1849c838359d821e31dd42b930951671827cd893","modified":1701607023476},{"_id":"source/PPT/11.png","hash":"8fc474537a3d4e1dbbab99b904d6ca5af651e3cb","modified":1701607023366},{"_id":"source/PPT/13.png","hash":"372423b66ad06a68a4f8339007705b6318be3c70","modified":1701607023366},{"_id":"source/PPT/22.png","hash":"8eb2190fdc0292587f38097ebf8d8f05923ea205","modified":1701607023382},{"_id":"source/PPT/23.png","hash":"5d781b5eba39b1f6d9845db3809796ec69a45448","modified":1701607023382},{"_id":"source/PPT/31.png","hash":"f06e71d818c54476fdcf6d84d6edd168f7392475","modified":1701607023382},{"_id":"source/PPT/30.png","hash":"691ccac7ebf6685cb3d4852475c219f2b14a7ed4","modified":1701607023382},{"_id":"source/PPT/49.png","hash":"319aecb7fce855d0d48db7e113ca3f3a8d868d21","modified":1701607023413},{"_id":"source/PPT/5.png","hash":"62c7750f1484c48b660241c3336856ce20fe9129","modified":1701607023413},{"_id":"source/PPT/53.png","hash":"1f4af02ce054368d47450bba272eb7a7d5b027bf","modified":1701607023413},{"_id":"source/PPT/6.png","hash":"5896eb64652ba7984b6b1f3964e0d1baa92e2d07","modified":1701607023429},{"_id":"source/PPT/64.png","hash":"b137f993560f84e93c0bebcb09a216d0220fbbc1","modified":1701607023429},{"_id":"source/images/image-20200706195127740.png","hash":"a2d3269196bded453181a325c091e15693a35117","modified":1701607023460},{"_id":"source/images/image-20200706203835403.png","hash":"df5fe65bec14aac174b049d8944601bf3b937b48","modified":1701607023460},{"_id":"source/images/image-20200706205947535.png","hash":"44f83d4ed76aa0e9bca176eb45730b1cc406485f","modified":1701607023460},{"_id":"source/images/image-20200706211652779.png","hash":"1a9a9a73735c39a87187c41880f073aac82e5a3f","modified":1701607023460},{"_id":"source/images/image-20200707085232646.png","hash":"beda02177470c7253444b11ef96d9eaa85fc17d7","modified":1701607023476},{"_id":"source/images/image-20200707104253530.png","hash":"02589807733dc68242cc20ab5b3ed9e30f56c09e","modified":1701607023476},{"_id":"source/images/垃圾回收.gif","hash":"5372d8ea294608d8e6766f38b71e0931ee88c955","modified":1701607023476},{"_id":"source/PPT/18.png","hash":"2ca7494dcb1ef9a1431c4a1b99d5d9b1a470f16f","modified":1701607023366},{"_id":"source/PPT/15.png","hash":"fdeff193177913668a4d98f1bfcbb75ba67fdd7b","modified":1701607023366},{"_id":"source/PPT/21.png","hash":"0d4728ccb90c5ea86f2f0e9d36d8168d9ec91b48","modified":1701607023382},{"_id":"source/PPT/35.png","hash":"4cda97749afa79b148d74111053c0cdae29a4c20","modified":1701607023397},{"_id":"source/PPT/37.png","hash":"fe9c85df2f5c58fbf68b81dfab84adb27e04bc41","modified":1701607023397},{"_id":"source/PPT/36.png","hash":"15024505e9cb7ed3f02a4d967dcff3ea885c8225","modified":1701607023397},{"_id":"source/PPT/42.png","hash":"674205cd6ee4c0f23e240979242692f5ec3fe42b","modified":1701607023397},{"_id":"source/PPT/43.png","hash":"e95663935be725bdca9e907852bde0744f860664","modified":1701607023397},{"_id":"source/PPT/45.png","hash":"fb3a65f354339e62f50104c9a1a45be3d0541202","modified":1701607023397},{"_id":"source/PPT/46.png","hash":"dc2c41a2e2e655f90ef09e54288ef28620efabeb","modified":1701607023413},{"_id":"source/PPT/50.png","hash":"ae70f279f6d22ff7bcf159c272c6f6cec893c555","modified":1701607023413},{"_id":"source/PPT/52.png","hash":"cea9d8b4840b9807454f89898c870f3a81c58ac4","modified":1701607023413},{"_id":"source/PPT/55.png","hash":"4c557c031ea8d4aae00c575e4ba8232b07e25032","modified":1701607023413},{"_id":"source/PPT/62.png","hash":"6537e823e33cf223d8ea44d8c149591525d1efa9","modified":1701607023429},{"_id":"source/PPT/67.png","hash":"9200a98fbfdafa4072cc8a123d6acf0e804c6433","modified":1701607023429},{"_id":"source/PPT/69.png","hash":"34a7aa6db5f77c7aa7245a93ba304c3631cf574a","modified":1701607023444},{"_id":"source/PPT/7.png","hash":"b59e8c300587692a32b1c2a398df0a43a720a16f","modified":1701607023444},{"_id":"source/PPT/70.png","hash":"a55fd6580b891b2e6ce20bbdb4390f3019789c4e","modified":1701607023444},{"_id":"source/PPT/72.png","hash":"b222f0110433e0656f67db884fc0c80d57e92781","modified":1701607023444},{"_id":"source/images/image-20200706203419496.png","hash":"1cbdcf6d93b48f6489a926f70baabd6fad68ec4a","modified":1701607023460},{"_id":"source/images/image-20200707091058346.png","hash":"4bf1501b2db2559fe1e4764e43d6c5b817f3cdb1","modified":1701607023476},{"_id":"source/images/image-20200707095606813.png","hash":"2e74274cf71ddc390cc01f3ff049525636170bd3","modified":1701607023476},{"_id":"source/images/image-20200707085737207.png","hash":"abc1966132672107802205db4de93c72400428e1","modified":1701607023476},{"_id":"source/PPT/2.png","hash":"b9849b500a8e178bea2ab32a368dfc043e5a298a","modified":1701607023366},{"_id":"source/PPT/26.png","hash":"ebd15f4f7d89b036723c513252a4d5707b699b5e","modified":1701607023382},{"_id":"source/PPT/3.png","hash":"3810a07751fe443912436c72c72cf7e7c7db83e6","modified":1701607023382},{"_id":"source/PPT/38.png","hash":"d4b94032ba66595a534341ec776ddc35b984ade3","modified":1701607023397},{"_id":"source/PPT/60.png","hash":"dedc713f3e70cf6b273da66d53e3a0e8d8d7d9b0","modified":1701607023429},{"_id":"source/PPT/63.png","hash":"12e6628367aa9c66c83ee0bfd301e6c79d947823","modified":1701607023429},{"_id":"source/PPT/66.png","hash":"321bac1159d07efec67f45f6786ba952f7cb866b","modified":1701607023429},{"_id":"source/PPT/71.png","hash":"783b2cc506d7ba7fb8d9515528a018234bebaf4f","modified":1701607023444},{"_id":"source/PPT/77.png","hash":"130e0b8329c7c93c730407f3cfe2d3c9dd84f0e5","modified":1701607023460},{"_id":"source/PPT/10.png","hash":"da9184b126beb69471daabfe5efdeb015a207bc1","modified":1701607023366},{"_id":"source/PPT/34.png","hash":"45cb9da15fd4b525cc1c87c8b358a72eec5a1a95","modified":1701607023397},{"_id":"source/PPT/57.png","hash":"e86dfab053d75d0f3e4435cc7ba058f01a096802","modified":1701607023413},{"_id":"source/PPT/59.png","hash":"448004dd03e1dea652004684c46aef829d6bce75","modified":1701607023429},{"_id":"source/PPT/75.png","hash":"296afb9add115eeca66aee322c2939e9bfafac10","modified":1701607023444},{"_id":"source/images/image-20200707205634266.png","hash":"0b382d2e4b3f7c0e719ba974e9316f42d236e5da","modified":1701607023476},{"_id":"source/PPT/76.png","hash":"ae2db6c6aad0ee4e2298f46074fc288e63ed941d","modified":1701607023444},{"_id":"source/images/image-20200706205821919.png","hash":"a8f23a54f6255d2ff1e05e0fd7aaf685b742725a","modified":1701607023460},{"_id":"source/images/image-20200706200739392.png","hash":"89bc67ffc3e8b10dce4c7eddb0d95ccf16df4dab","modified":1701607023460},{"_id":"source/_posts/对象实例化-内存布局与访问定位.md","hash":"d87ab6a9e42d1ba53c4220843f2421df71957583","modified":1701612597330},{"_id":"source/images/image-20200709164149920.png","hash":"bc15be9b3d67f359724f63f23f72454423ee5040","modified":1701607023163},{"_id":"source/images/image-20200709095356247.png","hash":"57ab40c8497e417ed6b791dc8f370528d7b09cf0","modified":1701607023163},{"_id":"source/images/image-20200709164350466.png","hash":"84460cd629aa0c3572e417a6b2de36e49928d982","modified":1701607023163},{"_id":"source/images/image-20200709164342002.png","hash":"79223c2343ffb2160ecc151ea310453610ce0e11","modified":1701607023163},{"_id":"source/images/image-20200709151033237.png","hash":"c74e5354dfa4e702dbb0a4714c7b30f8888a8c33","modified":1701607023163},{"_id":"source/images/image-20200709152801713.png","hash":"0732d2c8eca5c76739d231cca781f0fb3819de06","modified":1701607023163},{"_id":"source/_posts/jvm.md","hash":"ba80e0548381469e2be4fac2cdb3ca0116fded3c","modified":1702098297413},{"_id":"source/_posts/jvm/1.md","hash":"b906b0d26e6a8b07db83b5566df00b3a7cd2bafd","modified":1702098355043},{"_id":"source/_posts/jvm/JVM-运行时数据区概述及线程.md","hash":"ce74873241c2e09647c19b60cead207d1eac21bb","modified":1702101209799},{"_id":"source/_posts/jvm/程序计数器.md","hash":"aee41b56e0da4af573de8d08546d66c9bab628d1","modified":1702101231758},{"_id":"source/_posts/jvm/对象实例化-内存布局与访问定位.md","hash":"d5eec956a2dff6bd599ac8d5a727ee179740f039","modified":1702101264868},{"_id":"source/_posts/jvm/类加载子系统.md","hash":"b9e716c630f7b9fbcc124042a3beccb484d4f2c1","modified":1702101284288},{"_id":"source/_posts/jvm/java堆.md","hash":"2b307fb86a4e6b6a061a004361a2ea65bc72cd09","modified":1702101172648},{"_id":"source/_posts/post.md","hash":"bed064a1588dbd0fe8300ba7d77f39ab7bbde0ae","modified":1702098537839},{"_id":"source/_posts/jvm/垃圾收集.md","hash":"4f5f8f3e99b25ff7655462d320a9f15baacea552","modified":1702098856730},{"_id":"source/images/PPT/14.png","hash":"a98dba904ee368e03fa672b63e1ec6029e112ddc","modified":1701607023366},{"_id":"source/images/PPT/20.png","hash":"2ecde51b494c5a68615cf32481b24235b837a8a8","modified":1701607023366},{"_id":"source/images/PPT/25.png","hash":"ab8017c589bfa3d507b30b4098681c718ff2f7d1","modified":1701607023382},{"_id":"source/images/PPT/28.png","hash":"13f70f048b203584d25d2e792f22c3dcc416b25d","modified":1701607023382},{"_id":"source/images/PPT/41.png","hash":"355f718b54b5fe70767cd96c02d1ae6d29fc6d56","modified":1701607023397},{"_id":"source/images/PPT/44.png","hash":"798fc8ac7c32c66c2fcaa0a471f370013ccd3a8f","modified":1701607023397},{"_id":"source/images/PPT/24.png","hash":"afb7f648eb33621cbff7792f9adc058a86155763","modified":1701607023382},{"_id":"source/images/PPT/27.png","hash":"c23bfe0e5595b360718bf9ed5c44991b90ce7afc","modified":1701607023382},{"_id":"source/images/PPT/29.png","hash":"7770a28404668859f480b3cd221ba52cae6736ba","modified":1701607023382},{"_id":"source/images/PPT/32.png","hash":"d5788f98084440eafbf5fb74af6bedfe50fc69f8","modified":1701607023382},{"_id":"source/images/PPT/33.png","hash":"f169871fa54962d53f7f220afaa4c3d40c1fc518","modified":1701607023382},{"_id":"source/images/PPT/4.png","hash":"757aeb4becfdf5c39a74ebbb95a7f9e628842161","modified":1701607023397},{"_id":"source/images/PPT/48.png","hash":"68424b32f8352df88abe5b7e7be50c2cedcb2c51","modified":1701607023413},{"_id":"source/images/PPT/51.png","hash":"7d2ad29e58f2f6ad5d04bc49afa0dcca20f82dd8","modified":1701607023413},{"_id":"source/images/PPT/54.png","hash":"fa5c8cc6d6502b750bff814eb4d5bcf03a705c7a","modified":1701607023413},{"_id":"source/images/PPT/58.png","hash":"f8ad254209307583b0f6101bd57c0afe6ea8a5c4","modified":1701607023413},{"_id":"source/images/PPT/61.png","hash":"f2c2e6baf44d1b936e532520994561bcd3c5e66b","modified":1701607023429},{"_id":"source/images/PPT/65.png","hash":"63d99b339b91c58e98c8983c71dd132f96b027eb","modified":1701607023429},{"_id":"source/images/PPT/73.png","hash":"899eb26bb57d6f505dbe16dae29fd75a1536f9ab","modified":1701607023444},{"_id":"source/images/PPT/9.png","hash":"115d8de913470669b5cce64802708141b71de725","modified":1701607023460},{"_id":"source/images/PPT/1.png","hash":"c10e0bd9b5acfee3b98fc08009da45fc85cab57b","modified":1701607023366},{"_id":"source/images/PPT/11.png","hash":"8fc474537a3d4e1dbbab99b904d6ca5af651e3cb","modified":1701607023366},{"_id":"source/images/PPT/13.png","hash":"372423b66ad06a68a4f8339007705b6318be3c70","modified":1701607023366},{"_id":"source/images/PPT/22.png","hash":"8eb2190fdc0292587f38097ebf8d8f05923ea205","modified":1701607023382},{"_id":"source/images/PPT/23.png","hash":"5d781b5eba39b1f6d9845db3809796ec69a45448","modified":1701607023382},{"_id":"source/images/PPT/30.png","hash":"691ccac7ebf6685cb3d4852475c219f2b14a7ed4","modified":1701607023382},{"_id":"source/images/PPT/31.png","hash":"f06e71d818c54476fdcf6d84d6edd168f7392475","modified":1701607023382},{"_id":"source/images/PPT/49.png","hash":"319aecb7fce855d0d48db7e113ca3f3a8d868d21","modified":1701607023413},{"_id":"source/images/PPT/5.png","hash":"62c7750f1484c48b660241c3336856ce20fe9129","modified":1701607023413},{"_id":"source/images/PPT/53.png","hash":"1f4af02ce054368d47450bba272eb7a7d5b027bf","modified":1701607023413},{"_id":"source/images/PPT/6.png","hash":"5896eb64652ba7984b6b1f3964e0d1baa92e2d07","modified":1701607023429},{"_id":"source/images/PPT/64.png","hash":"b137f993560f84e93c0bebcb09a216d0220fbbc1","modified":1701607023429},{"_id":"source/images/PPT/15.png","hash":"fdeff193177913668a4d98f1bfcbb75ba67fdd7b","modified":1701607023366},{"_id":"source/images/PPT/18.png","hash":"2ca7494dcb1ef9a1431c4a1b99d5d9b1a470f16f","modified":1701607023366},{"_id":"source/images/PPT/21.png","hash":"0d4728ccb90c5ea86f2f0e9d36d8168d9ec91b48","modified":1701607023382},{"_id":"source/images/PPT/35.png","hash":"4cda97749afa79b148d74111053c0cdae29a4c20","modified":1701607023397},{"_id":"source/images/PPT/36.png","hash":"15024505e9cb7ed3f02a4d967dcff3ea885c8225","modified":1701607023397},{"_id":"source/images/PPT/37.png","hash":"fe9c85df2f5c58fbf68b81dfab84adb27e04bc41","modified":1701607023397},{"_id":"source/images/PPT/42.png","hash":"674205cd6ee4c0f23e240979242692f5ec3fe42b","modified":1701607023397},{"_id":"source/images/PPT/43.png","hash":"e95663935be725bdca9e907852bde0744f860664","modified":1701607023397},{"_id":"source/images/PPT/45.png","hash":"fb3a65f354339e62f50104c9a1a45be3d0541202","modified":1701607023397},{"_id":"source/images/PPT/46.png","hash":"dc2c41a2e2e655f90ef09e54288ef28620efabeb","modified":1701607023413},{"_id":"source/images/PPT/50.png","hash":"ae70f279f6d22ff7bcf159c272c6f6cec893c555","modified":1701607023413},{"_id":"source/images/PPT/52.png","hash":"cea9d8b4840b9807454f89898c870f3a81c58ac4","modified":1701607023413},{"_id":"source/images/PPT/55.png","hash":"4c557c031ea8d4aae00c575e4ba8232b07e25032","modified":1701607023413},{"_id":"source/images/PPT/62.png","hash":"6537e823e33cf223d8ea44d8c149591525d1efa9","modified":1701607023429},{"_id":"source/images/PPT/67.png","hash":"9200a98fbfdafa4072cc8a123d6acf0e804c6433","modified":1701607023429},{"_id":"source/images/PPT/69.png","hash":"34a7aa6db5f77c7aa7245a93ba304c3631cf574a","modified":1701607023444},{"_id":"source/images/PPT/7.png","hash":"b59e8c300587692a32b1c2a398df0a43a720a16f","modified":1701607023444},{"_id":"source/images/PPT/70.png","hash":"a55fd6580b891b2e6ce20bbdb4390f3019789c4e","modified":1701607023444},{"_id":"source/images/PPT/72.png","hash":"b222f0110433e0656f67db884fc0c80d57e92781","modified":1701607023444},{"_id":"source/images/PPT/2.png","hash":"b9849b500a8e178bea2ab32a368dfc043e5a298a","modified":1701607023366},{"_id":"source/images/PPT/26.png","hash":"ebd15f4f7d89b036723c513252a4d5707b699b5e","modified":1701607023382},{"_id":"source/images/PPT/3.png","hash":"3810a07751fe443912436c72c72cf7e7c7db83e6","modified":1701607023382},{"_id":"source/images/PPT/38.png","hash":"d4b94032ba66595a534341ec776ddc35b984ade3","modified":1701607023397},{"_id":"source/images/PPT/60.png","hash":"dedc713f3e70cf6b273da66d53e3a0e8d8d7d9b0","modified":1701607023429},{"_id":"source/images/PPT/63.png","hash":"12e6628367aa9c66c83ee0bfd301e6c79d947823","modified":1701607023429},{"_id":"source/images/PPT/66.png","hash":"321bac1159d07efec67f45f6786ba952f7cb866b","modified":1701607023429},{"_id":"source/images/PPT/71.png","hash":"783b2cc506d7ba7fb8d9515528a018234bebaf4f","modified":1701607023444},{"_id":"source/images/PPT/77.png","hash":"130e0b8329c7c93c730407f3cfe2d3c9dd84f0e5","modified":1701607023460},{"_id":"source/images/PPT/10.png","hash":"da9184b126beb69471daabfe5efdeb015a207bc1","modified":1701607023366},{"_id":"source/images/PPT/34.png","hash":"45cb9da15fd4b525cc1c87c8b358a72eec5a1a95","modified":1701607023397},{"_id":"source/images/PPT/57.png","hash":"e86dfab053d75d0f3e4435cc7ba058f01a096802","modified":1701607023413},{"_id":"source/images/PPT/59.png","hash":"448004dd03e1dea652004684c46aef829d6bce75","modified":1701607023429},{"_id":"source/images/PPT/75.png","hash":"296afb9add115eeca66aee322c2939e9bfafac10","modified":1701607023444},{"_id":"source/images/PPT/76.png","hash":"ae2db6c6aad0ee4e2298f46074fc288e63ed941d","modified":1701607023444},{"_id":"source/images/jvm/PPT/14.png","hash":"a98dba904ee368e03fa672b63e1ec6029e112ddc","modified":1701607023366},{"_id":"source/images/jvm/PPT/20.png","hash":"2ecde51b494c5a68615cf32481b24235b837a8a8","modified":1701607023366},{"_id":"source/images/jvm/PPT/25.png","hash":"ab8017c589bfa3d507b30b4098681c718ff2f7d1","modified":1701607023382},{"_id":"source/images/jvm/PPT/28.png","hash":"13f70f048b203584d25d2e792f22c3dcc416b25d","modified":1701607023382},{"_id":"source/images/jvm/PPT/41.png","hash":"355f718b54b5fe70767cd96c02d1ae6d29fc6d56","modified":1701607023397},{"_id":"source/images/jvm/PPT/44.png","hash":"798fc8ac7c32c66c2fcaa0a471f370013ccd3a8f","modified":1701607023397},{"_id":"source/images/jvm/PPT/24.png","hash":"afb7f648eb33621cbff7792f9adc058a86155763","modified":1701607023382},{"_id":"source/images/jvm/PPT/27.png","hash":"c23bfe0e5595b360718bf9ed5c44991b90ce7afc","modified":1701607023382},{"_id":"source/images/jvm/PPT/29.png","hash":"7770a28404668859f480b3cd221ba52cae6736ba","modified":1701607023382},{"_id":"source/images/jvm/PPT/32.png","hash":"d5788f98084440eafbf5fb74af6bedfe50fc69f8","modified":1701607023382},{"_id":"source/images/jvm/PPT/33.png","hash":"f169871fa54962d53f7f220afaa4c3d40c1fc518","modified":1701607023382},{"_id":"source/images/jvm/PPT/4.png","hash":"757aeb4becfdf5c39a74ebbb95a7f9e628842161","modified":1701607023397},{"_id":"source/images/jvm/PPT/48.png","hash":"68424b32f8352df88abe5b7e7be50c2cedcb2c51","modified":1701607023413},{"_id":"source/images/jvm/PPT/51.png","hash":"7d2ad29e58f2f6ad5d04bc49afa0dcca20f82dd8","modified":1701607023413},{"_id":"source/images/jvm/PPT/54.png","hash":"fa5c8cc6d6502b750bff814eb4d5bcf03a705c7a","modified":1701607023413},{"_id":"source/images/jvm/PPT/58.png","hash":"f8ad254209307583b0f6101bd57c0afe6ea8a5c4","modified":1701607023413},{"_id":"source/images/jvm/PPT/61.png","hash":"f2c2e6baf44d1b936e532520994561bcd3c5e66b","modified":1701607023429},{"_id":"source/images/jvm/PPT/65.png","hash":"63d99b339b91c58e98c8983c71dd132f96b027eb","modified":1701607023429},{"_id":"source/images/jvm/PPT/73.png","hash":"899eb26bb57d6f505dbe16dae29fd75a1536f9ab","modified":1701607023444},{"_id":"source/images/jvm/PPT/9.png","hash":"115d8de913470669b5cce64802708141b71de725","modified":1701607023460},{"_id":"source/images/jvm/PPT/11.png","hash":"8fc474537a3d4e1dbbab99b904d6ca5af651e3cb","modified":1701607023366},{"_id":"source/images/jvm/PPT/1.png","hash":"c10e0bd9b5acfee3b98fc08009da45fc85cab57b","modified":1701607023366},{"_id":"source/images/jvm/PPT/13.png","hash":"372423b66ad06a68a4f8339007705b6318be3c70","modified":1701607023366},{"_id":"source/images/jvm/PPT/22.png","hash":"8eb2190fdc0292587f38097ebf8d8f05923ea205","modified":1701607023382},{"_id":"source/images/jvm/PPT/23.png","hash":"5d781b5eba39b1f6d9845db3809796ec69a45448","modified":1701607023382},{"_id":"source/images/jvm/PPT/30.png","hash":"691ccac7ebf6685cb3d4852475c219f2b14a7ed4","modified":1701607023382},{"_id":"source/images/jvm/PPT/31.png","hash":"f06e71d818c54476fdcf6d84d6edd168f7392475","modified":1701607023382},{"_id":"source/images/jvm/PPT/49.png","hash":"319aecb7fce855d0d48db7e113ca3f3a8d868d21","modified":1701607023413},{"_id":"source/images/jvm/PPT/5.png","hash":"62c7750f1484c48b660241c3336856ce20fe9129","modified":1701607023413},{"_id":"source/images/jvm/PPT/53.png","hash":"1f4af02ce054368d47450bba272eb7a7d5b027bf","modified":1701607023413},{"_id":"source/images/jvm/PPT/6.png","hash":"5896eb64652ba7984b6b1f3964e0d1baa92e2d07","modified":1701607023429},{"_id":"source/images/jvm/PPT/64.png","hash":"b137f993560f84e93c0bebcb09a216d0220fbbc1","modified":1701607023429},{"_id":"source/images/jvm/PPT/15.png","hash":"fdeff193177913668a4d98f1bfcbb75ba67fdd7b","modified":1701607023366},{"_id":"source/images/jvm/PPT/18.png","hash":"2ca7494dcb1ef9a1431c4a1b99d5d9b1a470f16f","modified":1701607023366},{"_id":"source/images/jvm/PPT/21.png","hash":"0d4728ccb90c5ea86f2f0e9d36d8168d9ec91b48","modified":1701607023382},{"_id":"source/images/jvm/PPT/36.png","hash":"15024505e9cb7ed3f02a4d967dcff3ea885c8225","modified":1701607023397},{"_id":"source/images/jvm/PPT/35.png","hash":"4cda97749afa79b148d74111053c0cdae29a4c20","modified":1701607023397},{"_id":"source/images/jvm/PPT/37.png","hash":"fe9c85df2f5c58fbf68b81dfab84adb27e04bc41","modified":1701607023397},{"_id":"source/images/jvm/PPT/42.png","hash":"674205cd6ee4c0f23e240979242692f5ec3fe42b","modified":1701607023397},{"_id":"source/images/jvm/PPT/43.png","hash":"e95663935be725bdca9e907852bde0744f860664","modified":1701607023397},{"_id":"source/images/jvm/PPT/45.png","hash":"fb3a65f354339e62f50104c9a1a45be3d0541202","modified":1701607023397},{"_id":"source/images/jvm/PPT/46.png","hash":"dc2c41a2e2e655f90ef09e54288ef28620efabeb","modified":1701607023413},{"_id":"source/images/jvm/PPT/50.png","hash":"ae70f279f6d22ff7bcf159c272c6f6cec893c555","modified":1701607023413},{"_id":"source/images/jvm/PPT/52.png","hash":"cea9d8b4840b9807454f89898c870f3a81c58ac4","modified":1701607023413},{"_id":"source/images/jvm/PPT/55.png","hash":"4c557c031ea8d4aae00c575e4ba8232b07e25032","modified":1701607023413},{"_id":"source/images/jvm/PPT/62.png","hash":"6537e823e33cf223d8ea44d8c149591525d1efa9","modified":1701607023429},{"_id":"source/images/jvm/PPT/69.png","hash":"34a7aa6db5f77c7aa7245a93ba304c3631cf574a","modified":1701607023444},{"_id":"source/images/jvm/PPT/67.png","hash":"9200a98fbfdafa4072cc8a123d6acf0e804c6433","modified":1701607023429},{"_id":"source/images/jvm/PPT/7.png","hash":"b59e8c300587692a32b1c2a398df0a43a720a16f","modified":1701607023444},{"_id":"source/images/jvm/PPT/70.png","hash":"a55fd6580b891b2e6ce20bbdb4390f3019789c4e","modified":1701607023444},{"_id":"source/images/jvm/PPT/72.png","hash":"b222f0110433e0656f67db884fc0c80d57e92781","modified":1701607023444},{"_id":"source/images/jvm/PPT/2.png","hash":"b9849b500a8e178bea2ab32a368dfc043e5a298a","modified":1701607023366},{"_id":"source/images/jvm/PPT/26.png","hash":"ebd15f4f7d89b036723c513252a4d5707b699b5e","modified":1701607023382},{"_id":"source/images/jvm/PPT/3.png","hash":"3810a07751fe443912436c72c72cf7e7c7db83e6","modified":1701607023382},{"_id":"source/images/jvm/PPT/38.png","hash":"d4b94032ba66595a534341ec776ddc35b984ade3","modified":1701607023397},{"_id":"source/images/jvm/PPT/60.png","hash":"dedc713f3e70cf6b273da66d53e3a0e8d8d7d9b0","modified":1701607023429},{"_id":"source/images/jvm/PPT/63.png","hash":"12e6628367aa9c66c83ee0bfd301e6c79d947823","modified":1701607023429},{"_id":"source/images/jvm/PPT/66.png","hash":"321bac1159d07efec67f45f6786ba952f7cb866b","modified":1701607023429},{"_id":"source/images/jvm/PPT/71.png","hash":"783b2cc506d7ba7fb8d9515528a018234bebaf4f","modified":1701607023444},{"_id":"source/images/jvm/PPT/77.png","hash":"130e0b8329c7c93c730407f3cfe2d3c9dd84f0e5","modified":1701607023460},{"_id":"source/images/jvm/PPT/10.png","hash":"da9184b126beb69471daabfe5efdeb015a207bc1","modified":1701607023366},{"_id":"source/images/jvm/PPT/34.png","hash":"45cb9da15fd4b525cc1c87c8b358a72eec5a1a95","modified":1701607023397},{"_id":"source/images/jvm/PPT/57.png","hash":"e86dfab053d75d0f3e4435cc7ba058f01a096802","modified":1701607023413},{"_id":"source/images/jvm/PPT/59.png","hash":"448004dd03e1dea652004684c46aef829d6bce75","modified":1701607023429},{"_id":"source/images/jvm/PPT/75.png","hash":"296afb9add115eeca66aee322c2939e9bfafac10","modified":1701607023444},{"_id":"source/images/jvm/PPT/76.png","hash":"ae2db6c6aad0ee4e2298f46074fc288e63ed941d","modified":1701607023444},{"_id":"source/_posts/shell/shell编程语法.md","hash":"41fe3ba74ed01f04fdb17f5106ca1beaf75e6053","modified":1702102946696},{"_id":"source/_posts/k8s/kubesphere环境安装.md","hash":"1eeb46e9d4df2131ac4ba3bc69e03de9823c5574","modified":1702109345518},{"_id":"source/_posts/cert/SSL自签名证书(基于根证书)生成与配置.md","hash":"a8e97aa91e697fa24dd7878993f27ab831bc7e29","modified":1702102320527},{"_id":"source/_posts/cert/自定义密钥生成自签名SSL证书.md","hash":"c59679c24b50c6c5a646c5a94f1b0e2a6b0f1886","modified":1702102692315},{"_id":"source/_posts/docker/docker常用容器创建.md","hash":"a0491d16c4991bad7318be091446371f80eeabe3","modified":1702109709417},{"_id":"source/_posts/git/commit合并.md","hash":"e8be481aa6603bdb316f2413ea29694894c82716","modified":1702100800721},{"_id":"source/_posts/jvm/垃圾收集算法.md","hash":"c44703233b811e82ef06725f8af1c0d4715c0b2f","modified":1702101593197},{"_id":"source/_posts/shell/shell常用脚本.md","hash":"10bdbc633e694f8e006aa9b49a8d76fdb050bd13","modified":1702105572801},{"_id":"source/images/cert/chrome-cert-1.png","hash":"ebd280af6a3585442b43fa5d4a07dd625dd1e9f0","modified":1702102107106},{"_id":"source/images/cert/chrome-cert-2.png","hash":"22b254f9ce791a53e2cea1f8126dc646fc0db83e","modified":1702102119207},{"_id":"source/images/cert/chrome-cert-3.png","hash":"116bd917549e1036f3552a12503c048b513fdc33","modified":1702102133226},{"_id":"source/images/git/git_merge_4.png","hash":"b00afca3f148f63a414bcc8fbb537ede1896cc0a","modified":1702100406002},{"_id":"source/images/git/git_merge_5.png","hash":"86a11f8f74fb75500a9706b7c7e6ca43fe61c221","modified":1702100433029},{"_id":"source/images/jvm/image-20200705090237078.png","hash":"20849cfdec9178a72ff147a3ee9ca3b116c9111b","modified":1701607023319},{"_id":"source/images/jvm/image-20200705111843003.png","hash":"184e1ee7ec59e3f0de734b46370ead8a61140363","modified":1701607023335},{"_id":"source/images/jvm/image-20200705112601211.png","hash":"b658e72306a5f328994104ceed364ba4eca10189","modified":1701607023335},{"_id":"source/images/jvm/image-20200705161409533.png","hash":"d079319ebb743ae71f02605eed87da9ecbc197b1","modified":1701607023335},{"_id":"source/images/jvm/image-20200705161812542.png","hash":"76a9ca0847a75d53b069da0a3821ad9ac2f49f84","modified":1701607023335},{"_id":"source/images/jvm/image-20200705161849557.png","hash":"7ab6fbf102e1a507b8555492de0cd63528b4f042","modified":1701607023335},{"_id":"source/images/jvm/image-20200706205756045.png","hash":"2e309294e64a8a0b9b70dadd51457b4939f0f037","modified":1701607023460},{"_id":"source/images/jvm/image-20200705081813409.png","hash":"292b4f1d4ff7b99adacb0842932a6dc95f417cab","modified":1701607023319},{"_id":"source/images/jvm/image-20200705081913538.png","hash":"853d8d274c5a127b16415017fb6882af54c58c3a","modified":1701607023319},{"_id":"source/images/jvm/image-20200705082255746.png","hash":"be4e911d134a19140a905c42669386febbb9867e","modified":1701607023319},{"_id":"source/images/jvm/image-20200705090328171.png","hash":"4b16f40b094dce8c10873fd4b527962217699431","modified":1701607023319},{"_id":"source/images/jvm/image-20200705094149223.png","hash":"7ed293684c015dfd06dc88b2d74810a2d16c5baa","modified":1701607023319},{"_id":"source/images/jvm/image-20200706201904057.png","hash":"10bf7dd7cb4713ba9d263299d761728a705bbb23","modified":1701607023460},{"_id":"source/images/jvm/image-20200706210000461.png","hash":"fe741001f868ddc6a184c56a209d17915bff17bb","modified":1701607023460},{"_id":"source/images/jvm/image-20200707075847954.png","hash":"625a66b8d5c37f5b47bc41eb5076aec2d1242fc0","modified":1701607023460},{"_id":"source/images/jvm/image-20200707080154039.png","hash":"4c73a20ac25a9a64b9c0b22990d841187b2b08c9","modified":1701607023476},{"_id":"source/images/jvm/image-20200707084714886.png","hash":"bac9c7a1d3a09a94fce66e53a83dbde20bd55907","modified":1701607023476},{"_id":"source/images/jvm/image-20200707084208115.png","hash":"8aeb34d5145267919b584081bb264c4841095f9f","modified":1701607023476},{"_id":"source/images/jvm/image-20200707101511025.png","hash":"54a67dbc1ec4998c437deb8598636bcd302990e6","modified":1701607023476},{"_id":"source/images/jvm/image-20200707101543871.png","hash":"9a10e95c95abbbff6768cde919446bcda28ad141","modified":1701607023476},{"_id":"source/images/jvm/image-20200707103547712.png","hash":"b9c2fea17dd4c765e544b933c98baf981c52e409","modified":1701607023476},{"_id":"source/images/jvm/image-20200707203038615.png","hash":"15fe98cae3c99be3883aa79da7126b5042b88293","modified":1701607023476},{"_id":"source/images/jvm/image-20200707203441718.png","hash":"1849c838359d821e31dd42b930951671827cd893","modified":1701607023476},{"_id":"source/images/jvm/image-20200709164149920.png","hash":"bc15be9b3d67f359724f63f23f72454423ee5040","modified":1701607023163},{"_id":"source/images/jvm/image-20200712102205795.png","hash":"5c6dfd5b4c2f078477ab53fd3a66713adcba498e","modified":1701607023210},{"_id":"source/images/jvm/image-20200712104149246.png","hash":"b64c7d06efaa6128d8636aa77eaf2d8cbc2d30b9","modified":1701607023210},{"_id":"source/images/jvm/image-20200712151916991.png","hash":"c00abf5e3d24b85d8d36562680b89d1dc0e09ac1","modified":1701607023241},{"_id":"source/images/jvm/image-20200712150935078.png","hash":"d2fad6a01b7972a9f9cb3079a119090fc284c713","modified":1701607023241},{"_id":"source/images/jvm/image-20200712152847218.png","hash":"c97936e43958f858c9ef3ab43b7152c5f291f509","modified":1701607023241},{"_id":"source/images/jvm/image-20200712153236508.png","hash":"06426c7f5be1d9778ea5a00e77b9961658b8ec9e","modified":1701607023241},{"_id":"source/images/jvm/image-20200705080719531.png","hash":"c60f44f584a5d02aae45dc0bdef7932a06e78002","modified":1701607023319},{"_id":"source/images/jvm/image-20200705084038680.png","hash":"0dfd39d72d75521c7b19d1a2ea44aa55873ff375","modified":1701607023319},{"_id":"source/images/jvm/image-20200705082601441.png","hash":"e5bff9fd77e96e926209dec82d6cefdb8a7d28ca","modified":1701607023319},{"_id":"source/images/jvm/image-20200705103516138.png","hash":"05934b5536d201bf14cf593948a1db02a0d35b79","modified":1701607023319},{"_id":"source/images/jvm/image-20200705111640511.png","hash":"87f90a65b36a95cf2fd01cfd6756b7452ed22784","modified":1701607023335},{"_id":"source/images/jvm/image-20200705155551919.png","hash":"def48f33b3d5bfa91caeadf8ff3e1c4bc0a3ec1b","modified":1701607023335},{"_id":"source/images/jvm/image-20200705155728557.png","hash":"5b0419debf47f35e78ba2b1252f556a61866450a","modified":1701607023335},{"_id":"source/images/jvm/image-20200705161007423.png","hash":"880ef9a3eb8a156af91d9c46bb8dbaf4d1ad5a89","modified":1701607023335},{"_id":"source/images/jvm/image-20200706195127740.png","hash":"a2d3269196bded453181a325c091e15693a35117","modified":1701607023460},{"_id":"source/images/jvm/image-20200706203835403.png","hash":"df5fe65bec14aac174b049d8944601bf3b937b48","modified":1701607023460},{"_id":"source/images/jvm/image-20200706205947535.png","hash":"44f83d4ed76aa0e9bca176eb45730b1cc406485f","modified":1701607023460},{"_id":"source/images/jvm/image-20200706211652779.png","hash":"1a9a9a73735c39a87187c41880f073aac82e5a3f","modified":1701607023460},{"_id":"source/images/jvm/image-20200707085232646.png","hash":"beda02177470c7253444b11ef96d9eaa85fc17d7","modified":1701607023476},{"_id":"source/images/jvm/image-20200707104253530.png","hash":"02589807733dc68242cc20ab5b3ed9e30f56c09e","modified":1701607023476},{"_id":"source/images/jvm/image-20200712104312406.png","hash":"96dbbbb45fa460bdb0a248112cccdb2b7f4d031d","modified":1701607023210},{"_id":"source/images/jvm/image-20200712112026317.png","hash":"0ca453af3d72eb06782e3c52e7c6b0026020e4e3","modified":1701607023226},{"_id":"source/images/jvm/image-20200712152029615.png","hash":"d5cfc2557f285932bb279aa4dcf53de234613c62","modified":1701607023241},{"_id":"source/images/jvm/垃圾回收.gif","hash":"5372d8ea294608d8e6766f38b71e0931ee88c955","modified":1701607023476},{"_id":"source/images/git/git_merge_2.png","hash":"898d1a9ea9284e9ebb1a134d5a9e239102d5717e","modified":1702100383042},{"_id":"source/images/git/git_merge_3.png","hash":"fcc0ec9c6dc0a986db5952b21d5569f2fbe8aa42","modified":1702100390839},{"_id":"source/images/jvm/image-20200705080911284.png","hash":"7a38e064b14f803a69eb1a3b59d26bc5170903a9","modified":1701607023319},{"_id":"source/images/jvm/image-20200705103636003.png","hash":"934951c09fb9c4eebc16d8a2258592920bb0ea26","modified":1701607023319},{"_id":"source/images/jvm/image-20200705105151258.png","hash":"68e1cb4066f7a2f62f4f1b3ef036e68e1a0f2d1e","modified":1701607023319},{"_id":"source/images/jvm/image-20200706203419496.png","hash":"1cbdcf6d93b48f6489a926f70baabd6fad68ec4a","modified":1701607023460},{"_id":"source/images/jvm/image-20200707085737207.png","hash":"abc1966132672107802205db4de93c72400428e1","modified":1701607023476},{"_id":"source/images/jvm/image-20200707091058346.png","hash":"4bf1501b2db2559fe1e4764e43d6c5b817f3cdb1","modified":1701607023476},{"_id":"source/images/jvm/image-20200707095606813.png","hash":"2e74274cf71ddc390cc01f3ff049525636170bd3","modified":1701607023476},{"_id":"source/images/jvm/image-20200712103230349.png","hash":"c799224b67d3c32465e1bc94cddc5bcff97187c7","modified":1701607023210},{"_id":"source/images/git/git_merge_1.png","hash":"c17848674480352beef85c6b0c553ce24f9ae01f","modified":1702100400099},{"_id":"source/images/jvm/image-20200709095356247.png","hash":"57ab40c8497e417ed6b791dc8f370528d7b09cf0","modified":1701607023163},{"_id":"source/images/jvm/image-20200709164350466.png","hash":"84460cd629aa0c3572e417a6b2de36e49928d982","modified":1701607023163},{"_id":"source/images/jvm/image-20200712104622677.png","hash":"c40d0afc89643076e9767a1a79b0cfa8322bfd27","modified":1701607023226},{"_id":"source/images/jvm/image-20200712112512720.png","hash":"43d7b5e4381d086b9b13ef13faa74e91ffa9e051","modified":1701607023226},{"_id":"source/images/jvm/image-20200712165318590.png","hash":"99d14c7cd01918a42d76bbc5dd59b5ac54395a7e","modified":1701607023241},{"_id":"source/images/jvm/image-20200709151033237.png","hash":"c74e5354dfa4e702dbb0a4714c7b30f8888a8c33","modified":1701607023163},{"_id":"source/images/jvm/image-20200709164342002.png","hash":"79223c2343ffb2160ecc151ea310453610ce0e11","modified":1701607023163},{"_id":"source/images/jvm/image-20200712150303710.png","hash":"9b134f5fb6d9a8f9c286c82808e1414c4f9c06cc","modified":1701607023241},{"_id":"source/images/jvm/image-20200705105810107.png","hash":"c51c0c76538db07558cf3cba481cb2e1780bc0f9","modified":1701607023319},{"_id":"source/images/jvm/image-20200705112036630.png","hash":"4484f62c9f5ebeca29ac5b274e70396ef4d1e37f","modified":1701607023335},{"_id":"source/images/jvm/image-20200707205634266.png","hash":"0b382d2e4b3f7c0e719ba974e9316f42d236e5da","modified":1701607023476},{"_id":"source/images/jvm/image-20200706205821919.png","hash":"a8f23a54f6255d2ff1e05e0fd7aaf685b742725a","modified":1701607023460},{"_id":"source/images/jvm/image-20200709152801713.png","hash":"0732d2c8eca5c76739d231cca781f0fb3819de06","modified":1701607023163},{"_id":"source/images/jvm/image-20200712110411885.png","hash":"7f2279a693fec6effccae76087760bfd3f345d12","modified":1701607023226},{"_id":"source/images/jvm/image-20200706200739392.png","hash":"89bc67ffc3e8b10dce4c7eddb0d95ccf16df4dab","modified":1701607023460},{"_id":"source/images/jvm/image-20200705112416101.png","hash":"2bbc650222dce101dc39fa3ed5cbbb3b15ef6aa5","modified":1701607023335},{"_id":"source/images/jvm/image-20200712150229048.png","hash":"3ac8a5de0bc3cae170ebacb7c81c85d6f535ae99","modified":1701607023241},{"_id":"source/images/jvm/image-20200712113256075.png","hash":"ddbe5247616abee0dc1b6de50ee247330cf994ae","modified":1701607023226},{"_id":"source/books/shell常用脚本.md","hash":"10bdbc633e694f8e006aa9b49a8d76fdb050bd13","modified":1702105572801},{"_id":"source/_posts/books/java面试指南.md","hash":"9b5b76c47de1c02a9668a38aeef963680eda0643","modified":1702113123918},{"_id":"public/2023/12/09/books/java面试指南/index.html","hash":"59b8eb17d492a9d8b8db67c2f81f8653241e275b","modified":1702113480739},{"_id":"public/archives/page/2/index.html","hash":"e7860cc8998f4883991b217ec792c0a705b47081","modified":1702121804863},{"_id":"public/categories/java/index.html","hash":"d5aad154a49ea7763118f3a71ec01b3618572f94","modified":1702121804863},{"_id":"public/categories/git/index.html","hash":"2472a22a742b14136a1059fea7ecee922bb0b285","modified":1702121804863},{"_id":"public/archives/2023/page/2/index.html","hash":"001d8bc88984b654de170e9b1382fdc48aee0a78","modified":1702121804863},{"_id":"public/categories/shell/index.html","hash":"a4c1a2df00f9b654cc0719299095cb8d62d1b5d0","modified":1702121804863},{"_id":"public/categories/k8s/index.html","hash":"4966c874811f80cae4fa45489144c6f08b882f69","modified":1702121804863},{"_id":"public/categories/docker/index.html","hash":"64f6b0959d6efdc1c5bf097533073ff6f2ee5655","modified":1702121804863},{"_id":"public/archives/2023/12/page/2/index.html","hash":"102b59de377e32e19ce7ce3b81b9863c19eaa2cd","modified":1702121804863},{"_id":"public/tags/jvm/index.html","hash":"92f2241fdaae0eb3790404b24339a0bdf741a11f","modified":1702121804863},{"_id":"public/tags/cert/index.html","hash":"a13dfbdb26cde80b05b392c79a191cb3e62e103d","modified":1702121804863},{"_id":"public/tags/git/index.html","hash":"9ee8334724aebe29a182dd959ea4ee8835f4cb93","modified":1702121804863},{"_id":"public/tags/shell编程/index.html","hash":"3cb157f57e30fe729826fe39b78f0b9220015c0b","modified":1702121804863},{"_id":"public/tags/shell/index.html","hash":"bef2ef7231b7de72feb2631c6aa9b1b784615638","modified":1702121804863},{"_id":"public/tags/k8s/index.html","hash":"bed5a8483680501d54f61e723e776e0c6e0c23d4","modified":1702121804863},{"_id":"public/tags/docker/index.html","hash":"1e090284d15bfcd5652e4ee1ae8ddb6b540ccaa4","modified":1702121804863},{"_id":"public/books/shell常用脚本.html","hash":"2b62a935662bf7df0b3e585f4097367cc5f5507f","modified":1702113327423},{"_id":"public/2023/12/09/docker/docker常用容器创建/index.html","hash":"546ae263bb37d7962d46c6dc8f412a434d3e6a76","modified":1702122369919},{"_id":"public/2023/12/09/k8s/kubesphere环境安装/index.html","hash":"953a7e5c0877cb7be73cb605c54f0fd4934f841f","modified":1702122369919},{"_id":"public/2023/12/09/shell/shell常用脚本/index.html","hash":"93aa862c19d6214dab94a8be3e1dec06b052d894","modified":1702122369919},{"_id":"public/2023/12/09/shell/shell编程语法/index.html","hash":"879ef4b7c2614b1bc51bda0145c21a8c2a67d578","modified":1702122369919},{"_id":"public/2023/12/09/cert/自定义密钥生成自签名SSL证书/index.html","hash":"a5aefcbc9784d87daa5c97c002b54c6c92a21eb1","modified":1702122369919},{"_id":"public/2023/12/09/cert/SSL自签名证书(基于根证书)生成与配置/index.html","hash":"bd222c5764544cbf1cfbdb5de5b62d22298d0352","modified":1702122369919},{"_id":"public/2023/12/09/jvm/垃圾收集算法/index.html","hash":"c1017c35b5ce6cc380d5b031416140dc44cf741e","modified":1702122369919},{"_id":"public/2023/12/03/jvm/对象实例化-内存布局与访问定位/index.html","hash":"128faf0bf7b237eaa5394bda52b6db34f15080b0","modified":1702122369919},{"_id":"public/2023/12/09/git/commit合并/index.html","hash":"316b8100b07a8ab47b57615636d612e984c085fe","modified":1702122369919},{"_id":"public/2023/12/03/jvm/java堆/index.html","hash":"919aa672cede0d90038c825b76827341659ec62f","modified":1702122369919},{"_id":"public/2023/12/03/jvm/JVM-运行时数据区概述及线程/index.html","hash":"c039fe39e0eec0e95e3163da9c4648d243b9ab22","modified":1702122369919},{"_id":"public/2023/12/03/jvm/程序计数器/index.html","hash":"31c2042d28973561cbaa4bca5dd5b4cf81bd529a","modified":1702122369919},{"_id":"public/2023/12/03/jvm/类加载子系统/index.html","hash":"9d8e43e942b202db5b223fb6e5bb0366e520d037","modified":1702122369919},{"_id":"public/page/2/index.html","hash":"cd5f4860b29d11f1970f06ee7389964dd88af903","modified":1702121804863},{"_id":"public/images/git/git_merge_4.png","hash":"b00afca3f148f63a414bcc8fbb537ede1896cc0a","modified":1702113327423},{"_id":"public/images/git/git_merge_5.png","hash":"86a11f8f74fb75500a9706b7c7e6ca43fe61c221","modified":1702113327423},{"_id":"public/images/jvm/image-20200705111843003.png","hash":"184e1ee7ec59e3f0de734b46370ead8a61140363","modified":1702113327423},{"_id":"public/images/jvm/image-20200705112601211.png","hash":"b658e72306a5f328994104ceed364ba4eca10189","modified":1702113327423},{"_id":"public/images/jvm/PPT/14.png","hash":"a98dba904ee368e03fa672b63e1ec6029e112ddc","modified":1702113327423},{"_id":"public/images/jvm/PPT/20.png","hash":"2ecde51b494c5a68615cf32481b24235b837a8a8","modified":1702113327423},{"_id":"public/images/jvm/PPT/25.png","hash":"ab8017c589bfa3d507b30b4098681c718ff2f7d1","modified":1702113327423},{"_id":"public/images/jvm/PPT/28.png","hash":"13f70f048b203584d25d2e792f22c3dcc416b25d","modified":1702113327423},{"_id":"public/images/jvm/PPT/41.png","hash":"355f718b54b5fe70767cd96c02d1ae6d29fc6d56","modified":1702113327423},{"_id":"public/images/jvm/PPT/44.png","hash":"798fc8ac7c32c66c2fcaa0a471f370013ccd3a8f","modified":1702113327423},{"_id":"public/images/jvm/PPT/24.png","hash":"afb7f648eb33621cbff7792f9adc058a86155763","modified":1702113327423},{"_id":"public/images/jvm/PPT/27.png","hash":"c23bfe0e5595b360718bf9ed5c44991b90ce7afc","modified":1702113327423},{"_id":"public/images/jvm/PPT/29.png","hash":"7770a28404668859f480b3cd221ba52cae6736ba","modified":1702113327423},{"_id":"public/images/jvm/PPT/32.png","hash":"d5788f98084440eafbf5fb74af6bedfe50fc69f8","modified":1702113327423},{"_id":"public/images/jvm/PPT/33.png","hash":"f169871fa54962d53f7f220afaa4c3d40c1fc518","modified":1702113327423},{"_id":"public/images/jvm/PPT/4.png","hash":"757aeb4becfdf5c39a74ebbb95a7f9e628842161","modified":1702113327423},{"_id":"public/images/jvm/PPT/48.png","hash":"68424b32f8352df88abe5b7e7be50c2cedcb2c51","modified":1702113327423},{"_id":"public/images/jvm/PPT/51.png","hash":"7d2ad29e58f2f6ad5d04bc49afa0dcca20f82dd8","modified":1702113327423},{"_id":"public/images/jvm/image-20200705161409533.png","hash":"d079319ebb743ae71f02605eed87da9ecbc197b1","modified":1702113327423},{"_id":"public/images/jvm/image-20200705161812542.png","hash":"76a9ca0847a75d53b069da0a3821ad9ac2f49f84","modified":1702113327423},{"_id":"public/images/jvm/image-20200706205756045.png","hash":"2e309294e64a8a0b9b70dadd51457b4939f0f037","modified":1702113327423},{"_id":"public/images/jvm/image-20200705090237078.png","hash":"20849cfdec9178a72ff147a3ee9ca3b116c9111b","modified":1702113327423},{"_id":"public/images/jvm/image-20200705161849557.png","hash":"7ab6fbf102e1a507b8555492de0cd63528b4f042","modified":1702113327423},{"_id":"public/images/cert/chrome-cert-1.png","hash":"ebd280af6a3585442b43fa5d4a07dd625dd1e9f0","modified":1702113327423},{"_id":"public/images/cert/chrome-cert-2.png","hash":"22b254f9ce791a53e2cea1f8126dc646fc0db83e","modified":1702113327423},{"_id":"public/images/cert/chrome-cert-3.png","hash":"116bd917549e1036f3552a12503c048b513fdc33","modified":1702113327423},{"_id":"public/images/jvm/image-20200705111640511.png","hash":"87f90a65b36a95cf2fd01cfd6756b7452ed22784","modified":1702113327423},{"_id":"public/images/jvm/PPT/11.png","hash":"8fc474537a3d4e1dbbab99b904d6ca5af651e3cb","modified":1702113327423},{"_id":"public/images/jvm/PPT/1.png","hash":"c10e0bd9b5acfee3b98fc08009da45fc85cab57b","modified":1702113327423},{"_id":"public/images/jvm/PPT/13.png","hash":"372423b66ad06a68a4f8339007705b6318be3c70","modified":1702113327423},{"_id":"public/images/jvm/PPT/22.png","hash":"8eb2190fdc0292587f38097ebf8d8f05923ea205","modified":1702113327423},{"_id":"public/images/jvm/PPT/23.png","hash":"5d781b5eba39b1f6d9845db3809796ec69a45448","modified":1702113327423},{"_id":"public/images/jvm/PPT/31.png","hash":"f06e71d818c54476fdcf6d84d6edd168f7392475","modified":1702113327423},{"_id":"public/images/jvm/PPT/30.png","hash":"691ccac7ebf6685cb3d4852475c219f2b14a7ed4","modified":1702113327423},{"_id":"public/images/jvm/PPT/49.png","hash":"319aecb7fce855d0d48db7e113ca3f3a8d868d21","modified":1702113327423},{"_id":"public/images/jvm/PPT/5.png","hash":"62c7750f1484c48b660241c3336856ce20fe9129","modified":1702113327423},{"_id":"public/images/jvm/PPT/54.png","hash":"fa5c8cc6d6502b750bff814eb4d5bcf03a705c7a","modified":1702113327423},{"_id":"public/images/jvm/PPT/58.png","hash":"f8ad254209307583b0f6101bd57c0afe6ea8a5c4","modified":1702113327423},{"_id":"public/images/jvm/PPT/61.png","hash":"f2c2e6baf44d1b936e532520994561bcd3c5e66b","modified":1702113327423},{"_id":"public/images/jvm/PPT/65.png","hash":"63d99b339b91c58e98c8983c71dd132f96b027eb","modified":1702113327423},{"_id":"public/images/jvm/PPT/73.png","hash":"899eb26bb57d6f505dbe16dae29fd75a1536f9ab","modified":1702113327423},{"_id":"public/images/jvm/PPT/9.png","hash":"115d8de913470669b5cce64802708141b71de725","modified":1702113327423},{"_id":"public/images/jvm/image-20200706201904057.png","hash":"10bf7dd7cb4713ba9d263299d761728a705bbb23","modified":1702113327423},{"_id":"public/images/jvm/image-20200707075847954.png","hash":"625a66b8d5c37f5b47bc41eb5076aec2d1242fc0","modified":1702113327423},{"_id":"public/images/jvm/image-20200706210000461.png","hash":"fe741001f868ddc6a184c56a209d17915bff17bb","modified":1702113327423},{"_id":"public/images/jvm/image-20200707080154039.png","hash":"4c73a20ac25a9a64b9c0b22990d841187b2b08c9","modified":1702113327423},{"_id":"public/images/jvm/image-20200707101511025.png","hash":"54a67dbc1ec4998c437deb8598636bcd302990e6","modified":1702113327423},{"_id":"public/images/jvm/image-20200707101543871.png","hash":"9a10e95c95abbbff6768cde919446bcda28ad141","modified":1702113327423},{"_id":"public/images/jvm/image-20200707103547712.png","hash":"b9c2fea17dd4c765e544b933c98baf981c52e409","modified":1702113327423},{"_id":"public/images/jvm/image-20200707203441718.png","hash":"1849c838359d821e31dd42b930951671827cd893","modified":1702113327423},{"_id":"public/images/jvm/image-20200707203038615.png","hash":"15fe98cae3c99be3883aa79da7126b5042b88293","modified":1702113327423},{"_id":"public/images/jvm/image-20200709164149920.png","hash":"bc15be9b3d67f359724f63f23f72454423ee5040","modified":1702113327423},{"_id":"public/images/jvm/image-20200705081813409.png","hash":"292b4f1d4ff7b99adacb0842932a6dc95f417cab","modified":1702113327423},{"_id":"public/images/jvm/image-20200705081913538.png","hash":"853d8d274c5a127b16415017fb6882af54c58c3a","modified":1702113327423},{"_id":"public/images/jvm/image-20200705082255746.png","hash":"be4e911d134a19140a905c42669386febbb9867e","modified":1702113327423},{"_id":"public/images/jvm/image-20200705090328171.png","hash":"4b16f40b094dce8c10873fd4b527962217699431","modified":1702113327423},{"_id":"public/images/jvm/image-20200705094149223.png","hash":"7ed293684c015dfd06dc88b2d74810a2d16c5baa","modified":1702113327423},{"_id":"public/images/jvm/image-20200707084208115.png","hash":"8aeb34d5145267919b584081bb264c4841095f9f","modified":1702113327423},{"_id":"public/images/jvm/image-20200707084714886.png","hash":"bac9c7a1d3a09a94fce66e53a83dbde20bd55907","modified":1702113327423},{"_id":"public/images/jvm/image-20200712102205795.png","hash":"5c6dfd5b4c2f078477ab53fd3a66713adcba498e","modified":1702113327423},{"_id":"public/images/jvm/image-20200712104149246.png","hash":"b64c7d06efaa6128d8636aa77eaf2d8cbc2d30b9","modified":1702113327423},{"_id":"public/images/jvm/image-20200712150935078.png","hash":"d2fad6a01b7972a9f9cb3079a119090fc284c713","modified":1702113327423},{"_id":"public/images/jvm/image-20200712151916991.png","hash":"c00abf5e3d24b85d8d36562680b89d1dc0e09ac1","modified":1702113327423},{"_id":"public/images/jvm/image-20200712152847218.png","hash":"c97936e43958f858c9ef3ab43b7152c5f291f509","modified":1702113327423},{"_id":"public/images/jvm/image-20200712153236508.png","hash":"06426c7f5be1d9778ea5a00e77b9961658b8ec9e","modified":1702113327423},{"_id":"public/images/jvm/PPT/53.png","hash":"1f4af02ce054368d47450bba272eb7a7d5b027bf","modified":1702113327423},{"_id":"public/images/git/git_merge_2.png","hash":"898d1a9ea9284e9ebb1a134d5a9e239102d5717e","modified":1702113327423},{"_id":"public/images/git/git_merge_3.png","hash":"fcc0ec9c6dc0a986db5952b21d5569f2fbe8aa42","modified":1702113327423},{"_id":"public/images/jvm/PPT/18.png","hash":"2ca7494dcb1ef9a1431c4a1b99d5d9b1a470f16f","modified":1702113327423},{"_id":"public/images/jvm/PPT/21.png","hash":"0d4728ccb90c5ea86f2f0e9d36d8168d9ec91b48","modified":1702113327423},{"_id":"public/images/jvm/PPT/15.png","hash":"fdeff193177913668a4d98f1bfcbb75ba67fdd7b","modified":1702113327423},{"_id":"public/images/jvm/PPT/35.png","hash":"4cda97749afa79b148d74111053c0cdae29a4c20","modified":1702113327423},{"_id":"public/images/jvm/PPT/36.png","hash":"15024505e9cb7ed3f02a4d967dcff3ea885c8225","modified":1702113327423},{"_id":"public/images/jvm/PPT/37.png","hash":"fe9c85df2f5c58fbf68b81dfab84adb27e04bc41","modified":1702113327423},{"_id":"public/images/jvm/PPT/42.png","hash":"674205cd6ee4c0f23e240979242692f5ec3fe42b","modified":1702113327423},{"_id":"public/images/jvm/PPT/43.png","hash":"e95663935be725bdca9e907852bde0744f860664","modified":1702113327423},{"_id":"public/images/jvm/PPT/45.png","hash":"fb3a65f354339e62f50104c9a1a45be3d0541202","modified":1702113327423},{"_id":"public/images/jvm/PPT/46.png","hash":"dc2c41a2e2e655f90ef09e54288ef28620efabeb","modified":1702113327423},{"_id":"public/images/jvm/PPT/50.png","hash":"ae70f279f6d22ff7bcf159c272c6f6cec893c555","modified":1702113327423},{"_id":"public/images/jvm/PPT/52.png","hash":"cea9d8b4840b9807454f89898c870f3a81c58ac4","modified":1702113327423},{"_id":"public/images/jvm/PPT/6.png","hash":"5896eb64652ba7984b6b1f3964e0d1baa92e2d07","modified":1702113327423},{"_id":"public/images/jvm/PPT/64.png","hash":"b137f993560f84e93c0bebcb09a216d0220fbbc1","modified":1702113327423},{"_id":"public/images/jvm/image-20200705155551919.png","hash":"def48f33b3d5bfa91caeadf8ff3e1c4bc0a3ec1b","modified":1702113327423},{"_id":"public/images/jvm/image-20200705155728557.png","hash":"5b0419debf47f35e78ba2b1252f556a61866450a","modified":1702113327423},{"_id":"public/images/jvm/image-20200705161007423.png","hash":"880ef9a3eb8a156af91d9c46bb8dbaf4d1ad5a89","modified":1702113327423},{"_id":"public/images/jvm/image-20200706205947535.png","hash":"44f83d4ed76aa0e9bca176eb45730b1cc406485f","modified":1702113327423},{"_id":"public/images/jvm/image-20200706203835403.png","hash":"df5fe65bec14aac174b049d8944601bf3b937b48","modified":1702113327423},{"_id":"public/images/jvm/image-20200706211652779.png","hash":"1a9a9a73735c39a87187c41880f073aac82e5a3f","modified":1702113327423},{"_id":"public/images/jvm/image-20200707085232646.png","hash":"beda02177470c7253444b11ef96d9eaa85fc17d7","modified":1702113327423},{"_id":"public/images/jvm/image-20200707104253530.png","hash":"02589807733dc68242cc20ab5b3ed9e30f56c09e","modified":1702113327423},{"_id":"public/images/jvm/image-20200705080719531.png","hash":"c60f44f584a5d02aae45dc0bdef7932a06e78002","modified":1702113327423},{"_id":"public/images/jvm/垃圾回收.gif","hash":"5372d8ea294608d8e6766f38b71e0931ee88c955","modified":1702113327423},{"_id":"public/images/jvm/image-20200705082601441.png","hash":"e5bff9fd77e96e926209dec82d6cefdb8a7d28ca","modified":1702113327423},{"_id":"public/images/jvm/image-20200705084038680.png","hash":"0dfd39d72d75521c7b19d1a2ea44aa55873ff375","modified":1702113327423},{"_id":"public/images/jvm/image-20200705103516138.png","hash":"05934b5536d201bf14cf593948a1db02a0d35b79","modified":1702113327423},{"_id":"public/images/jvm/image-20200706195127740.png","hash":"a2d3269196bded453181a325c091e15693a35117","modified":1702113327423},{"_id":"public/images/jvm/image-20200712104312406.png","hash":"96dbbbb45fa460bdb0a248112cccdb2b7f4d031d","modified":1702113327423},{"_id":"public/images/jvm/image-20200712112026317.png","hash":"0ca453af3d72eb06782e3c52e7c6b0026020e4e3","modified":1702113327423},{"_id":"public/images/jvm/image-20200712152029615.png","hash":"d5cfc2557f285932bb279aa4dcf53de234613c62","modified":1702113327423},{"_id":"public/images/git/git_merge_1.png","hash":"c17848674480352beef85c6b0c553ce24f9ae01f","modified":1702113327423},{"_id":"public/images/jvm/PPT/2.png","hash":"b9849b500a8e178bea2ab32a368dfc043e5a298a","modified":1702113327423},{"_id":"public/images/jvm/PPT/26.png","hash":"ebd15f4f7d89b036723c513252a4d5707b699b5e","modified":1702113327423},{"_id":"public/images/jvm/PPT/3.png","hash":"3810a07751fe443912436c72c72cf7e7c7db83e6","modified":1702113327423},{"_id":"public/images/jvm/PPT/38.png","hash":"d4b94032ba66595a534341ec776ddc35b984ade3","modified":1702113327423},{"_id":"public/images/jvm/PPT/55.png","hash":"4c557c031ea8d4aae00c575e4ba8232b07e25032","modified":1702113327423},{"_id":"public/images/jvm/PPT/62.png","hash":"6537e823e33cf223d8ea44d8c149591525d1efa9","modified":1702113327423},{"_id":"public/images/jvm/PPT/67.png","hash":"9200a98fbfdafa4072cc8a123d6acf0e804c6433","modified":1702113327423},{"_id":"public/images/jvm/PPT/69.png","hash":"34a7aa6db5f77c7aa7245a93ba304c3631cf574a","modified":1702113327423},{"_id":"public/images/jvm/PPT/7.png","hash":"b59e8c300587692a32b1c2a398df0a43a720a16f","modified":1702113327423},{"_id":"public/images/jvm/PPT/70.png","hash":"a55fd6580b891b2e6ce20bbdb4390f3019789c4e","modified":1702113327423},{"_id":"public/images/jvm/PPT/72.png","hash":"b222f0110433e0656f67db884fc0c80d57e92781","modified":1702113327423},{"_id":"public/images/jvm/image-20200706203419496.png","hash":"1cbdcf6d93b48f6489a926f70baabd6fad68ec4a","modified":1702113327423},{"_id":"public/images/jvm/image-20200707091058346.png","hash":"4bf1501b2db2559fe1e4764e43d6c5b817f3cdb1","modified":1702113327423},{"_id":"public/images/jvm/image-20200707085737207.png","hash":"abc1966132672107802205db4de93c72400428e1","modified":1702113327423},{"_id":"public/images/jvm/image-20200707095606813.png","hash":"2e74274cf71ddc390cc01f3ff049525636170bd3","modified":1702113327423},{"_id":"public/images/jvm/image-20200705080911284.png","hash":"7a38e064b14f803a69eb1a3b59d26bc5170903a9","modified":1702113327423},{"_id":"public/images/jvm/image-20200705103636003.png","hash":"934951c09fb9c4eebc16d8a2258592920bb0ea26","modified":1702113327423},{"_id":"public/images/jvm/image-20200705105151258.png","hash":"68e1cb4066f7a2f62f4f1b3ef036e68e1a0f2d1e","modified":1702113327423},{"_id":"public/images/jvm/image-20200712103230349.png","hash":"c799224b67d3c32465e1bc94cddc5bcff97187c7","modified":1702113327423},{"_id":"public/images/jvm/PPT/10.png","hash":"da9184b126beb69471daabfe5efdeb015a207bc1","modified":1702113327423},{"_id":"public/images/jvm/PPT/34.png","hash":"45cb9da15fd4b525cc1c87c8b358a72eec5a1a95","modified":1702113327423},{"_id":"public/images/jvm/PPT/60.png","hash":"dedc713f3e70cf6b273da66d53e3a0e8d8d7d9b0","modified":1702113327423},{"_id":"public/images/jvm/PPT/63.png","hash":"12e6628367aa9c66c83ee0bfd301e6c79d947823","modified":1702113327423},{"_id":"public/images/jvm/PPT/66.png","hash":"321bac1159d07efec67f45f6786ba952f7cb866b","modified":1702113327423},{"_id":"public/images/jvm/PPT/71.png","hash":"783b2cc506d7ba7fb8d9515528a018234bebaf4f","modified":1702113327423},{"_id":"public/images/jvm/PPT/77.png","hash":"130e0b8329c7c93c730407f3cfe2d3c9dd84f0e5","modified":1702113327423},{"_id":"public/images/jvm/image-20200709164350466.png","hash":"84460cd629aa0c3572e417a6b2de36e49928d982","modified":1702113327423},{"_id":"public/images/jvm/image-20200709095356247.png","hash":"57ab40c8497e417ed6b791dc8f370528d7b09cf0","modified":1702113327423},{"_id":"public/images/jvm/image-20200712104622677.png","hash":"c40d0afc89643076e9767a1a79b0cfa8322bfd27","modified":1702113327423},{"_id":"public/images/jvm/image-20200712112512720.png","hash":"43d7b5e4381d086b9b13ef13faa74e91ffa9e051","modified":1702113327423},{"_id":"public/images/jvm/image-20200712165318590.png","hash":"99d14c7cd01918a42d76bbc5dd59b5ac54395a7e","modified":1702113327423},{"_id":"public/images/jvm/image-20200705112036630.png","hash":"4484f62c9f5ebeca29ac5b274e70396ef4d1e37f","modified":1702113327423},{"_id":"public/images/jvm/PPT/57.png","hash":"e86dfab053d75d0f3e4435cc7ba058f01a096802","modified":1702113327423},{"_id":"public/images/jvm/PPT/59.png","hash":"448004dd03e1dea652004684c46aef829d6bce75","modified":1702113327423},{"_id":"public/images/jvm/PPT/75.png","hash":"296afb9add115eeca66aee322c2939e9bfafac10","modified":1702113327423},{"_id":"public/images/jvm/image-20200709164342002.png","hash":"79223c2343ffb2160ecc151ea310453610ce0e11","modified":1702113327423},{"_id":"public/images/jvm/image-20200709151033237.png","hash":"c74e5354dfa4e702dbb0a4714c7b30f8888a8c33","modified":1702113327423},{"_id":"public/images/jvm/image-20200712150303710.png","hash":"9b134f5fb6d9a8f9c286c82808e1414c4f9c06cc","modified":1702113327423},{"_id":"public/images/jvm/image-20200707205634266.png","hash":"0b382d2e4b3f7c0e719ba974e9316f42d236e5da","modified":1702113327423},{"_id":"public/images/jvm/image-20200705105810107.png","hash":"c51c0c76538db07558cf3cba481cb2e1780bc0f9","modified":1702113327423},{"_id":"public/images/jvm/PPT/76.png","hash":"ae2db6c6aad0ee4e2298f46074fc288e63ed941d","modified":1702113327423},{"_id":"public/images/jvm/image-20200706205821919.png","hash":"a8f23a54f6255d2ff1e05e0fd7aaf685b742725a","modified":1702113327423},{"_id":"public/images/jvm/image-20200709152801713.png","hash":"0732d2c8eca5c76739d231cca781f0fb3819de06","modified":1702113327423},{"_id":"public/images/jvm/image-20200712110411885.png","hash":"7f2279a693fec6effccae76087760bfd3f345d12","modified":1702113327423},{"_id":"public/images/jvm/image-20200705112416101.png","hash":"2bbc650222dce101dc39fa3ed5cbbb3b15ef6aa5","modified":1702113327423},{"_id":"public/images/jvm/image-20200706200739392.png","hash":"89bc67ffc3e8b10dce4c7eddb0d95ccf16df4dab","modified":1702113327423},{"_id":"public/images/jvm/image-20200712150229048.png","hash":"3ac8a5de0bc3cae170ebacb7c81c85d6f535ae99","modified":1702113327423},{"_id":"public/images/jvm/image-20200712113256075.png","hash":"ddbe5247616abee0dc1b6de50ee247330cf994ae","modified":1702113327423},{"_id":"source/_posts/books.md","hash":"6706f38e250c015ae15d4386da58b3fa742cc312","modified":1702113425568},{"_id":"source/_posts/books/index.md","hash":"02135d5fd880a897eec15504eff285022c7284a2","modified":1702113448672},{"_id":"public/2023/12/09/books/index/index.html","hash":"cd0181313f2ff82e2422104437c293b5f2af7a39","modified":1702113480739},{"_id":"public/2023/12/09/books/index.html","hash":"cb4bc32601321b8ea5d4f0e2034cf1f8b07abcca","modified":1702113480739},{"_id":"source/_posts/books/2020最新Java面试题及答案/2020最新Java面试题及答案.pdf","hash":"465d837c2cd8ea1cda389fcbf40c5a8d4dd74aaf","modified":1701607024678},{"_id":"source/_posts/books/Java面试宝典/Java面试宝典.pdf","hash":"81d63b1786f1ee666810952e5676d5c262921122","modified":1701607024819},{"_id":"source/books/index.md","hash":"43b9e33da8868642fecb52d17478c04aeb6ec717","modified":1702114977906},{"_id":"source/books/java面试指南.md","hash":"0acabcb85e0b474fd44f4fa63e44215ba7331edf","modified":1702114458550},{"_id":"source/_posts/books/java面试宝典.md","hash":"275ab55c2356726f89c78b03b74cbaa1a4a22d08","modified":1702117748478},{"_id":"source/books/Java面试宝典/document.pdf","hash":"81d63b1786f1ee666810952e5676d5c262921122","modified":1701607024819},{"_id":"source/_posts/books/Java面试宝典/document.pdf","hash":"81d63b1786f1ee666810952e5676d5c262921122","modified":1701607024819},{"_id":"public/books/index.html","hash":"af84fc92607ef443489d53b238c0df2891dfaf73","modified":1702115588222},{"_id":"public/books/java面试指南.html","hash":"a65b20519cdf0d6240879367315ffddf48eadf12","modified":1702115588222},{"_id":"public/categories/书单/index.html","hash":"9f6a6138a3a9cbbb2311a0c9e320dfd15967f832","modified":1702121804863},{"_id":"public/2023/12/09/books/java面试宝典/index.html","hash":"cbece6a08d9103e434ea5399fb960e99cbcbb34a","modified":1702122369919},{"_id":"public/books/Java面试宝典/document.pdf","hash":"81d63b1786f1ee666810952e5676d5c262921122","modified":1702115588222},{"_id":"source/_posts/books/2020最新Java面试题及答案.md","hash":"f81efd33cf12c1e73a138bdc18d4624d5867ce88","modified":1702117737934},{"_id":"source/books/2020最新Java面试题及答案.pdf","hash":"465d837c2cd8ea1cda389fcbf40c5a8d4dd74aaf","modified":1701607024678},{"_id":"source/books/Java面试宝典.pdf","hash":"81d63b1786f1ee666810952e5676d5c262921122","modified":1701607024819},{"_id":"public/tags/书单/index.html","hash":"e1cddc2fab39a90b7b9932c25b556bc98d89df31","modified":1702121804863},{"_id":"public/2023/12/09/books/2020最新Java面试题及答案/index.html","hash":"1e768feb5b2986bc58a6ca2ba8ca1428949aece3","modified":1702122369919},{"_id":"public/books/2020最新Java面试题及答案.pdf","hash":"465d837c2cd8ea1cda389fcbf40c5a8d4dd74aaf","modified":1702117758388},{"_id":"public/books/Java面试宝典.pdf","hash":"81d63b1786f1ee666810952e5676d5c262921122","modified":1702117758388},{"_id":"source/_posts/spring/Bean的生命周期.md","hash":"24d9efbc7bcc9f7aafe1bf1367618ecda6eedb40","modified":1702120935040},{"_id":"source/images/spring/image-20200614155732584.png","hash":"c5364d93fab471318148941dfd41370ffa5070cb","modified":1701607023897},{"_id":"source/img/bg1.jpg","hash":"9ab442c9e5c89575af100ba3fdd5a446054f5292","modified":1702121469535},{"_id":"public/tags/spring/index.html","hash":"2d0e323900d489581770673c79badeac91b7ac36","modified":1702121804863},{"_id":"public/tags/java/index.html","hash":"43bf9ad40761db1f9b51ddb9ebaeba904e714f48","modified":1702121804863},{"_id":"public/2023/12/09/spring/Bean的生命周期/index.html","hash":"273ec5b8f1b7cb459c681d73251527579ac6c687","modified":1702122369919},{"_id":"public/img/bg1.jpg","hash":"9ab442c9e5c89575af100ba3fdd5a446054f5292","modified":1702121804863},{"_id":"public/images/spring/image-20200614155732584.png","hash":"c5364d93fab471318148941dfd41370ffa5070cb","modified":1702121804863}],"Category":[{"name":"java","_id":"clpphmypu0001ekwf8gqb444a"},{"name":"git","_id":"clpxmue4p0001wwwf46h025ht"},{"name":"shell","_id":"clpxnpqfh0009wwwf9k4j9tm3"},{"name":"k8s","_id":"clpxqp401000qwwwfec137fvz"},{"name":"docker","_id":"clpxs69ge00009cwfatau4of0"},{"name":"书单","_id":"clpxvi6070003q0wf5o28cwrj"},{"name":"spring","_id":"clpxyqsv10001lcwfebefg15u"},{"name":"java","parent":"clpxyqsv10001lcwfebefg15u","_id":"clpxyqsv20004lcwfaiyc1l66"}],"Data":[],"Page":[{"title":"关于我","date":"2023-12-03T08:54:11.000Z","_content":"\n一名热爱技术与生活的后端开发者。在过去的两年里，我致力于在Java的领域中探索与学习，追求技术的卓越与精进。\n\n在技术方面，具备扎实的基础和丰富的实践经验。擅长后端开发，对搜索引擎、nginx反向代理、docker容器技术和kubernetes云原生应用管理等领域有所涉猎。我热衷于研究新技术，关注行业动态，并乐于分享我在这些领域中的见解和经验。\n\n生活上， 喜欢动漫、游戏和美食，这些是我日常生活中的重要组成部分。它们带给我无尽的快乐和享受，也激发了我对生活的热爱和对美好的追求。","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2023-12-03 16:54:11\n---\n\n一名热爱技术与生活的后端开发者。在过去的两年里，我致力于在Java的领域中探索与学习，追求技术的卓越与精进。\n\n在技术方面，具备扎实的基础和丰富的实践经验。擅长后端开发，对搜索引擎、nginx反向代理、docker容器技术和kubernetes云原生应用管理等领域有所涉猎。我热衷于研究新技术，关注行业动态，并乐于分享我在这些领域中的见解和经验。\n\n生活上， 喜欢动漫、游戏和美食，这些是我日常生活中的重要组成部分。它们带给我无尽的快乐和享受，也激发了我对生活的热爱和对美好的追求。","updated":"2023-12-09T10:54:58.989Z","path":"about/index.html","_id":"clpp924k90000jcwf6qg649cd","comments":1,"layout":"page","content":"<p>一名热爱技术与生活的后端开发者。在过去的两年里，我致力于在Java的领域中探索与学习，追求技术的卓越与精进。</p>\n<p>在技术方面，具备扎实的基础和丰富的实践经验。擅长后端开发，对搜索引擎、nginx反向代理、docker容器技术和kubernetes云原生应用管理等领域有所涉猎。我热衷于研究新技术，关注行业动态，并乐于分享我在这些领域中的见解和经验。</p>\n<p>生活上， 喜欢动漫、游戏和美食，这些是我日常生活中的重要组成部分。它们带给我无尽的快乐和享受，也激发了我对生活的热爱和对美好的追求。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一名热爱技术与生活的后端开发者。在过去的两年里，我致力于在Java的领域中探索与学习，追求技术的卓越与精进。</p>\n<p>在技术方面，具备扎实的基础和丰富的实践经验。擅长后端开发，对搜索引擎、nginx反向代理、docker容器技术和kubernetes云原生应用管理等领域有所涉猎。我热衷于研究新技术，关注行业动态，并乐于分享我在这些领域中的见解和经验。</p>\n<p>生活上， 喜欢动漫、游戏和美食，这些是我日常生活中的重要组成部分。它们带给我无尽的快乐和享受，也激发了我对生活的热爱和对美好的追求。</p>\n"}],"Post":[{"title":"JVM_运行时数据区概述及线程","date":"2023-12-03T13:03:36.000Z","_content":"\n\n# 运行时数据区概述及线程\n\n## 前言\n\n本节主要讲的是运行时数据区，也就是下图这部分，它是在类加载完成后的阶段\n\n![image-20200705111640511](images/jvm/image-20200705111640511.png)\n\n当我们通过前面的：类的加载-> 验证 -> 准备 -> 解析 -> 初始化 这几个阶段完成后，就会用到执行引擎对我们的类进行使用，同时执行引擎将会使用到我们运行时数据区\n\n![image-20200705111843003](images/jvm/image-20200705111843003.png)\n\n也就是大厨做饭，我们把大厨后面的东西（切好的菜，刀，调料），比作是运行时数据区。而厨师可以类比于执行引擎，将通过准备的东西进行制作成精美的菜品\n\n![image-20200705112036630](images/jvm/image-20200705112036630.png)\n\n内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。\n\n> 我们通过磁盘或者网络IO得到的数据，都需要先加载到内存中，然后CPU从内存中获取数据进行读取，也就是说内存充当了CPU和磁盘之间的桥梁\n\n运行时数据区的完整图\n\n![image-20200705112416101](images/jvm/image-20200705112416101.png)\n\nJava虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。\n\n灰色的为单独线程私有的，红色的为多个线程共享的。即：\n\n- 每个线程：独立包括程序计数器、栈、本地栈。\n- 线程间共享：堆、堆外内存（永久代或元空间、代码缓存）\n\n![image-20200705112601211](images/jvm/image-20200705112601211.png)\n\n## 线程\n\n线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行。\n在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射。\n\n- 当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。\n\n操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程中的run（）方法。\n\n### JVM系统线程\n\n如果你使用console或者是任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用public static void main（String[]）的main线程以及所有这个main线程自己创建的线程。|\n这些主要的后台系统线程在Hotspot JVM里主要是以下几个：\n\n- 虚拟机线程：这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行类型包括\"stop-the-world\"的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销。\n- 周期任务线程：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行。\n- GC线程：这种线程对在JVM里不同种类的垃圾收集行为提供了支持。\n- 编译线程：这种线程在运行时会将字节码编译成到本地代码。\n- 信号调度线程：这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。\n\n### ","source":"_posts/jvm/JVM-运行时数据区概述及线程.md","raw":"---\ntitle: JVM_运行时数据区概述及线程\ndate: 2023-12-03 21:03:36\ntags: jvm\ncategories: java\n---\n\n\n# 运行时数据区概述及线程\n\n## 前言\n\n本节主要讲的是运行时数据区，也就是下图这部分，它是在类加载完成后的阶段\n\n![image-20200705111640511](images/jvm/image-20200705111640511.png)\n\n当我们通过前面的：类的加载-> 验证 -> 准备 -> 解析 -> 初始化 这几个阶段完成后，就会用到执行引擎对我们的类进行使用，同时执行引擎将会使用到我们运行时数据区\n\n![image-20200705111843003](images/jvm/image-20200705111843003.png)\n\n也就是大厨做饭，我们把大厨后面的东西（切好的菜，刀，调料），比作是运行时数据区。而厨师可以类比于执行引擎，将通过准备的东西进行制作成精美的菜品\n\n![image-20200705112036630](images/jvm/image-20200705112036630.png)\n\n内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。\n\n> 我们通过磁盘或者网络IO得到的数据，都需要先加载到内存中，然后CPU从内存中获取数据进行读取，也就是说内存充当了CPU和磁盘之间的桥梁\n\n运行时数据区的完整图\n\n![image-20200705112416101](images/jvm/image-20200705112416101.png)\n\nJava虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。\n\n灰色的为单独线程私有的，红色的为多个线程共享的。即：\n\n- 每个线程：独立包括程序计数器、栈、本地栈。\n- 线程间共享：堆、堆外内存（永久代或元空间、代码缓存）\n\n![image-20200705112601211](images/jvm/image-20200705112601211.png)\n\n## 线程\n\n线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行。\n在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射。\n\n- 当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。\n\n操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程中的run（）方法。\n\n### JVM系统线程\n\n如果你使用console或者是任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用public static void main（String[]）的main线程以及所有这个main线程自己创建的线程。|\n这些主要的后台系统线程在Hotspot JVM里主要是以下几个：\n\n- 虚拟机线程：这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行类型包括\"stop-the-world\"的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销。\n- 周期任务线程：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行。\n- GC线程：这种线程对在JVM里不同种类的垃圾收集行为提供了支持。\n- 编译线程：这种线程在运行时会将字节码编译成到本地代码。\n- 信号调度线程：这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。\n\n### ","slug":"jvm/JVM-运行时数据区概述及线程","published":1,"updated":"2023-12-09T05:53:29.799Z","_id":"clpxlg52b0000awwfguhc4gly","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"运行时数据区概述及线程\"><a href=\"#运行时数据区概述及线程\" class=\"headerlink\" title=\"运行时数据区概述及线程\"></a>运行时数据区概述及线程</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本节主要讲的是运行时数据区，也就是下图这部分，它是在类加载完成后的阶段</p>\n<p><img src=\"/images/jvm/image-20200705111640511.png\" alt=\"image-20200705111640511\"></p>\n<p>当我们通过前面的：类的加载-&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化 这几个阶段完成后，就会用到执行引擎对我们的类进行使用，同时执行引擎将会使用到我们运行时数据区</p>\n<p><img src=\"/images/jvm/image-20200705111843003.png\" alt=\"image-20200705111843003\"></p>\n<p>也就是大厨做饭，我们把大厨后面的东西（切好的菜，刀，调料），比作是运行时数据区。而厨师可以类比于执行引擎，将通过准备的东西进行制作成精美的菜品</p>\n<p><img src=\"/images/jvm/image-20200705112036630.png\" alt=\"image-20200705112036630\"></p>\n<p>内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。</p>\n<blockquote>\n<p>我们通过磁盘或者网络IO得到的数据，都需要先加载到内存中，然后CPU从内存中获取数据进行读取，也就是说内存充当了CPU和磁盘之间的桥梁</p>\n</blockquote>\n<p>运行时数据区的完整图</p>\n<p><img src=\"/images/jvm/image-20200705112416101.png\" alt=\"image-20200705112416101\"></p>\n<p>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。</p>\n<p>灰色的为单独线程私有的，红色的为多个线程共享的。即：</p>\n<ul>\n<li>每个线程：独立包括程序计数器、栈、本地栈。</li>\n<li>线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200705112601211.png\" alt=\"image-20200705112601211\"></p>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p>线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行。<br>在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射。</p>\n<ul>\n<li>当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。</li>\n</ul>\n<p>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程中的run（）方法。</p>\n<h3 id=\"JVM系统线程\"><a href=\"#JVM系统线程\" class=\"headerlink\" title=\"JVM系统线程\"></a>JVM系统线程</h3><p>如果你使用console或者是任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用public static void main（String[]）的main线程以及所有这个main线程自己创建的线程。|<br>这些主要的后台系统线程在Hotspot JVM里主要是以下几个：</p>\n<ul>\n<li>虚拟机线程：这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行类型包括”stop-the-world”的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销。</li>\n<li>周期任务线程：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行。</li>\n<li>GC线程：这种线程对在JVM里不同种类的垃圾收集行为提供了支持。</li>\n<li>编译线程：这种线程在运行时会将字节码编译成到本地代码。</li>\n<li>信号调度线程：这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"运行时数据区概述及线程\"><a href=\"#运行时数据区概述及线程\" class=\"headerlink\" title=\"运行时数据区概述及线程\"></a>运行时数据区概述及线程</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本节主要讲的是运行时数据区，也就是下图这部分，它是在类加载完成后的阶段</p>\n<p><img src=\"/images/jvm/image-20200705111640511.png\" alt=\"image-20200705111640511\"></p>\n<p>当我们通过前面的：类的加载-&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化 这几个阶段完成后，就会用到执行引擎对我们的类进行使用，同时执行引擎将会使用到我们运行时数据区</p>\n<p><img src=\"/images/jvm/image-20200705111843003.png\" alt=\"image-20200705111843003\"></p>\n<p>也就是大厨做饭，我们把大厨后面的东西（切好的菜，刀，调料），比作是运行时数据区。而厨师可以类比于执行引擎，将通过准备的东西进行制作成精美的菜品</p>\n<p><img src=\"/images/jvm/image-20200705112036630.png\" alt=\"image-20200705112036630\"></p>\n<p>内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。</p>\n<blockquote>\n<p>我们通过磁盘或者网络IO得到的数据，都需要先加载到内存中，然后CPU从内存中获取数据进行读取，也就是说内存充当了CPU和磁盘之间的桥梁</p>\n</blockquote>\n<p>运行时数据区的完整图</p>\n<p><img src=\"/images/jvm/image-20200705112416101.png\" alt=\"image-20200705112416101\"></p>\n<p>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。</p>\n<p>灰色的为单独线程私有的，红色的为多个线程共享的。即：</p>\n<ul>\n<li>每个线程：独立包括程序计数器、栈、本地栈。</li>\n<li>线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200705112601211.png\" alt=\"image-20200705112601211\"></p>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p>线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行。<br>在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射。</p>\n<ul>\n<li>当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。</li>\n</ul>\n<p>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程中的run（）方法。</p>\n<h3 id=\"JVM系统线程\"><a href=\"#JVM系统线程\" class=\"headerlink\" title=\"JVM系统线程\"></a>JVM系统线程</h3><p>如果你使用console或者是任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用public static void main（String[]）的main线程以及所有这个main线程自己创建的线程。|<br>这些主要的后台系统线程在Hotspot JVM里主要是以下几个：</p>\n<ul>\n<li>虚拟机线程：这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行类型包括”stop-the-world”的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销。</li>\n<li>周期任务线程：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行。</li>\n<li>GC线程：这种线程对在JVM里不同种类的垃圾收集行为提供了支持。</li>\n<li>编译线程：这种线程在运行时会将字节码编译成到本地代码。</li>\n<li>信号调度线程：这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>"},{"title":"程序计数器","date":"2023-12-03T13:09:43.000Z","_content":"\n# 程序计数器\n\n## 介绍\n\nJVM中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。这里，并非是广义上所指的物理寄存器，或许将其翻译为PC计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。\n\n![image-20200705155551919](images/jvm/image-20200705155551919.png)\n\n它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。\n\n在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。\n\n任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值（undefned）。\n\n它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。\n\n它是唯一一个在Java虚拟机规范中没有规定任何outotMemoryError情况的区域。\n\n## 作用\n\nPC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。\n\n![image-20200705155728557](images/jvm/image-20200705155728557.png)\n\n## 代码演示\n\n我们首先写一个简单的代码\n\n```java\n/**程序计数器\n * @author: 陌溪\n * @create: 2020-07-05-16:01\n */\npublic class PCRegisterTest {\n    public static void main(String[] args) {\n        int i = 10;\n        int j = 20;\n        int k = i + j;\n    }\n}\n```\n\n然后将代码进行编译成字节码文件，我们再次查看 ，发现在字节码的左边有一个行号标识，它其实就是指令地址，用于指向当前执行到哪里。\n\n```bash\n0: bipush        10\n2: istore_1\n3: bipush        20\n5: istore_2\n6: iload_1\n7: iload_2\n8: iadd\n9: istore_3\n10: return\n```\n\n通过PC寄存器，我们就可以知道当前程序执行到哪一步了 ![image-20200705161007423](images/jvm/image-20200705161007423.png)\n\n\n\n## 使用PC寄存器存储字节码指令地址有什么用呢？\n\n因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。\n\nJVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。\n\n![image-20200705161409533](images/jvm/image-20200705161409533.png)\n\n## PC寄存器为什么被设定为私有的？\n\n我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。\n\n由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。\n\n这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。\n\n![image-20200705161812542](images/jvm/image-20200705161812542.png)\n\n## CPU时间片\n\nCPU时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片。\n\n在宏观上：俄们可以同时打开多个应用程序，每个程序并行不悖，同时运行。\n\n但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。\n\n![image-20200705161849557](images/jvm/image-20200705161849557.png)","source":"_posts/jvm/程序计数器.md","raw":"---\ntitle: 程序计数器\ndate: 2023-12-03 21:09:43\ntags: jvm\ncategories: java\n---\n\n# 程序计数器\n\n## 介绍\n\nJVM中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。这里，并非是广义上所指的物理寄存器，或许将其翻译为PC计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。\n\n![image-20200705155551919](images/jvm/image-20200705155551919.png)\n\n它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。\n\n在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。\n\n任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值（undefned）。\n\n它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。\n\n它是唯一一个在Java虚拟机规范中没有规定任何outotMemoryError情况的区域。\n\n## 作用\n\nPC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。\n\n![image-20200705155728557](images/jvm/image-20200705155728557.png)\n\n## 代码演示\n\n我们首先写一个简单的代码\n\n```java\n/**程序计数器\n * @author: 陌溪\n * @create: 2020-07-05-16:01\n */\npublic class PCRegisterTest {\n    public static void main(String[] args) {\n        int i = 10;\n        int j = 20;\n        int k = i + j;\n    }\n}\n```\n\n然后将代码进行编译成字节码文件，我们再次查看 ，发现在字节码的左边有一个行号标识，它其实就是指令地址，用于指向当前执行到哪里。\n\n```bash\n0: bipush        10\n2: istore_1\n3: bipush        20\n5: istore_2\n6: iload_1\n7: iload_2\n8: iadd\n9: istore_3\n10: return\n```\n\n通过PC寄存器，我们就可以知道当前程序执行到哪一步了 ![image-20200705161007423](images/jvm/image-20200705161007423.png)\n\n\n\n## 使用PC寄存器存储字节码指令地址有什么用呢？\n\n因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。\n\nJVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。\n\n![image-20200705161409533](images/jvm/image-20200705161409533.png)\n\n## PC寄存器为什么被设定为私有的？\n\n我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。\n\n由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。\n\n这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。\n\n![image-20200705161812542](images/jvm/image-20200705161812542.png)\n\n## CPU时间片\n\nCPU时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片。\n\n在宏观上：俄们可以同时打开多个应用程序，每个程序并行不悖，同时运行。\n\n但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。\n\n![image-20200705161849557](images/jvm/image-20200705161849557.png)","slug":"jvm/程序计数器","published":1,"updated":"2023-12-09T05:53:51.758Z","_id":"clpxlg52f0001awwfca1nfcaa","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>JVM中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。这里，并非是广义上所指的物理寄存器，或许将其翻译为PC计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。</p>\n<p><img src=\"/images/jvm/image-20200705155551919.png\" alt=\"image-20200705155551919\"></p>\n<p>它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。</p>\n<p>在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</p>\n<p>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值（undefned）。</p>\n<p>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p>\n<p>它是唯一一个在Java虚拟机规范中没有规定任何outotMemoryError情况的区域。</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。</p>\n<p><img src=\"/images/jvm/image-20200705155728557.png\" alt=\"image-20200705155728557\"></p>\n<h2 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h2><p>我们首先写一个简单的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**程序计数器</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-16:01</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PCRegisterTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20</span>;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> i + j;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后将代码进行编译成字节码文件，我们再次查看 ，发现在字节码的左边有一个行号标识，它其实就是指令地址，用于指向当前执行到哪里。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">0: bipush        10<br>2: istore_1<br>3: bipush        20<br>5: istore_2<br>6: iload_1<br>7: iload_2<br>8: iadd<br>9: istore_3<br>10: <span class=\"hljs-built_in\">return</span><br></code></pre></td></tr></table></figure>\n\n<p>通过PC寄存器，我们就可以知道当前程序执行到哪一步了 <img src=\"/images/jvm/image-20200705161007423.png\" alt=\"image-20200705161007423\"></p>\n<h2 id=\"使用PC寄存器存储字节码指令地址有什么用呢？\"><a href=\"#使用PC寄存器存储字节码指令地址有什么用呢？\" class=\"headerlink\" title=\"使用PC寄存器存储字节码指令地址有什么用呢？\"></a>使用PC寄存器存储字节码指令地址有什么用呢？</h2><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。</p>\n<p>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p>\n<p><img src=\"/images/jvm/image-20200705161409533.png\" alt=\"image-20200705161409533\"></p>\n<h2 id=\"PC寄存器为什么被设定为私有的？\"><a href=\"#PC寄存器为什么被设定为私有的？\" class=\"headerlink\" title=\"PC寄存器为什么被设定为私有的？\"></a>PC寄存器为什么被设定为私有的？</h2><p>我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p>\n<p>由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p>\n<p>这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p>\n<p><img src=\"/images/jvm/image-20200705161812542.png\" alt=\"image-20200705161812542\"></p>\n<h2 id=\"CPU时间片\"><a href=\"#CPU时间片\" class=\"headerlink\" title=\"CPU时间片\"></a>CPU时间片</h2><p>CPU时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片。</p>\n<p>在宏观上：俄们可以同时打开多个应用程序，每个程序并行不悖，同时运行。</p>\n<p>但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</p>\n<p><img src=\"/images/jvm/image-20200705161849557.png\" alt=\"image-20200705161849557\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>JVM中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。这里，并非是广义上所指的物理寄存器，或许将其翻译为PC计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。</p>\n<p><img src=\"/images/jvm/image-20200705155551919.png\" alt=\"image-20200705155551919\"></p>\n<p>它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。</p>\n<p>在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</p>\n<p>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值（undefned）。</p>\n<p>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p>\n<p>它是唯一一个在Java虚拟机规范中没有规定任何outotMemoryError情况的区域。</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。</p>\n<p><img src=\"/images/jvm/image-20200705155728557.png\" alt=\"image-20200705155728557\"></p>\n<h2 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h2><p>我们首先写一个简单的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**程序计数器</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-16:01</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PCRegisterTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20</span>;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> i + j;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后将代码进行编译成字节码文件，我们再次查看 ，发现在字节码的左边有一个行号标识，它其实就是指令地址，用于指向当前执行到哪里。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">0: bipush        10<br>2: istore_1<br>3: bipush        20<br>5: istore_2<br>6: iload_1<br>7: iload_2<br>8: iadd<br>9: istore_3<br>10: <span class=\"hljs-built_in\">return</span><br></code></pre></td></tr></table></figure>\n\n<p>通过PC寄存器，我们就可以知道当前程序执行到哪一步了 <img src=\"/images/jvm/image-20200705161007423.png\" alt=\"image-20200705161007423\"></p>\n<h2 id=\"使用PC寄存器存储字节码指令地址有什么用呢？\"><a href=\"#使用PC寄存器存储字节码指令地址有什么用呢？\" class=\"headerlink\" title=\"使用PC寄存器存储字节码指令地址有什么用呢？\"></a>使用PC寄存器存储字节码指令地址有什么用呢？</h2><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。</p>\n<p>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p>\n<p><img src=\"/images/jvm/image-20200705161409533.png\" alt=\"image-20200705161409533\"></p>\n<h2 id=\"PC寄存器为什么被设定为私有的？\"><a href=\"#PC寄存器为什么被设定为私有的？\" class=\"headerlink\" title=\"PC寄存器为什么被设定为私有的？\"></a>PC寄存器为什么被设定为私有的？</h2><p>我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p>\n<p>由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p>\n<p>这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p>\n<p><img src=\"/images/jvm/image-20200705161812542.png\" alt=\"image-20200705161812542\"></p>\n<h2 id=\"CPU时间片\"><a href=\"#CPU时间片\" class=\"headerlink\" title=\"CPU时间片\"></a>CPU时间片</h2><p>CPU时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片。</p>\n<p>在宏观上：俄们可以同时打开多个应用程序，每个程序并行不悖，同时运行。</p>\n<p>但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</p>\n<p><img src=\"/images/jvm/image-20200705161849557.png\" alt=\"image-20200705161849557\"></p>\n"},{"title":"对象实例化: 内存布局与访问定位","date":"2023-12-03T14:09:21.000Z","_content":"\n# 对象实例化内存布局与访问定位\n\n## 对象实例化\n\n### 面试题\n\n- 对象在JVM中是怎么存储的？\n- 对象头信息里面有哪些东西？\n- Java对象头有什么？\n\n从对象创建的方式 和 步骤开始说\n\n![image-20200709095356247](images/jvm/image-20200709095356247.png)\n\n### 对象创建方式\n\n- new：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法\n- Class的newInstance方法：在JDK9里面被标记为过时的方法，因为只能调用空参构造器\n- Constructor的newInstance(XXX)：反射的方式，可以调用空参的，或者带参的构造器\n- 使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口中的clone接口\n- 使用序列化：序列化一般用于Socket的网络传输\n- 第三方库 Objenesis\n\n### 创建对象的步骤\n\n#### 判断对象对应的类是否加载、链接、初始化\n\n虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化。（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以ClassLoader + 包名 + 类名为key进行查找对应的 .class文件，如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class对象。\n\n#### 为对象分配内存\n\n首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小\n\n- 如果内存规整：指针碰撞\n\n- 如果内存不规整\n  - 虚拟表需要维护一个列表\n  - 空闲列表分配\n\n如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Point）来为对象分配内存。\n\n意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial ，ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带Compact（整理）过程的收集器时，使用指针碰撞。\n\n如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。意思是虚拟机维护了一个列表，记录上那些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为了 “空闲列表（Free List）”\n\n选择哪种分配方式由Java堆是否规整所决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。\n\n#### 处理并发问题\n\n- 采用CAS配上失败重试保证更新的原子性\n- 每个线程预先分配TLAB - 通过设置 -XX:+UseTLAB参数来设置（区域加锁机制）\n  - 在Eden区给每个线程分配一块区域\n\n### 初始化分配到的内存\n\n给对象属性赋值的操作\n\n- 属性的默认初始化\n- 显示初始化\n- 代码块中的初始化\n- 构造器初始化\n\n- 所有属性设置默认值，保证对象实例字段在不赋值可以直接使用\n\n\n### 设置对象的对象头\n\n将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。\n\n### 执行init方法进行初始化\n\n在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量\n\n因此一般来说（由字节码中跟随invokespecial指令所决定），new指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完成创建出来。\n\n### 对象实例化的过程\n\n- 加载类元信息\n- 为对象分配内存\n- 处理并发问题\n- 属性的默认初始化（零值初始化）\n- 设置对象头信息\n- 属性的显示初始化、代码块中初始化、构造器中初始化\n\n## 对象内存布局\n\n![image-20200709151033237](images/jvm/image-20200709151033237.png)\n\n### 对象头\n\n对象头包含了两部分，分别是 运行时元数据（Mark Word）和 类型指针\n\n> 如果是数组，还需要记录数组的长度\n\n#### 运行时元数据\n\n- 哈希值（HashCode）\n- GC分代年龄\n- 锁状态标志\n- 线程持有的锁\n- 偏向线程ID\n- 翩向时间戳\n\n#### 类型指针\n\n指向类元数据InstanceKlass，确定该对象所属的类型。指向的其实是方法区中存放的类元信息\n\n### 实例数据（Instance Data）\n\n#### 说明\n\n不是必须的，也没有特别的含义，仅仅起到占位符的作用\n\n### 小结\n\n![image-20200709152801713](images/jvm/image-20200709152801713.png)\n\n## 对象的访问定位\n\n### 图示\n\nJVM是如何通过栈帧中的对象引用访问到其内部的对象实例呢？\n\n![image-20200709164149920](images/jvm/image-20200709164149920.png)\n\n### 对象访问的两种方式\n\n#### 句柄访问\n\n![image-20200709164342002](images/jvm/image-20200709164342002.png)\n\n句柄访问就是说栈的局部变量表中，记录的对象的引用，然后在堆空间中开辟了一块空间，也就是句柄池\n\n#### 优点\n\nreference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改\n\n#### 直接指针（HotSpot采用）\n\n![image-20200709164350466](images/jvm/image-20200709164350466.png)\n\n直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据","source":"_posts/jvm/对象实例化-内存布局与访问定位.md","raw":"---\ntitle: '对象实例化: 内存布局与访问定位'\ndate: 2023-12-03 22:09:21\ntags: jvm\ncategories: java\n---\n\n# 对象实例化内存布局与访问定位\n\n## 对象实例化\n\n### 面试题\n\n- 对象在JVM中是怎么存储的？\n- 对象头信息里面有哪些东西？\n- Java对象头有什么？\n\n从对象创建的方式 和 步骤开始说\n\n![image-20200709095356247](images/jvm/image-20200709095356247.png)\n\n### 对象创建方式\n\n- new：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法\n- Class的newInstance方法：在JDK9里面被标记为过时的方法，因为只能调用空参构造器\n- Constructor的newInstance(XXX)：反射的方式，可以调用空参的，或者带参的构造器\n- 使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口中的clone接口\n- 使用序列化：序列化一般用于Socket的网络传输\n- 第三方库 Objenesis\n\n### 创建对象的步骤\n\n#### 判断对象对应的类是否加载、链接、初始化\n\n虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化。（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以ClassLoader + 包名 + 类名为key进行查找对应的 .class文件，如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class对象。\n\n#### 为对象分配内存\n\n首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小\n\n- 如果内存规整：指针碰撞\n\n- 如果内存不规整\n  - 虚拟表需要维护一个列表\n  - 空闲列表分配\n\n如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Point）来为对象分配内存。\n\n意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial ，ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带Compact（整理）过程的收集器时，使用指针碰撞。\n\n如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。意思是虚拟机维护了一个列表，记录上那些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为了 “空闲列表（Free List）”\n\n选择哪种分配方式由Java堆是否规整所决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。\n\n#### 处理并发问题\n\n- 采用CAS配上失败重试保证更新的原子性\n- 每个线程预先分配TLAB - 通过设置 -XX:+UseTLAB参数来设置（区域加锁机制）\n  - 在Eden区给每个线程分配一块区域\n\n### 初始化分配到的内存\n\n给对象属性赋值的操作\n\n- 属性的默认初始化\n- 显示初始化\n- 代码块中的初始化\n- 构造器初始化\n\n- 所有属性设置默认值，保证对象实例字段在不赋值可以直接使用\n\n\n### 设置对象的对象头\n\n将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。\n\n### 执行init方法进行初始化\n\n在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量\n\n因此一般来说（由字节码中跟随invokespecial指令所决定），new指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完成创建出来。\n\n### 对象实例化的过程\n\n- 加载类元信息\n- 为对象分配内存\n- 处理并发问题\n- 属性的默认初始化（零值初始化）\n- 设置对象头信息\n- 属性的显示初始化、代码块中初始化、构造器中初始化\n\n## 对象内存布局\n\n![image-20200709151033237](images/jvm/image-20200709151033237.png)\n\n### 对象头\n\n对象头包含了两部分，分别是 运行时元数据（Mark Word）和 类型指针\n\n> 如果是数组，还需要记录数组的长度\n\n#### 运行时元数据\n\n- 哈希值（HashCode）\n- GC分代年龄\n- 锁状态标志\n- 线程持有的锁\n- 偏向线程ID\n- 翩向时间戳\n\n#### 类型指针\n\n指向类元数据InstanceKlass，确定该对象所属的类型。指向的其实是方法区中存放的类元信息\n\n### 实例数据（Instance Data）\n\n#### 说明\n\n不是必须的，也没有特别的含义，仅仅起到占位符的作用\n\n### 小结\n\n![image-20200709152801713](images/jvm/image-20200709152801713.png)\n\n## 对象的访问定位\n\n### 图示\n\nJVM是如何通过栈帧中的对象引用访问到其内部的对象实例呢？\n\n![image-20200709164149920](images/jvm/image-20200709164149920.png)\n\n### 对象访问的两种方式\n\n#### 句柄访问\n\n![image-20200709164342002](images/jvm/image-20200709164342002.png)\n\n句柄访问就是说栈的局部变量表中，记录的对象的引用，然后在堆空间中开辟了一块空间，也就是句柄池\n\n#### 优点\n\nreference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改\n\n#### 直接指针（HotSpot采用）\n\n![image-20200709164350466](images/jvm/image-20200709164350466.png)\n\n直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据","slug":"jvm/对象实例化-内存布局与访问定位","published":1,"updated":"2023-12-09T05:54:24.868Z","_id":"clpxlg52g0003awwf5ycx0t2a","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"对象实例化内存布局与访问定位\"><a href=\"#对象实例化内存布局与访问定位\" class=\"headerlink\" title=\"对象实例化内存布局与访问定位\"></a>对象实例化内存布局与访问定位</h1><h2 id=\"对象实例化\"><a href=\"#对象实例化\" class=\"headerlink\" title=\"对象实例化\"></a>对象实例化</h2><h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><ul>\n<li>对象在JVM中是怎么存储的？</li>\n<li>对象头信息里面有哪些东西？</li>\n<li>Java对象头有什么？</li>\n</ul>\n<p>从对象创建的方式 和 步骤开始说</p>\n<p><img src=\"/images/jvm/image-20200709095356247.png\" alt=\"image-20200709095356247\"></p>\n<h3 id=\"对象创建方式\"><a href=\"#对象创建方式\" class=\"headerlink\" title=\"对象创建方式\"></a>对象创建方式</h3><ul>\n<li>new：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法</li>\n<li>Class的newInstance方法：在JDK9里面被标记为过时的方法，因为只能调用空参构造器</li>\n<li>Constructor的newInstance(XXX)：反射的方式，可以调用空参的，或者带参的构造器</li>\n<li>使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口中的clone接口</li>\n<li>使用序列化：序列化一般用于Socket的网络传输</li>\n<li>第三方库 Objenesis</li>\n</ul>\n<h3 id=\"创建对象的步骤\"><a href=\"#创建对象的步骤\" class=\"headerlink\" title=\"创建对象的步骤\"></a>创建对象的步骤</h3><h4 id=\"判断对象对应的类是否加载、链接、初始化\"><a href=\"#判断对象对应的类是否加载、链接、初始化\" class=\"headerlink\" title=\"判断对象对应的类是否加载、链接、初始化\"></a>判断对象对应的类是否加载、链接、初始化</h4><p>虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化。（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以ClassLoader + 包名 + 类名为key进行查找对应的 .class文件，如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class对象。</p>\n<h4 id=\"为对象分配内存\"><a href=\"#为对象分配内存\" class=\"headerlink\" title=\"为对象分配内存\"></a>为对象分配内存</h4><p>首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小</p>\n<ul>\n<li><p>如果内存规整：指针碰撞</p>\n</li>\n<li><p>如果内存不规整</p>\n<ul>\n<li>虚拟表需要维护一个列表</li>\n<li>空闲列表分配</li>\n</ul>\n</li>\n</ul>\n<p>如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Point）来为对象分配内存。</p>\n<p>意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial ，ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带Compact（整理）过程的收集器时，使用指针碰撞。</p>\n<p>如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。意思是虚拟机维护了一个列表，记录上那些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为了 “空闲列表（Free List）”</p>\n<p>选择哪种分配方式由Java堆是否规整所决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p>\n<h4 id=\"处理并发问题\"><a href=\"#处理并发问题\" class=\"headerlink\" title=\"处理并发问题\"></a>处理并发问题</h4><ul>\n<li>采用CAS配上失败重试保证更新的原子性</li>\n<li>每个线程预先分配TLAB - 通过设置 -XX:+UseTLAB参数来设置（区域加锁机制）<ul>\n<li>在Eden区给每个线程分配一块区域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初始化分配到的内存\"><a href=\"#初始化分配到的内存\" class=\"headerlink\" title=\"初始化分配到的内存\"></a>初始化分配到的内存</h3><p>给对象属性赋值的操作</p>\n<ul>\n<li><p>属性的默认初始化</p>\n</li>\n<li><p>显示初始化</p>\n</li>\n<li><p>代码块中的初始化</p>\n</li>\n<li><p>构造器初始化</p>\n</li>\n<li><p>所有属性设置默认值，保证对象实例字段在不赋值可以直接使用</p>\n</li>\n</ul>\n<h3 id=\"设置对象的对象头\"><a href=\"#设置对象的对象头\" class=\"headerlink\" title=\"设置对象的对象头\"></a>设置对象的对象头</h3><p>将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。</p>\n<h3 id=\"执行init方法进行初始化\"><a href=\"#执行init方法进行初始化\" class=\"headerlink\" title=\"执行init方法进行初始化\"></a>执行init方法进行初始化</h3><p>在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量</p>\n<p>因此一般来说（由字节码中跟随invokespecial指令所决定），new指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完成创建出来。</p>\n<h3 id=\"对象实例化的过程\"><a href=\"#对象实例化的过程\" class=\"headerlink\" title=\"对象实例化的过程\"></a>对象实例化的过程</h3><ul>\n<li>加载类元信息</li>\n<li>为对象分配内存</li>\n<li>处理并发问题</li>\n<li>属性的默认初始化（零值初始化）</li>\n<li>设置对象头信息</li>\n<li>属性的显示初始化、代码块中初始化、构造器中初始化</li>\n</ul>\n<h2 id=\"对象内存布局\"><a href=\"#对象内存布局\" class=\"headerlink\" title=\"对象内存布局\"></a>对象内存布局</h2><p><img src=\"/images/jvm/image-20200709151033237.png\" alt=\"image-20200709151033237\"></p>\n<h3 id=\"对象头\"><a href=\"#对象头\" class=\"headerlink\" title=\"对象头\"></a>对象头</h3><p>对象头包含了两部分，分别是 运行时元数据（Mark Word）和 类型指针</p>\n<blockquote>\n<p>如果是数组，还需要记录数组的长度</p>\n</blockquote>\n<h4 id=\"运行时元数据\"><a href=\"#运行时元数据\" class=\"headerlink\" title=\"运行时元数据\"></a>运行时元数据</h4><ul>\n<li>哈希值（HashCode）</li>\n<li>GC分代年龄</li>\n<li>锁状态标志</li>\n<li>线程持有的锁</li>\n<li>偏向线程ID</li>\n<li>翩向时间戳</li>\n</ul>\n<h4 id=\"类型指针\"><a href=\"#类型指针\" class=\"headerlink\" title=\"类型指针\"></a>类型指针</h4><p>指向类元数据InstanceKlass，确定该对象所属的类型。指向的其实是方法区中存放的类元信息</p>\n<h3 id=\"实例数据（Instance-Data）\"><a href=\"#实例数据（Instance-Data）\" class=\"headerlink\" title=\"实例数据（Instance Data）\"></a>实例数据（Instance Data）</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>不是必须的，也没有特别的含义，仅仅起到占位符的作用</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><img src=\"/images/jvm/image-20200709152801713.png\" alt=\"image-20200709152801713\"></p>\n<h2 id=\"对象的访问定位\"><a href=\"#对象的访问定位\" class=\"headerlink\" title=\"对象的访问定位\"></a>对象的访问定位</h2><h3 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h3><p>JVM是如何通过栈帧中的对象引用访问到其内部的对象实例呢？</p>\n<p><img src=\"/images/jvm/image-20200709164149920.png\" alt=\"image-20200709164149920\"></p>\n<h3 id=\"对象访问的两种方式\"><a href=\"#对象访问的两种方式\" class=\"headerlink\" title=\"对象访问的两种方式\"></a>对象访问的两种方式</h3><h4 id=\"句柄访问\"><a href=\"#句柄访问\" class=\"headerlink\" title=\"句柄访问\"></a>句柄访问</h4><p><img src=\"/images/jvm/image-20200709164342002.png\" alt=\"image-20200709164342002\"></p>\n<p>句柄访问就是说栈的局部变量表中，记录的对象的引用，然后在堆空间中开辟了一块空间，也就是句柄池</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>reference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改</p>\n<h4 id=\"直接指针（HotSpot采用）\"><a href=\"#直接指针（HotSpot采用）\" class=\"headerlink\" title=\"直接指针（HotSpot采用）\"></a>直接指针（HotSpot采用）</h4><p><img src=\"/images/jvm/image-20200709164350466.png\" alt=\"image-20200709164350466\"></p>\n<p>直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"对象实例化内存布局与访问定位\"><a href=\"#对象实例化内存布局与访问定位\" class=\"headerlink\" title=\"对象实例化内存布局与访问定位\"></a>对象实例化内存布局与访问定位</h1><h2 id=\"对象实例化\"><a href=\"#对象实例化\" class=\"headerlink\" title=\"对象实例化\"></a>对象实例化</h2><h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><ul>\n<li>对象在JVM中是怎么存储的？</li>\n<li>对象头信息里面有哪些东西？</li>\n<li>Java对象头有什么？</li>\n</ul>\n<p>从对象创建的方式 和 步骤开始说</p>\n<p><img src=\"/images/jvm/image-20200709095356247.png\" alt=\"image-20200709095356247\"></p>\n<h3 id=\"对象创建方式\"><a href=\"#对象创建方式\" class=\"headerlink\" title=\"对象创建方式\"></a>对象创建方式</h3><ul>\n<li>new：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法</li>\n<li>Class的newInstance方法：在JDK9里面被标记为过时的方法，因为只能调用空参构造器</li>\n<li>Constructor的newInstance(XXX)：反射的方式，可以调用空参的，或者带参的构造器</li>\n<li>使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口中的clone接口</li>\n<li>使用序列化：序列化一般用于Socket的网络传输</li>\n<li>第三方库 Objenesis</li>\n</ul>\n<h3 id=\"创建对象的步骤\"><a href=\"#创建对象的步骤\" class=\"headerlink\" title=\"创建对象的步骤\"></a>创建对象的步骤</h3><h4 id=\"判断对象对应的类是否加载、链接、初始化\"><a href=\"#判断对象对应的类是否加载、链接、初始化\" class=\"headerlink\" title=\"判断对象对应的类是否加载、链接、初始化\"></a>判断对象对应的类是否加载、链接、初始化</h4><p>虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化。（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以ClassLoader + 包名 + 类名为key进行查找对应的 .class文件，如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class对象。</p>\n<h4 id=\"为对象分配内存\"><a href=\"#为对象分配内存\" class=\"headerlink\" title=\"为对象分配内存\"></a>为对象分配内存</h4><p>首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小</p>\n<ul>\n<li><p>如果内存规整：指针碰撞</p>\n</li>\n<li><p>如果内存不规整</p>\n<ul>\n<li>虚拟表需要维护一个列表</li>\n<li>空闲列表分配</li>\n</ul>\n</li>\n</ul>\n<p>如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Point）来为对象分配内存。</p>\n<p>意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial ，ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带Compact（整理）过程的收集器时，使用指针碰撞。</p>\n<p>如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。意思是虚拟机维护了一个列表，记录上那些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为了 “空闲列表（Free List）”</p>\n<p>选择哪种分配方式由Java堆是否规整所决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p>\n<h4 id=\"处理并发问题\"><a href=\"#处理并发问题\" class=\"headerlink\" title=\"处理并发问题\"></a>处理并发问题</h4><ul>\n<li>采用CAS配上失败重试保证更新的原子性</li>\n<li>每个线程预先分配TLAB - 通过设置 -XX:+UseTLAB参数来设置（区域加锁机制）<ul>\n<li>在Eden区给每个线程分配一块区域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初始化分配到的内存\"><a href=\"#初始化分配到的内存\" class=\"headerlink\" title=\"初始化分配到的内存\"></a>初始化分配到的内存</h3><p>给对象属性赋值的操作</p>\n<ul>\n<li><p>属性的默认初始化</p>\n</li>\n<li><p>显示初始化</p>\n</li>\n<li><p>代码块中的初始化</p>\n</li>\n<li><p>构造器初始化</p>\n</li>\n<li><p>所有属性设置默认值，保证对象实例字段在不赋值可以直接使用</p>\n</li>\n</ul>\n<h3 id=\"设置对象的对象头\"><a href=\"#设置对象的对象头\" class=\"headerlink\" title=\"设置对象的对象头\"></a>设置对象的对象头</h3><p>将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。</p>\n<h3 id=\"执行init方法进行初始化\"><a href=\"#执行init方法进行初始化\" class=\"headerlink\" title=\"执行init方法进行初始化\"></a>执行init方法进行初始化</h3><p>在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量</p>\n<p>因此一般来说（由字节码中跟随invokespecial指令所决定），new指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完成创建出来。</p>\n<h3 id=\"对象实例化的过程\"><a href=\"#对象实例化的过程\" class=\"headerlink\" title=\"对象实例化的过程\"></a>对象实例化的过程</h3><ul>\n<li>加载类元信息</li>\n<li>为对象分配内存</li>\n<li>处理并发问题</li>\n<li>属性的默认初始化（零值初始化）</li>\n<li>设置对象头信息</li>\n<li>属性的显示初始化、代码块中初始化、构造器中初始化</li>\n</ul>\n<h2 id=\"对象内存布局\"><a href=\"#对象内存布局\" class=\"headerlink\" title=\"对象内存布局\"></a>对象内存布局</h2><p><img src=\"/images/jvm/image-20200709151033237.png\" alt=\"image-20200709151033237\"></p>\n<h3 id=\"对象头\"><a href=\"#对象头\" class=\"headerlink\" title=\"对象头\"></a>对象头</h3><p>对象头包含了两部分，分别是 运行时元数据（Mark Word）和 类型指针</p>\n<blockquote>\n<p>如果是数组，还需要记录数组的长度</p>\n</blockquote>\n<h4 id=\"运行时元数据\"><a href=\"#运行时元数据\" class=\"headerlink\" title=\"运行时元数据\"></a>运行时元数据</h4><ul>\n<li>哈希值（HashCode）</li>\n<li>GC分代年龄</li>\n<li>锁状态标志</li>\n<li>线程持有的锁</li>\n<li>偏向线程ID</li>\n<li>翩向时间戳</li>\n</ul>\n<h4 id=\"类型指针\"><a href=\"#类型指针\" class=\"headerlink\" title=\"类型指针\"></a>类型指针</h4><p>指向类元数据InstanceKlass，确定该对象所属的类型。指向的其实是方法区中存放的类元信息</p>\n<h3 id=\"实例数据（Instance-Data）\"><a href=\"#实例数据（Instance-Data）\" class=\"headerlink\" title=\"实例数据（Instance Data）\"></a>实例数据（Instance Data）</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>不是必须的，也没有特别的含义，仅仅起到占位符的作用</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><img src=\"/images/jvm/image-20200709152801713.png\" alt=\"image-20200709152801713\"></p>\n<h2 id=\"对象的访问定位\"><a href=\"#对象的访问定位\" class=\"headerlink\" title=\"对象的访问定位\"></a>对象的访问定位</h2><h3 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h3><p>JVM是如何通过栈帧中的对象引用访问到其内部的对象实例呢？</p>\n<p><img src=\"/images/jvm/image-20200709164149920.png\" alt=\"image-20200709164149920\"></p>\n<h3 id=\"对象访问的两种方式\"><a href=\"#对象访问的两种方式\" class=\"headerlink\" title=\"对象访问的两种方式\"></a>对象访问的两种方式</h3><h4 id=\"句柄访问\"><a href=\"#句柄访问\" class=\"headerlink\" title=\"句柄访问\"></a>句柄访问</h4><p><img src=\"/images/jvm/image-20200709164342002.png\" alt=\"image-20200709164342002\"></p>\n<p>句柄访问就是说栈的局部变量表中，记录的对象的引用，然后在堆空间中开辟了一块空间，也就是句柄池</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>reference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改</p>\n<h4 id=\"直接指针（HotSpot采用）\"><a href=\"#直接指针（HotSpot采用）\" class=\"headerlink\" title=\"直接指针（HotSpot采用）\"></a>直接指针（HotSpot采用）</h4><p><img src=\"/images/jvm/image-20200709164350466.png\" alt=\"image-20200709164350466\"></p>\n<p>直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据</p>\n"},{"title":"类加载子系统","date":"2023-12-03T12:53:58.000Z","_content":"\n\n# 类加载子系统\n\n## 概述\n\n![image-20200705080719531](images/jvm/image-20200705080719531.png)\n\n完整图如下\n\n![image-20200705080911284](images/jvm/image-20200705080911284.png)\n\n如果自己想手写一个Java虚拟机的话，主要考虑哪些结构呢？\n\n- 类加载器\n- 执行引擎\n\n## 类加载器子系统作用\n\n类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。\n\nClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。\n\n加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）\n\n![image-20200705081813409](images/jvm/image-20200705081813409.png)\n\n- class file存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。\n- class file加载到JVM中，被称为DNA元数据模板，放在方法区。\n- 在.class文件->JVM->最终成为元数据模板，此过程就要一个运输工具（类装载器Class Loader），扮演一个快递员的角色。\n\n![image-20200705081913538](images/jvm/image-20200705081913538.png)\n\n## 类的加载过程\n\n例如下面的一段简单的代码\n\n```java\n/**\n * 类加载子系统\n * @author: 陌溪\n * @create: 2020-07-05-8:24\n */\npublic class HelloLoader {\n    public static void main(String[] args) {\n        System.out.println(\"我已经被加载啦\");\n    }\n}\n```\n\n它的加载过程是怎么样的呢?\n\n![image-20200705082255746](images/jvm/image-20200705082255746.png)\n\n完整的流程图如下所示\n\n![image-20200705082601441](images/jvm/image-20200705082601441.png)\n\n### 加载阶段\n\n通过一个类的全限定名获取定义此类的二进制字节流\n\n将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n\n在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口\n\n### 加载class文件的方式\n\n- 从本地系统中直接加载\n- 通过网络获取，典型场景：Web Applet\n- 从zip压缩包中读取，成为日后jar、war格式的基础\n- 运行时计算生成，使用最多的是：动态代理技术\n- 由其他文件生成，典型场景：JSP应用从专有数据库中提取.class文件，比较少见\n- 从加密文件中获取，典型的防Class文件被反编译的保护措施\n\n### 链接阶段\n\n#### 验证 Verify\n\n目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。\n\n主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。\n\n> 工具：Binary Viewer查看\n\n![image-20200705084038680](images/jvm/image-20200705084038680.png)\n\n如果出现不合法的字节码文件，那么将会验证不通过\n\n同时我们可以通过安装IDEA的插件，来查看我们的Class文件\n\n![image-20200705090237078](images/jvm/image-20200705090237078.png)\n\n安装完成后，我们编译完一个class文件后，点击view即可显示我们安装的插件来查看字节码方法了\n\n![image-20200705090328171](images/jvm/image-20200705090328171.png)\n\n### 准备 Prepare\n\n为类变量分配内存并且设置该类变量的默认初始值，即零值。\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-8:42\n */\npublic class HelloApp {\n    private static int a = 1;  // 准备阶段为0，在下个阶段，也就是初始化的时候才是1\n    public static void main(String[] args) {\n        System.out.println(a);\n    }\n}\n```\n\n上面的变量a在准备阶段会赋初始值，但不是1，而是0。\n\n这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化；\n\n这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。\n\n例如下面这段代码\n\n### 解析 Resolve\n\n将常量池内的符号引用转换为直接引用的过程。\n\n事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。\n\n符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\n\n解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT Class info、CONSTANT Fieldref info、CONSTANT Methodref info等\n\n### 初始化阶段\n\n初始化阶段就是执行类构造器法<clinit>（）的过程。\n\n此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。\n\n- 也就是说，当我们代码中包含static变量的时候，就会有clinit方法\n\n构造器方法中指令按语句在源文件中出现的顺序执行。\n\n<clinit>（）不同于类的构造器。（关联：构造器是虚拟机视角下的<init>（））若该类具有父类，JVM会保证子类的<clinit>（）执行前，父类的<clinit>（）已经执行完毕。\n\n- 任何一个类在声明后，都有生成一个构造器，默认是空参构造器\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-8:47\n */\npublic class ClassInitTest {\n    private static int num = 1;\n    static {\n        num = 2;\n        number = 20;\n        System.out.println(num);\n        System.out.println(number);  //报错，非法的前向引用\n    }\n\n    private static int number = 10;\n\n    public static void main(String[] args) {\n        System.out.println(ClassInitTest.num); // 2\n        System.out.println(ClassInitTest.number); // 10\n    }\n}\n```\n\n关于涉及到父类时候的变量赋值过程\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-9:06\n */\npublic class ClinitTest1 {\n    static class Father {\n        public static int A = 1;\n        static {\n            A = 2;\n        }\n    }\n\n    static class Son extends Father {\n        public static int b = A;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(Son.b);\n    }\n}\n```\n\n我们输出结果为 2，也就是说首先加载ClinitTest1的时候，会找到main方法，然后执行Son的初始化，但是Son继承了Father，因此还需要执行Father的初始化，同时将A赋值为2。我们通过反编译得到Father的加载过程，首先我们看到原来的值被赋值成1，然后又被复制成2，最后返回\n\n```bash\niconst_1\nputstatic #2 <com/atguigu/java/chapter02/ClinitTest1$Father.A>\niconst_2\nputstatic #2 <com/atguigu/java/chapter02/ClinitTest1$Father.A>\nreturn\n```\n\n虚拟机必须保证一个类的<clinit>（）方法在多线程下被同步加锁。\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-9:14\n */\npublic class DeadThreadTest {\n    public static void main(String[] args) {\n        new Thread(() -> {\n            System.out.println(Thread.currentThread().getName() + \"\\t 线程t1开始\");\n            new DeadThread();\n        }, \"t1\").start();\n\n        new Thread(() -> {\n            System.out.println(Thread.currentThread().getName() + \"\\t 线程t2开始\");\n            new DeadThread();\n        }, \"t2\").start();\n    }\n}\nclass DeadThread {\n    static {\n        if (true) {\n            System.out.println(Thread.currentThread().getName() + \"\\t 初始化当前类\");\n            while(true) {\n\n            }\n        }\n    }\n}\n```\n\n上面的代码，输出结果为\n\n```\n线程t1开始\n线程t2开始\n线程t2 初始化当前类\n```\n\n从上面可以看出初始化后，只能够执行一次初始化，这也就是同步加锁的过程\n\n## 类加载器的分类\n\nJVM支持两种类型的类加载器 。分别为引导类加载器（Bootstrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）。\n\n从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。\n\n无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示：\n\n![image-20200705094149223](images/jvm/image-20200705094149223.png)\n\n这里的四者之间是包含关系，不是上层和下层，也不是子系统的继承关系。\n\n我们通过一个类，获取它不同的加载器\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-9:47\n */\npublic class ClassLoaderTest {\n    public static void main(String[] args) {\n        // 获取系统类加载器\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        System.out.println(systemClassLoader);\n\n        // 获取其上层的：扩展类加载器\n        ClassLoader extClassLoader = systemClassLoader.getParent();\n        System.out.println(extClassLoader);\n\n        // 试图获取 根加载器\n        ClassLoader bootstrapClassLoader = extClassLoader.getParent();\n        System.out.println(bootstrapClassLoader);\n\n        // 获取自定义加载器\n        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();\n        System.out.println(classLoader);\n        \n        // 获取String类型的加载器\n        ClassLoader classLoader1 = String.class.getClassLoader();\n        System.out.println(classLoader1);\n    }\n}\n```\n\n得到的结果，从结果可以看出 根加载器无法直接通过代码获取，同时目前用户代码所使用的加载器为系统类加载器。同时我们通过获取String类型的加载器，发现是null，那么说明String类型是通过根加载器进行加载的，也就是说Java的核心类库都是使用根加载器进行加载的。\n\n```\nsun.misc.Launcher$AppClassLoader@18b4aac2\nsun.misc.Launcher$ExtClassLoader@1540e19d\nnull\nsun.misc.Launcher$AppClassLoader@18b4aac2\nnull \n```\n\n### 虚拟机自带的加载器\n\n#### 启动类加载器（引导类加载器，Bootstrap ClassLoader）\n\n- 这个类加载使用C/C++语言实现的，嵌套在JVM内部。\n- 它用来加载Java的核心库（JAVAHOME/jre/1ib/rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类\n- 并不继承自ava.lang.ClassLoader，没有父加载器。\n- 加载扩展类和应用程序类加载器，并指定为他们的父类加载器。\n- 出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类\n\n### 扩展类加载器（Extension ClassLoader）\n\n- Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。\n- 派生于ClassLoader类\n- 父类加载器为启动类加载器\n- 从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/1ib/ext子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。\n\n### 应用程序类加载器（系统类加载器，AppClassLoader）\n\n- javI语言编写，由sun.misc.LaunchersAppClassLoader实现\n- 派生于ClassLoader类\n- 父类加载器为扩展类加载器\n- 它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库\n- 该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载\n- 通过classLoader#getSystemclassLoader（）方法可以获取到该类加载器\n\n### 用户自定义类加载器\n\n在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。\n为什么要自定义类加载器？\n\n- 隔离加载类\n- 修改类加载的方式\n- 扩展加载源\n- 防止源码泄漏\n\n用户自定义类加载器实现步骤：\n\n- 开发人员可以通过继承抽象类ava.1ang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求\n- 在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写1oadClass（）方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖1oadclass（）方法，而是建议把自定义的类加载逻辑写在findclass（）方法中\n- 在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URIClassLoader类，这样就可以避免自己去编写findclass（）方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。\n\n### 查看根加载器所能加载的目录\n\n刚刚我们通过概念了解到了，根加载器只能够加载 java /lib目录下的class，我们通过下面代码验证一下\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-10:17\n */\npublic class ClassLoaderTest1 {\n    public static void main(String[] args) {\n        System.out.println(\"*********启动类加载器************\");\n        // 获取BootstrapClassLoader 能够加载的API的路径\n        URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();\n        for (URL url : urls) {\n            System.out.println(url.toExternalForm());\n        }\n\n        // 从上面路径中，随意选择一个类，来看看他的类加载器是什么：得到的是null，说明是  根加载器\n        ClassLoader classLoader = Provider.class.getClassLoader();\n    }\n}\n```\n\n得到的结果\n\n```\n*********启动类加载器************\nfile:/E:/Software/JDK1.8/Java/jre/lib/resources.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/rt.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/sunrsasign.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/jsse.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/jce.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/charsets.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/jfr.jar\nfile:/E:/Software/JDK1.8/Java/jre/classes\nnull\n```\n\n### 关于ClassLoader\n\nClassLoader类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）\n\n![image-20200705103516138](images/jvm/image-20200705103516138.png)\n\nsun.misc.Launcher 它是一个java虚拟机的入口应用\n\n![image-20200705103636003](images/jvm/image-20200705103636003.png)\n\n获取ClassLoader的途径\n\n- 获取当前ClassLoader：clazz.getClassLoader()\n- 获取当前线程上下文的ClassLoader：Thread.currentThread().getContextClassLoader()\n- 获取系统的ClassLoader：ClassLoader.getSystemClassLoader()\n- 获取调用者的ClassLoader：DriverManager.getCallerClassLoader()\n\n## 双亲委派机制\n\nJava虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。\n\n### 工作原理\n\n- 如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；\n- 如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；\n- 如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。\n\n![image-20200705105151258](images/jvm/image-20200705105151258.png)\n\n### 双亲委派机制举例\n\n当我们加载jdbc.jar 用于实现数据库连接的时候，首先我们需要知道的是 jdbc.jar是基于SPI接口进行实现的，所以在加载的时候，会进行双亲委派，最终从根加载器中加载 SPI核心类，然后在加载SPI接口类，接着在进行反向委派，通过线程上下文类加载器进行实现类 jdbc.jar的加载。\n\n![image-20200705105810107](images/jvm/image-20200705105810107.png)\n\n### 沙箱安全机制\n\n自定义string类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java\\lang\\String.class），报错信息说没有main方法，就是因为加载的是rt.jar包中的string类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。\n\n### 双亲委派机制的优势\n\n通过上面的例子，我们可以知道，双亲机制可以\n\n- 避免类的重复加载\n- 保护程序安全，防止核心API被随意篡改\n  - 自定义类：java.lang.String\n  - 自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）\n\n## 其它\n\n###  如何判断两个class对象是否相同\n\n在JVM中表示两个class对象是否为同一个类存在两个必要条件：\n- 类的完整类名必须一致，包括包名。\n- 加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。\n\n换句话说，在JvM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。\n\nJVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。\n\n### 类的主动使用和被动使用\n\nJava程序对类的使用方式分为：王动使用和被动使用。\n主动使用，又分为七种情况：\n\n- 创建类的实例\n- 访问某个类或接口的静态变量，或者对该静态变量赋值\n- 调用类的静态方法I\n- 反射（比如：Class.forName（\"com.atguigu.Test\"））\n- 初始化一个类的子类\n- Java虚拟机启动时被标明为启动类的类\n- JDK7开始提供的动态语言支持：\n- java.lang.invoke.MethodHandle实例的解析结果REF getStatic、REF putStatic、REF invokeStatic句柄对应的类没有初始化，则初始化\n\n除了以上七种情况，其他使用Java类的方式都被看作是对类的被动使用，都不会导致类的初始化。","source":"_posts/jvm/类加载子系统.md","raw":"---\ntitle: 类加载子系统\ndate: 2023-12-03 20:53:58\ntags: jvm\ncategories: java\n---\n\n\n# 类加载子系统\n\n## 概述\n\n![image-20200705080719531](images/jvm/image-20200705080719531.png)\n\n完整图如下\n\n![image-20200705080911284](images/jvm/image-20200705080911284.png)\n\n如果自己想手写一个Java虚拟机的话，主要考虑哪些结构呢？\n\n- 类加载器\n- 执行引擎\n\n## 类加载器子系统作用\n\n类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。\n\nClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。\n\n加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）\n\n![image-20200705081813409](images/jvm/image-20200705081813409.png)\n\n- class file存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。\n- class file加载到JVM中，被称为DNA元数据模板，放在方法区。\n- 在.class文件->JVM->最终成为元数据模板，此过程就要一个运输工具（类装载器Class Loader），扮演一个快递员的角色。\n\n![image-20200705081913538](images/jvm/image-20200705081913538.png)\n\n## 类的加载过程\n\n例如下面的一段简单的代码\n\n```java\n/**\n * 类加载子系统\n * @author: 陌溪\n * @create: 2020-07-05-8:24\n */\npublic class HelloLoader {\n    public static void main(String[] args) {\n        System.out.println(\"我已经被加载啦\");\n    }\n}\n```\n\n它的加载过程是怎么样的呢?\n\n![image-20200705082255746](images/jvm/image-20200705082255746.png)\n\n完整的流程图如下所示\n\n![image-20200705082601441](images/jvm/image-20200705082601441.png)\n\n### 加载阶段\n\n通过一个类的全限定名获取定义此类的二进制字节流\n\n将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n\n在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口\n\n### 加载class文件的方式\n\n- 从本地系统中直接加载\n- 通过网络获取，典型场景：Web Applet\n- 从zip压缩包中读取，成为日后jar、war格式的基础\n- 运行时计算生成，使用最多的是：动态代理技术\n- 由其他文件生成，典型场景：JSP应用从专有数据库中提取.class文件，比较少见\n- 从加密文件中获取，典型的防Class文件被反编译的保护措施\n\n### 链接阶段\n\n#### 验证 Verify\n\n目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。\n\n主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。\n\n> 工具：Binary Viewer查看\n\n![image-20200705084038680](images/jvm/image-20200705084038680.png)\n\n如果出现不合法的字节码文件，那么将会验证不通过\n\n同时我们可以通过安装IDEA的插件，来查看我们的Class文件\n\n![image-20200705090237078](images/jvm/image-20200705090237078.png)\n\n安装完成后，我们编译完一个class文件后，点击view即可显示我们安装的插件来查看字节码方法了\n\n![image-20200705090328171](images/jvm/image-20200705090328171.png)\n\n### 准备 Prepare\n\n为类变量分配内存并且设置该类变量的默认初始值，即零值。\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-8:42\n */\npublic class HelloApp {\n    private static int a = 1;  // 准备阶段为0，在下个阶段，也就是初始化的时候才是1\n    public static void main(String[] args) {\n        System.out.println(a);\n    }\n}\n```\n\n上面的变量a在准备阶段会赋初始值，但不是1，而是0。\n\n这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化；\n\n这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。\n\n例如下面这段代码\n\n### 解析 Resolve\n\n将常量池内的符号引用转换为直接引用的过程。\n\n事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。\n\n符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\n\n解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT Class info、CONSTANT Fieldref info、CONSTANT Methodref info等\n\n### 初始化阶段\n\n初始化阶段就是执行类构造器法<clinit>（）的过程。\n\n此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。\n\n- 也就是说，当我们代码中包含static变量的时候，就会有clinit方法\n\n构造器方法中指令按语句在源文件中出现的顺序执行。\n\n<clinit>（）不同于类的构造器。（关联：构造器是虚拟机视角下的<init>（））若该类具有父类，JVM会保证子类的<clinit>（）执行前，父类的<clinit>（）已经执行完毕。\n\n- 任何一个类在声明后，都有生成一个构造器，默认是空参构造器\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-8:47\n */\npublic class ClassInitTest {\n    private static int num = 1;\n    static {\n        num = 2;\n        number = 20;\n        System.out.println(num);\n        System.out.println(number);  //报错，非法的前向引用\n    }\n\n    private static int number = 10;\n\n    public static void main(String[] args) {\n        System.out.println(ClassInitTest.num); // 2\n        System.out.println(ClassInitTest.number); // 10\n    }\n}\n```\n\n关于涉及到父类时候的变量赋值过程\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-9:06\n */\npublic class ClinitTest1 {\n    static class Father {\n        public static int A = 1;\n        static {\n            A = 2;\n        }\n    }\n\n    static class Son extends Father {\n        public static int b = A;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(Son.b);\n    }\n}\n```\n\n我们输出结果为 2，也就是说首先加载ClinitTest1的时候，会找到main方法，然后执行Son的初始化，但是Son继承了Father，因此还需要执行Father的初始化，同时将A赋值为2。我们通过反编译得到Father的加载过程，首先我们看到原来的值被赋值成1，然后又被复制成2，最后返回\n\n```bash\niconst_1\nputstatic #2 <com/atguigu/java/chapter02/ClinitTest1$Father.A>\niconst_2\nputstatic #2 <com/atguigu/java/chapter02/ClinitTest1$Father.A>\nreturn\n```\n\n虚拟机必须保证一个类的<clinit>（）方法在多线程下被同步加锁。\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-9:14\n */\npublic class DeadThreadTest {\n    public static void main(String[] args) {\n        new Thread(() -> {\n            System.out.println(Thread.currentThread().getName() + \"\\t 线程t1开始\");\n            new DeadThread();\n        }, \"t1\").start();\n\n        new Thread(() -> {\n            System.out.println(Thread.currentThread().getName() + \"\\t 线程t2开始\");\n            new DeadThread();\n        }, \"t2\").start();\n    }\n}\nclass DeadThread {\n    static {\n        if (true) {\n            System.out.println(Thread.currentThread().getName() + \"\\t 初始化当前类\");\n            while(true) {\n\n            }\n        }\n    }\n}\n```\n\n上面的代码，输出结果为\n\n```\n线程t1开始\n线程t2开始\n线程t2 初始化当前类\n```\n\n从上面可以看出初始化后，只能够执行一次初始化，这也就是同步加锁的过程\n\n## 类加载器的分类\n\nJVM支持两种类型的类加载器 。分别为引导类加载器（Bootstrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）。\n\n从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。\n\n无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示：\n\n![image-20200705094149223](images/jvm/image-20200705094149223.png)\n\n这里的四者之间是包含关系，不是上层和下层，也不是子系统的继承关系。\n\n我们通过一个类，获取它不同的加载器\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-9:47\n */\npublic class ClassLoaderTest {\n    public static void main(String[] args) {\n        // 获取系统类加载器\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        System.out.println(systemClassLoader);\n\n        // 获取其上层的：扩展类加载器\n        ClassLoader extClassLoader = systemClassLoader.getParent();\n        System.out.println(extClassLoader);\n\n        // 试图获取 根加载器\n        ClassLoader bootstrapClassLoader = extClassLoader.getParent();\n        System.out.println(bootstrapClassLoader);\n\n        // 获取自定义加载器\n        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();\n        System.out.println(classLoader);\n        \n        // 获取String类型的加载器\n        ClassLoader classLoader1 = String.class.getClassLoader();\n        System.out.println(classLoader1);\n    }\n}\n```\n\n得到的结果，从结果可以看出 根加载器无法直接通过代码获取，同时目前用户代码所使用的加载器为系统类加载器。同时我们通过获取String类型的加载器，发现是null，那么说明String类型是通过根加载器进行加载的，也就是说Java的核心类库都是使用根加载器进行加载的。\n\n```\nsun.misc.Launcher$AppClassLoader@18b4aac2\nsun.misc.Launcher$ExtClassLoader@1540e19d\nnull\nsun.misc.Launcher$AppClassLoader@18b4aac2\nnull \n```\n\n### 虚拟机自带的加载器\n\n#### 启动类加载器（引导类加载器，Bootstrap ClassLoader）\n\n- 这个类加载使用C/C++语言实现的，嵌套在JVM内部。\n- 它用来加载Java的核心库（JAVAHOME/jre/1ib/rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类\n- 并不继承自ava.lang.ClassLoader，没有父加载器。\n- 加载扩展类和应用程序类加载器，并指定为他们的父类加载器。\n- 出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类\n\n### 扩展类加载器（Extension ClassLoader）\n\n- Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。\n- 派生于ClassLoader类\n- 父类加载器为启动类加载器\n- 从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/1ib/ext子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。\n\n### 应用程序类加载器（系统类加载器，AppClassLoader）\n\n- javI语言编写，由sun.misc.LaunchersAppClassLoader实现\n- 派生于ClassLoader类\n- 父类加载器为扩展类加载器\n- 它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库\n- 该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载\n- 通过classLoader#getSystemclassLoader（）方法可以获取到该类加载器\n\n### 用户自定义类加载器\n\n在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。\n为什么要自定义类加载器？\n\n- 隔离加载类\n- 修改类加载的方式\n- 扩展加载源\n- 防止源码泄漏\n\n用户自定义类加载器实现步骤：\n\n- 开发人员可以通过继承抽象类ava.1ang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求\n- 在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写1oadClass（）方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖1oadclass（）方法，而是建议把自定义的类加载逻辑写在findclass（）方法中\n- 在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URIClassLoader类，这样就可以避免自己去编写findclass（）方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。\n\n### 查看根加载器所能加载的目录\n\n刚刚我们通过概念了解到了，根加载器只能够加载 java /lib目录下的class，我们通过下面代码验证一下\n\n```java\n/**\n * @author: 陌溪\n * @create: 2020-07-05-10:17\n */\npublic class ClassLoaderTest1 {\n    public static void main(String[] args) {\n        System.out.println(\"*********启动类加载器************\");\n        // 获取BootstrapClassLoader 能够加载的API的路径\n        URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();\n        for (URL url : urls) {\n            System.out.println(url.toExternalForm());\n        }\n\n        // 从上面路径中，随意选择一个类，来看看他的类加载器是什么：得到的是null，说明是  根加载器\n        ClassLoader classLoader = Provider.class.getClassLoader();\n    }\n}\n```\n\n得到的结果\n\n```\n*********启动类加载器************\nfile:/E:/Software/JDK1.8/Java/jre/lib/resources.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/rt.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/sunrsasign.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/jsse.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/jce.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/charsets.jar\nfile:/E:/Software/JDK1.8/Java/jre/lib/jfr.jar\nfile:/E:/Software/JDK1.8/Java/jre/classes\nnull\n```\n\n### 关于ClassLoader\n\nClassLoader类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）\n\n![image-20200705103516138](images/jvm/image-20200705103516138.png)\n\nsun.misc.Launcher 它是一个java虚拟机的入口应用\n\n![image-20200705103636003](images/jvm/image-20200705103636003.png)\n\n获取ClassLoader的途径\n\n- 获取当前ClassLoader：clazz.getClassLoader()\n- 获取当前线程上下文的ClassLoader：Thread.currentThread().getContextClassLoader()\n- 获取系统的ClassLoader：ClassLoader.getSystemClassLoader()\n- 获取调用者的ClassLoader：DriverManager.getCallerClassLoader()\n\n## 双亲委派机制\n\nJava虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。\n\n### 工作原理\n\n- 如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；\n- 如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；\n- 如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。\n\n![image-20200705105151258](images/jvm/image-20200705105151258.png)\n\n### 双亲委派机制举例\n\n当我们加载jdbc.jar 用于实现数据库连接的时候，首先我们需要知道的是 jdbc.jar是基于SPI接口进行实现的，所以在加载的时候，会进行双亲委派，最终从根加载器中加载 SPI核心类，然后在加载SPI接口类，接着在进行反向委派，通过线程上下文类加载器进行实现类 jdbc.jar的加载。\n\n![image-20200705105810107](images/jvm/image-20200705105810107.png)\n\n### 沙箱安全机制\n\n自定义string类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java\\lang\\String.class），报错信息说没有main方法，就是因为加载的是rt.jar包中的string类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。\n\n### 双亲委派机制的优势\n\n通过上面的例子，我们可以知道，双亲机制可以\n\n- 避免类的重复加载\n- 保护程序安全，防止核心API被随意篡改\n  - 自定义类：java.lang.String\n  - 自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）\n\n## 其它\n\n###  如何判断两个class对象是否相同\n\n在JVM中表示两个class对象是否为同一个类存在两个必要条件：\n- 类的完整类名必须一致，包括包名。\n- 加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。\n\n换句话说，在JvM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。\n\nJVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。\n\n### 类的主动使用和被动使用\n\nJava程序对类的使用方式分为：王动使用和被动使用。\n主动使用，又分为七种情况：\n\n- 创建类的实例\n- 访问某个类或接口的静态变量，或者对该静态变量赋值\n- 调用类的静态方法I\n- 反射（比如：Class.forName（\"com.atguigu.Test\"））\n- 初始化一个类的子类\n- Java虚拟机启动时被标明为启动类的类\n- JDK7开始提供的动态语言支持：\n- java.lang.invoke.MethodHandle实例的解析结果REF getStatic、REF putStatic、REF invokeStatic句柄对应的类没有初始化，则初始化\n\n除了以上七种情况，其他使用Java类的方式都被看作是对类的被动使用，都不会导致类的初始化。","slug":"jvm/类加载子系统","published":1,"updated":"2023-12-09T05:54:44.288Z","_id":"clpxlg52h0005awwfhupv84vo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"类加载子系统\"><a href=\"#类加载子系统\" class=\"headerlink\" title=\"类加载子系统\"></a>类加载子系统</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><img src=\"/images/jvm/image-20200705080719531.png\" alt=\"image-20200705080719531\"></p>\n<p>完整图如下</p>\n<p><img src=\"/images/jvm/image-20200705080911284.png\" alt=\"image-20200705080911284\"></p>\n<p>如果自己想手写一个Java虚拟机的话，主要考虑哪些结构呢？</p>\n<ul>\n<li>类加载器</li>\n<li>执行引擎</li>\n</ul>\n<h2 id=\"类加载器子系统作用\"><a href=\"#类加载器子系统作用\" class=\"headerlink\" title=\"类加载器子系统作用\"></a>类加载器子系统作用</h2><p>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。</p>\n<p>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p>\n<p>加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）</p>\n<p><img src=\"/images/jvm/image-20200705081813409.png\" alt=\"image-20200705081813409\"></p>\n<ul>\n<li>class file存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。</li>\n<li>class file加载到JVM中，被称为DNA元数据模板，放在方法区。</li>\n<li>在.class文件-&gt;JVM-&gt;最终成为元数据模板，此过程就要一个运输工具（类装载器Class Loader），扮演一个快递员的角色。</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200705081913538.png\" alt=\"image-20200705081913538\"></p>\n<h2 id=\"类的加载过程\"><a href=\"#类的加载过程\" class=\"headerlink\" title=\"类的加载过程\"></a>类的加载过程</h2><p>例如下面的一段简单的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 类加载子系统</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-8:24</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloLoader</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;我已经被加载啦&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>它的加载过程是怎么样的呢?</p>\n<p><img src=\"/images/jvm/image-20200705082255746.png\" alt=\"image-20200705082255746\"></p>\n<p>完整的流程图如下所示</p>\n<p><img src=\"/images/jvm/image-20200705082601441.png\" alt=\"image-20200705082601441\"></p>\n<h3 id=\"加载阶段\"><a href=\"#加载阶段\" class=\"headerlink\" title=\"加载阶段\"></a>加载阶段</h3><p>通过一个类的全限定名获取定义此类的二进制字节流</p>\n<p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p>\n<p>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</p>\n<h3 id=\"加载class文件的方式\"><a href=\"#加载class文件的方式\" class=\"headerlink\" title=\"加载class文件的方式\"></a>加载class文件的方式</h3><ul>\n<li>从本地系统中直接加载</li>\n<li>通过网络获取，典型场景：Web Applet</li>\n<li>从zip压缩包中读取，成为日后jar、war格式的基础</li>\n<li>运行时计算生成，使用最多的是：动态代理技术</li>\n<li>由其他文件生成，典型场景：JSP应用从专有数据库中提取.class文件，比较少见</li>\n<li>从加密文件中获取，典型的防Class文件被反编译的保护措施</li>\n</ul>\n<h3 id=\"链接阶段\"><a href=\"#链接阶段\" class=\"headerlink\" title=\"链接阶段\"></a>链接阶段</h3><h4 id=\"验证-Verify\"><a href=\"#验证-Verify\" class=\"headerlink\" title=\"验证 Verify\"></a>验证 Verify</h4><p>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</p>\n<p>主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</p>\n<blockquote>\n<p>工具：Binary Viewer查看</p>\n</blockquote>\n<p><img src=\"/images/jvm/image-20200705084038680.png\" alt=\"image-20200705084038680\"></p>\n<p>如果出现不合法的字节码文件，那么将会验证不通过</p>\n<p>同时我们可以通过安装IDEA的插件，来查看我们的Class文件</p>\n<p><img src=\"/images/jvm/image-20200705090237078.png\" alt=\"image-20200705090237078\"></p>\n<p>安装完成后，我们编译完一个class文件后，点击view即可显示我们安装的插件来查看字节码方法了</p>\n<p><img src=\"/images/jvm/image-20200705090328171.png\" alt=\"image-20200705090328171\"></p>\n<h3 id=\"准备-Prepare\"><a href=\"#准备-Prepare\" class=\"headerlink\" title=\"准备 Prepare\"></a>准备 Prepare</h3><p>为类变量分配内存并且设置该类变量的默认初始值，即零值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-8:42</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloApp</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 准备阶段为0，在下个阶段，也就是初始化的时候才是1</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面的变量a在准备阶段会赋初始值，但不是1，而是0。</p>\n<p>这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化；</p>\n<p>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</p>\n<p>例如下面这段代码</p>\n<h3 id=\"解析-Resolve\"><a href=\"#解析-Resolve\" class=\"headerlink\" title=\"解析 Resolve\"></a>解析 Resolve</h3><p>将常量池内的符号引用转换为直接引用的过程。</p>\n<p>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。</p>\n<p>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>\n<p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT Class info、CONSTANT Fieldref info、CONSTANT Methodref info等</p>\n<h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><p>初始化阶段就是执行类构造器法<clinit>（）的过程。</p>\n<p>此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</p>\n<ul>\n<li>也就是说，当我们代码中包含static变量的时候，就会有clinit方法</li>\n</ul>\n<p>构造器方法中指令按语句在源文件中出现的顺序执行。</p>\n<p><clinit>（）不同于类的构造器。（关联：构造器是虚拟机视角下的<init>（））若该类具有父类，JVM会保证子类的<clinit>（）执行前，父类的<clinit>（）已经执行完毕。</p>\n<ul>\n<li>任何一个类在声明后，都有生成一个构造器，默认是空参构造器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-8:47</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassInitTest</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        num = <span class=\"hljs-number\">2</span>;<br>        number = <span class=\"hljs-number\">20</span>;<br>        System.out.println(num);<br>        System.out.println(number);  <span class=\"hljs-comment\">//报错，非法的前向引用</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">number</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(ClassInitTest.num); <span class=\"hljs-comment\">// 2</span><br>        System.out.println(ClassInitTest.number); <span class=\"hljs-comment\">// 10</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关于涉及到父类时候的变量赋值过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-9:06</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClinitTest1</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Father</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">A</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">static</span> &#123;<br>            A = <span class=\"hljs-number\">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Son</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Father</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> A;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(Son.b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们输出结果为 2，也就是说首先加载ClinitTest1的时候，会找到main方法，然后执行Son的初始化，但是Son继承了Father，因此还需要执行Father的初始化，同时将A赋值为2。我们通过反编译得到Father的加载过程，首先我们看到原来的值被赋值成1，然后又被复制成2，最后返回</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">iconst_1<br>putstatic <span class=\"hljs-comment\">#2 &lt;com/atguigu/java/chapter02/ClinitTest1$Father.A&gt;</span><br>iconst_2<br>putstatic <span class=\"hljs-comment\">#2 &lt;com/atguigu/java/chapter02/ClinitTest1$Father.A&gt;</span><br><span class=\"hljs-built_in\">return</span><br></code></pre></td></tr></table></figure>\n\n<p>虚拟机必须保证一个类的<clinit>（）方法在多线程下被同步加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-9:14</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DeadThreadTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\">&quot;\\t 线程t1开始&quot;</span>);<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeadThread</span>();<br>        &#125;, <span class=\"hljs-string\">&quot;t1&quot;</span>).start();<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\">&quot;\\t 线程t2开始&quot;</span>);<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeadThread</span>();<br>        &#125;, <span class=\"hljs-string\">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DeadThread</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\">&quot;\\t 初始化当前类&quot;</span>);<br>            <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面的代码，输出结果为</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">线程<span class=\"hljs-built_in\">t1</span>开始<br>线程<span class=\"hljs-built_in\">t2</span>开始<br>线程<span class=\"hljs-built_in\">t2</span> 初始化当前类<br></code></pre></td></tr></table></figure>\n\n<p>从上面可以看出初始化后，只能够执行一次初始化，这也就是同步加锁的过程</p>\n<h2 id=\"类加载器的分类\"><a href=\"#类加载器的分类\" class=\"headerlink\" title=\"类加载器的分类\"></a>类加载器的分类</h2><p>JVM支持两种类型的类加载器 。分别为引导类加载器（Bootstrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）。</p>\n<p>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。</p>\n<p>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示：</p>\n<p><img src=\"/images/jvm/image-20200705094149223.png\" alt=\"image-20200705094149223\"></p>\n<p>这里的四者之间是包含关系，不是上层和下层，也不是子系统的继承关系。</p>\n<p>我们通过一个类，获取它不同的加载器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-9:47</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassLoaderTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 获取系统类加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">systemClassLoader</span> <span class=\"hljs-operator\">=</span> ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class=\"hljs-comment\">// 获取其上层的：扩展类加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">extClassLoader</span> <span class=\"hljs-operator\">=</span> systemClassLoader.getParent();<br>        System.out.println(extClassLoader);<br><br>        <span class=\"hljs-comment\">// 试图获取 根加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">bootstrapClassLoader</span> <span class=\"hljs-operator\">=</span> extClassLoader.getParent();<br>        System.out.println(bootstrapClassLoader);<br><br>        <span class=\"hljs-comment\">// 获取自定义加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">classLoader</span> <span class=\"hljs-operator\">=</span> ClassLoaderTest.class.getClassLoader();<br>        System.out.println(classLoader);<br>        <br>        <span class=\"hljs-comment\">// 获取String类型的加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">classLoader1</span> <span class=\"hljs-operator\">=</span> String.class.getClassLoader();<br>        System.out.println(classLoader1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>得到的结果，从结果可以看出 根加载器无法直接通过代码获取，同时目前用户代码所使用的加载器为系统类加载器。同时我们通过获取String类型的加载器，发现是null，那么说明String类型是通过根加载器进行加载的，也就是说Java的核心类库都是使用根加载器进行加载的。</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">sun.misc.Launcher$AppClassLoader<span class=\"hljs-symbol\">@18b4aac2</span><br>sun.misc.Launcher$ExtClassLoader<span class=\"hljs-symbol\">@1540e19d</span><br><span class=\"hljs-literal\">null</span><br>sun.misc.Launcher$AppClassLoader<span class=\"hljs-symbol\">@18b4aac2</span><br><span class=\"hljs-literal\">null</span> <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"虚拟机自带的加载器\"><a href=\"#虚拟机自带的加载器\" class=\"headerlink\" title=\"虚拟机自带的加载器\"></a>虚拟机自带的加载器</h3><h4 id=\"启动类加载器（引导类加载器，Bootstrap-ClassLoader）\"><a href=\"#启动类加载器（引导类加载器，Bootstrap-ClassLoader）\" class=\"headerlink\" title=\"启动类加载器（引导类加载器，Bootstrap ClassLoader）\"></a>启动类加载器（引导类加载器，Bootstrap ClassLoader）</h4><ul>\n<li>这个类加载使用C&#x2F;C++语言实现的，嵌套在JVM内部。</li>\n<li>它用来加载Java的核心库（JAVAHOME&#x2F;jre&#x2F;1ib&#x2F;rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类</li>\n<li>并不继承自ava.lang.ClassLoader，没有父加载器。</li>\n<li>加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</li>\n<li>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</li>\n</ul>\n<h3 id=\"扩展类加载器（Extension-ClassLoader）\"><a href=\"#扩展类加载器（Extension-ClassLoader）\" class=\"headerlink\" title=\"扩展类加载器（Extension ClassLoader）\"></a>扩展类加载器（Extension ClassLoader）</h3><ul>\n<li>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。</li>\n<li>派生于ClassLoader类</li>\n<li>父类加载器为启动类加载器</li>\n<li>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre&#x2F;1ib&#x2F;ext子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。</li>\n</ul>\n<h3 id=\"应用程序类加载器（系统类加载器，AppClassLoader）\"><a href=\"#应用程序类加载器（系统类加载器，AppClassLoader）\" class=\"headerlink\" title=\"应用程序类加载器（系统类加载器，AppClassLoader）\"></a>应用程序类加载器（系统类加载器，AppClassLoader）</h3><ul>\n<li>javI语言编写，由sun.misc.LaunchersAppClassLoader实现</li>\n<li>派生于ClassLoader类</li>\n<li>父类加载器为扩展类加载器</li>\n<li>它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库</li>\n<li>该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载</li>\n<li>通过classLoader#getSystemclassLoader（）方法可以获取到该类加载器</li>\n</ul>\n<h3 id=\"用户自定义类加载器\"><a href=\"#用户自定义类加载器\" class=\"headerlink\" title=\"用户自定义类加载器\"></a>用户自定义类加载器</h3><p>在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。<br>为什么要自定义类加载器？</p>\n<ul>\n<li>隔离加载类</li>\n<li>修改类加载的方式</li>\n<li>扩展加载源</li>\n<li>防止源码泄漏</li>\n</ul>\n<p>用户自定义类加载器实现步骤：</p>\n<ul>\n<li>开发人员可以通过继承抽象类ava.1ang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求</li>\n<li>在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写1oadClass（）方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖1oadclass（）方法，而是建议把自定义的类加载逻辑写在findclass（）方法中</li>\n<li>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URIClassLoader类，这样就可以避免自己去编写findclass（）方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</li>\n</ul>\n<h3 id=\"查看根加载器所能加载的目录\"><a href=\"#查看根加载器所能加载的目录\" class=\"headerlink\" title=\"查看根加载器所能加载的目录\"></a>查看根加载器所能加载的目录</h3><p>刚刚我们通过概念了解到了，根加载器只能够加载 java &#x2F;lib目录下的class，我们通过下面代码验证一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-10:17</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassLoaderTest1</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;*********启动类加载器************&quot;</span>);<br>        <span class=\"hljs-comment\">// 获取BootstrapClassLoader 能够加载的API的路径</span><br>        URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();<br>        <span class=\"hljs-keyword\">for</span> (URL url : urls) &#123;<br>            System.out.println(url.toExternalForm());<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 从上面路径中，随意选择一个类，来看看他的类加载器是什么：得到的是null，说明是  根加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">classLoader</span> <span class=\"hljs-operator\">=</span> Provider.class.getClassLoader();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>得到的结果</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">*********启动类加载器************<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/resources.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/rt.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/sunrsasign.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/jsse.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/jce.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/charsets.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/jfr.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>classes<br><span class=\"hljs-keyword\">null</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"关于ClassLoader\"><a href=\"#关于ClassLoader\" class=\"headerlink\" title=\"关于ClassLoader\"></a>关于ClassLoader</h3><p>ClassLoader类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）</p>\n<p><img src=\"/images/jvm/image-20200705103516138.png\" alt=\"image-20200705103516138\"></p>\n<p>sun.misc.Launcher 它是一个java虚拟机的入口应用</p>\n<p><img src=\"/images/jvm/image-20200705103636003.png\" alt=\"image-20200705103636003\"></p>\n<p>获取ClassLoader的途径</p>\n<ul>\n<li>获取当前ClassLoader：clazz.getClassLoader()</li>\n<li>获取当前线程上下文的ClassLoader：Thread.currentThread().getContextClassLoader()</li>\n<li>获取系统的ClassLoader：ClassLoader.getSystemClassLoader()</li>\n<li>获取调用者的ClassLoader：DriverManager.getCallerClassLoader()</li>\n</ul>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p>Java虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><ul>\n<li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；</li>\n<li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；</li>\n<li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200705105151258.png\" alt=\"image-20200705105151258\"></p>\n<h3 id=\"双亲委派机制举例\"><a href=\"#双亲委派机制举例\" class=\"headerlink\" title=\"双亲委派机制举例\"></a>双亲委派机制举例</h3><p>当我们加载jdbc.jar 用于实现数据库连接的时候，首先我们需要知道的是 jdbc.jar是基于SPI接口进行实现的，所以在加载的时候，会进行双亲委派，最终从根加载器中加载 SPI核心类，然后在加载SPI接口类，接着在进行反向委派，通过线程上下文类加载器进行实现类 jdbc.jar的加载。</p>\n<p><img src=\"/images/jvm/image-20200705105810107.png\" alt=\"image-20200705105810107\"></p>\n<h3 id=\"沙箱安全机制\"><a href=\"#沙箱安全机制\" class=\"headerlink\" title=\"沙箱安全机制\"></a>沙箱安全机制</h3><p>自定义string类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java\\lang\\String.class），报错信息说没有main方法，就是因为加载的是rt.jar包中的string类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。</p>\n<h3 id=\"双亲委派机制的优势\"><a href=\"#双亲委派机制的优势\" class=\"headerlink\" title=\"双亲委派机制的优势\"></a>双亲委派机制的优势</h3><p>通过上面的例子，我们可以知道，双亲机制可以</p>\n<ul>\n<li>避免类的重复加载</li>\n<li>保护程序安全，防止核心API被随意篡改<ul>\n<li>自定义类：java.lang.String</li>\n<li>自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"如何判断两个class对象是否相同\"><a href=\"#如何判断两个class对象是否相同\" class=\"headerlink\" title=\"如何判断两个class对象是否相同\"></a>如何判断两个class对象是否相同</h3><p>在JVM中表示两个class对象是否为同一个类存在两个必要条件：</p>\n<ul>\n<li>类的完整类名必须一致，包括包名。</li>\n<li>加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。</li>\n</ul>\n<p>换句话说，在JvM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。</p>\n<p>JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</p>\n<h3 id=\"类的主动使用和被动使用\"><a href=\"#类的主动使用和被动使用\" class=\"headerlink\" title=\"类的主动使用和被动使用\"></a>类的主动使用和被动使用</h3><p>Java程序对类的使用方式分为：王动使用和被动使用。<br>主动使用，又分为七种情况：</p>\n<ul>\n<li>创建类的实例</li>\n<li>访问某个类或接口的静态变量，或者对该静态变量赋值</li>\n<li>调用类的静态方法I</li>\n<li>反射（比如：Class.forName（”com.atguigu.Test”））</li>\n<li>初始化一个类的子类</li>\n<li>Java虚拟机启动时被标明为启动类的类</li>\n<li>JDK7开始提供的动态语言支持：</li>\n<li>java.lang.invoke.MethodHandle实例的解析结果REF getStatic、REF putStatic、REF invokeStatic句柄对应的类没有初始化，则初始化</li>\n</ul>\n<p>除了以上七种情况，其他使用Java类的方式都被看作是对类的被动使用，都不会导致类的初始化。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"类加载子系统\"><a href=\"#类加载子系统\" class=\"headerlink\" title=\"类加载子系统\"></a>类加载子系统</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><img src=\"/images/jvm/image-20200705080719531.png\" alt=\"image-20200705080719531\"></p>\n<p>完整图如下</p>\n<p><img src=\"/images/jvm/image-20200705080911284.png\" alt=\"image-20200705080911284\"></p>\n<p>如果自己想手写一个Java虚拟机的话，主要考虑哪些结构呢？</p>\n<ul>\n<li>类加载器</li>\n<li>执行引擎</li>\n</ul>\n<h2 id=\"类加载器子系统作用\"><a href=\"#类加载器子系统作用\" class=\"headerlink\" title=\"类加载器子系统作用\"></a>类加载器子系统作用</h2><p>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。</p>\n<p>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p>\n<p>加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）</p>\n<p><img src=\"/images/jvm/image-20200705081813409.png\" alt=\"image-20200705081813409\"></p>\n<ul>\n<li>class file存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。</li>\n<li>class file加载到JVM中，被称为DNA元数据模板，放在方法区。</li>\n<li>在.class文件-&gt;JVM-&gt;最终成为元数据模板，此过程就要一个运输工具（类装载器Class Loader），扮演一个快递员的角色。</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200705081913538.png\" alt=\"image-20200705081913538\"></p>\n<h2 id=\"类的加载过程\"><a href=\"#类的加载过程\" class=\"headerlink\" title=\"类的加载过程\"></a>类的加载过程</h2><p>例如下面的一段简单的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 类加载子系统</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-8:24</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloLoader</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;我已经被加载啦&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>它的加载过程是怎么样的呢?</p>\n<p><img src=\"/images/jvm/image-20200705082255746.png\" alt=\"image-20200705082255746\"></p>\n<p>完整的流程图如下所示</p>\n<p><img src=\"/images/jvm/image-20200705082601441.png\" alt=\"image-20200705082601441\"></p>\n<h3 id=\"加载阶段\"><a href=\"#加载阶段\" class=\"headerlink\" title=\"加载阶段\"></a>加载阶段</h3><p>通过一个类的全限定名获取定义此类的二进制字节流</p>\n<p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p>\n<p>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</p>\n<h3 id=\"加载class文件的方式\"><a href=\"#加载class文件的方式\" class=\"headerlink\" title=\"加载class文件的方式\"></a>加载class文件的方式</h3><ul>\n<li>从本地系统中直接加载</li>\n<li>通过网络获取，典型场景：Web Applet</li>\n<li>从zip压缩包中读取，成为日后jar、war格式的基础</li>\n<li>运行时计算生成，使用最多的是：动态代理技术</li>\n<li>由其他文件生成，典型场景：JSP应用从专有数据库中提取.class文件，比较少见</li>\n<li>从加密文件中获取，典型的防Class文件被反编译的保护措施</li>\n</ul>\n<h3 id=\"链接阶段\"><a href=\"#链接阶段\" class=\"headerlink\" title=\"链接阶段\"></a>链接阶段</h3><h4 id=\"验证-Verify\"><a href=\"#验证-Verify\" class=\"headerlink\" title=\"验证 Verify\"></a>验证 Verify</h4><p>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</p>\n<p>主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</p>\n<blockquote>\n<p>工具：Binary Viewer查看</p>\n</blockquote>\n<p><img src=\"/images/jvm/image-20200705084038680.png\" alt=\"image-20200705084038680\"></p>\n<p>如果出现不合法的字节码文件，那么将会验证不通过</p>\n<p>同时我们可以通过安装IDEA的插件，来查看我们的Class文件</p>\n<p><img src=\"/images/jvm/image-20200705090237078.png\" alt=\"image-20200705090237078\"></p>\n<p>安装完成后，我们编译完一个class文件后，点击view即可显示我们安装的插件来查看字节码方法了</p>\n<p><img src=\"/images/jvm/image-20200705090328171.png\" alt=\"image-20200705090328171\"></p>\n<h3 id=\"准备-Prepare\"><a href=\"#准备-Prepare\" class=\"headerlink\" title=\"准备 Prepare\"></a>准备 Prepare</h3><p>为类变量分配内存并且设置该类变量的默认初始值，即零值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-8:42</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloApp</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 准备阶段为0，在下个阶段，也就是初始化的时候才是1</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面的变量a在准备阶段会赋初始值，但不是1，而是0。</p>\n<p>这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化；</p>\n<p>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</p>\n<p>例如下面这段代码</p>\n<h3 id=\"解析-Resolve\"><a href=\"#解析-Resolve\" class=\"headerlink\" title=\"解析 Resolve\"></a>解析 Resolve</h3><p>将常量池内的符号引用转换为直接引用的过程。</p>\n<p>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。</p>\n<p>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>\n<p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT Class info、CONSTANT Fieldref info、CONSTANT Methodref info等</p>\n<h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><p>初始化阶段就是执行类构造器法<clinit>（）的过程。</p>\n<p>此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</p>\n<ul>\n<li>也就是说，当我们代码中包含static变量的时候，就会有clinit方法</li>\n</ul>\n<p>构造器方法中指令按语句在源文件中出现的顺序执行。</p>\n<p><clinit>（）不同于类的构造器。（关联：构造器是虚拟机视角下的<init>（））若该类具有父类，JVM会保证子类的<clinit>（）执行前，父类的<clinit>（）已经执行完毕。</p>\n<ul>\n<li>任何一个类在声明后，都有生成一个构造器，默认是空参构造器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-8:47</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassInitTest</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        num = <span class=\"hljs-number\">2</span>;<br>        number = <span class=\"hljs-number\">20</span>;<br>        System.out.println(num);<br>        System.out.println(number);  <span class=\"hljs-comment\">//报错，非法的前向引用</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">number</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(ClassInitTest.num); <span class=\"hljs-comment\">// 2</span><br>        System.out.println(ClassInitTest.number); <span class=\"hljs-comment\">// 10</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>关于涉及到父类时候的变量赋值过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-9:06</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClinitTest1</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Father</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">A</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">static</span> &#123;<br>            A = <span class=\"hljs-number\">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Son</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Father</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> A;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(Son.b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们输出结果为 2，也就是说首先加载ClinitTest1的时候，会找到main方法，然后执行Son的初始化，但是Son继承了Father，因此还需要执行Father的初始化，同时将A赋值为2。我们通过反编译得到Father的加载过程，首先我们看到原来的值被赋值成1，然后又被复制成2，最后返回</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">iconst_1<br>putstatic <span class=\"hljs-comment\">#2 &lt;com/atguigu/java/chapter02/ClinitTest1$Father.A&gt;</span><br>iconst_2<br>putstatic <span class=\"hljs-comment\">#2 &lt;com/atguigu/java/chapter02/ClinitTest1$Father.A&gt;</span><br><span class=\"hljs-built_in\">return</span><br></code></pre></td></tr></table></figure>\n\n<p>虚拟机必须保证一个类的<clinit>（）方法在多线程下被同步加锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-9:14</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DeadThreadTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\">&quot;\\t 线程t1开始&quot;</span>);<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeadThread</span>();<br>        &#125;, <span class=\"hljs-string\">&quot;t1&quot;</span>).start();<br><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\">&quot;\\t 线程t2开始&quot;</span>);<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DeadThread</span>();<br>        &#125;, <span class=\"hljs-string\">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DeadThread</span> &#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class=\"hljs-string\">&quot;\\t 初始化当前类&quot;</span>);<br>            <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面的代码，输出结果为</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">线程<span class=\"hljs-built_in\">t1</span>开始<br>线程<span class=\"hljs-built_in\">t2</span>开始<br>线程<span class=\"hljs-built_in\">t2</span> 初始化当前类<br></code></pre></td></tr></table></figure>\n\n<p>从上面可以看出初始化后，只能够执行一次初始化，这也就是同步加锁的过程</p>\n<h2 id=\"类加载器的分类\"><a href=\"#类加载器的分类\" class=\"headerlink\" title=\"类加载器的分类\"></a>类加载器的分类</h2><p>JVM支持两种类型的类加载器 。分别为引导类加载器（Bootstrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）。</p>\n<p>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。</p>\n<p>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示：</p>\n<p><img src=\"/images/jvm/image-20200705094149223.png\" alt=\"image-20200705094149223\"></p>\n<p>这里的四者之间是包含关系，不是上层和下层，也不是子系统的继承关系。</p>\n<p>我们通过一个类，获取它不同的加载器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-9:47</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassLoaderTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 获取系统类加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">systemClassLoader</span> <span class=\"hljs-operator\">=</span> ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class=\"hljs-comment\">// 获取其上层的：扩展类加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">extClassLoader</span> <span class=\"hljs-operator\">=</span> systemClassLoader.getParent();<br>        System.out.println(extClassLoader);<br><br>        <span class=\"hljs-comment\">// 试图获取 根加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">bootstrapClassLoader</span> <span class=\"hljs-operator\">=</span> extClassLoader.getParent();<br>        System.out.println(bootstrapClassLoader);<br><br>        <span class=\"hljs-comment\">// 获取自定义加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">classLoader</span> <span class=\"hljs-operator\">=</span> ClassLoaderTest.class.getClassLoader();<br>        System.out.println(classLoader);<br>        <br>        <span class=\"hljs-comment\">// 获取String类型的加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">classLoader1</span> <span class=\"hljs-operator\">=</span> String.class.getClassLoader();<br>        System.out.println(classLoader1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>得到的结果，从结果可以看出 根加载器无法直接通过代码获取，同时目前用户代码所使用的加载器为系统类加载器。同时我们通过获取String类型的加载器，发现是null，那么说明String类型是通过根加载器进行加载的，也就是说Java的核心类库都是使用根加载器进行加载的。</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">sun.misc.Launcher$AppClassLoader<span class=\"hljs-symbol\">@18b4aac2</span><br>sun.misc.Launcher$ExtClassLoader<span class=\"hljs-symbol\">@1540e19d</span><br><span class=\"hljs-literal\">null</span><br>sun.misc.Launcher$AppClassLoader<span class=\"hljs-symbol\">@18b4aac2</span><br><span class=\"hljs-literal\">null</span> <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"虚拟机自带的加载器\"><a href=\"#虚拟机自带的加载器\" class=\"headerlink\" title=\"虚拟机自带的加载器\"></a>虚拟机自带的加载器</h3><h4 id=\"启动类加载器（引导类加载器，Bootstrap-ClassLoader）\"><a href=\"#启动类加载器（引导类加载器，Bootstrap-ClassLoader）\" class=\"headerlink\" title=\"启动类加载器（引导类加载器，Bootstrap ClassLoader）\"></a>启动类加载器（引导类加载器，Bootstrap ClassLoader）</h4><ul>\n<li>这个类加载使用C&#x2F;C++语言实现的，嵌套在JVM内部。</li>\n<li>它用来加载Java的核心库（JAVAHOME&#x2F;jre&#x2F;1ib&#x2F;rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类</li>\n<li>并不继承自ava.lang.ClassLoader，没有父加载器。</li>\n<li>加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</li>\n<li>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</li>\n</ul>\n<h3 id=\"扩展类加载器（Extension-ClassLoader）\"><a href=\"#扩展类加载器（Extension-ClassLoader）\" class=\"headerlink\" title=\"扩展类加载器（Extension ClassLoader）\"></a>扩展类加载器（Extension ClassLoader）</h3><ul>\n<li>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。</li>\n<li>派生于ClassLoader类</li>\n<li>父类加载器为启动类加载器</li>\n<li>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre&#x2F;1ib&#x2F;ext子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。</li>\n</ul>\n<h3 id=\"应用程序类加载器（系统类加载器，AppClassLoader）\"><a href=\"#应用程序类加载器（系统类加载器，AppClassLoader）\" class=\"headerlink\" title=\"应用程序类加载器（系统类加载器，AppClassLoader）\"></a>应用程序类加载器（系统类加载器，AppClassLoader）</h3><ul>\n<li>javI语言编写，由sun.misc.LaunchersAppClassLoader实现</li>\n<li>派生于ClassLoader类</li>\n<li>父类加载器为扩展类加载器</li>\n<li>它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库</li>\n<li>该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载</li>\n<li>通过classLoader#getSystemclassLoader（）方法可以获取到该类加载器</li>\n</ul>\n<h3 id=\"用户自定义类加载器\"><a href=\"#用户自定义类加载器\" class=\"headerlink\" title=\"用户自定义类加载器\"></a>用户自定义类加载器</h3><p>在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。<br>为什么要自定义类加载器？</p>\n<ul>\n<li>隔离加载类</li>\n<li>修改类加载的方式</li>\n<li>扩展加载源</li>\n<li>防止源码泄漏</li>\n</ul>\n<p>用户自定义类加载器实现步骤：</p>\n<ul>\n<li>开发人员可以通过继承抽象类ava.1ang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求</li>\n<li>在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写1oadClass（）方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖1oadclass（）方法，而是建议把自定义的类加载逻辑写在findclass（）方法中</li>\n<li>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URIClassLoader类，这样就可以避免自己去编写findclass（）方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</li>\n</ul>\n<h3 id=\"查看根加载器所能加载的目录\"><a href=\"#查看根加载器所能加载的目录\" class=\"headerlink\" title=\"查看根加载器所能加载的目录\"></a>查看根加载器所能加载的目录</h3><p>刚刚我们通过概念了解到了，根加载器只能够加载 java &#x2F;lib目录下的class，我们通过下面代码验证一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-05-10:17</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassLoaderTest1</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;*********启动类加载器************&quot;</span>);<br>        <span class=\"hljs-comment\">// 获取BootstrapClassLoader 能够加载的API的路径</span><br>        URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();<br>        <span class=\"hljs-keyword\">for</span> (URL url : urls) &#123;<br>            System.out.println(url.toExternalForm());<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 从上面路径中，随意选择一个类，来看看他的类加载器是什么：得到的是null，说明是  根加载器</span><br>        <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">classLoader</span> <span class=\"hljs-operator\">=</span> Provider.class.getClassLoader();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>得到的结果</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">*********启动类加载器************<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/resources.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/rt.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/sunrsasign.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/jsse.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/jce.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/charsets.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>lib/jfr.jar<br><span class=\"hljs-keyword\">file</span>:<span class=\"hljs-regexp\">/E:/</span>Software<span class=\"hljs-regexp\">/JDK1.8/</span>Java<span class=\"hljs-regexp\">/jre/</span>classes<br><span class=\"hljs-keyword\">null</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"关于ClassLoader\"><a href=\"#关于ClassLoader\" class=\"headerlink\" title=\"关于ClassLoader\"></a>关于ClassLoader</h3><p>ClassLoader类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）</p>\n<p><img src=\"/images/jvm/image-20200705103516138.png\" alt=\"image-20200705103516138\"></p>\n<p>sun.misc.Launcher 它是一个java虚拟机的入口应用</p>\n<p><img src=\"/images/jvm/image-20200705103636003.png\" alt=\"image-20200705103636003\"></p>\n<p>获取ClassLoader的途径</p>\n<ul>\n<li>获取当前ClassLoader：clazz.getClassLoader()</li>\n<li>获取当前线程上下文的ClassLoader：Thread.currentThread().getContextClassLoader()</li>\n<li>获取系统的ClassLoader：ClassLoader.getSystemClassLoader()</li>\n<li>获取调用者的ClassLoader：DriverManager.getCallerClassLoader()</li>\n</ul>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p>Java虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。</p>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><ul>\n<li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；</li>\n<li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；</li>\n<li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200705105151258.png\" alt=\"image-20200705105151258\"></p>\n<h3 id=\"双亲委派机制举例\"><a href=\"#双亲委派机制举例\" class=\"headerlink\" title=\"双亲委派机制举例\"></a>双亲委派机制举例</h3><p>当我们加载jdbc.jar 用于实现数据库连接的时候，首先我们需要知道的是 jdbc.jar是基于SPI接口进行实现的，所以在加载的时候，会进行双亲委派，最终从根加载器中加载 SPI核心类，然后在加载SPI接口类，接着在进行反向委派，通过线程上下文类加载器进行实现类 jdbc.jar的加载。</p>\n<p><img src=\"/images/jvm/image-20200705105810107.png\" alt=\"image-20200705105810107\"></p>\n<h3 id=\"沙箱安全机制\"><a href=\"#沙箱安全机制\" class=\"headerlink\" title=\"沙箱安全机制\"></a>沙箱安全机制</h3><p>自定义string类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java\\lang\\String.class），报错信息说没有main方法，就是因为加载的是rt.jar包中的string类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。</p>\n<h3 id=\"双亲委派机制的优势\"><a href=\"#双亲委派机制的优势\" class=\"headerlink\" title=\"双亲委派机制的优势\"></a>双亲委派机制的优势</h3><p>通过上面的例子，我们可以知道，双亲机制可以</p>\n<ul>\n<li>避免类的重复加载</li>\n<li>保护程序安全，防止核心API被随意篡改<ul>\n<li>自定义类：java.lang.String</li>\n<li>自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"如何判断两个class对象是否相同\"><a href=\"#如何判断两个class对象是否相同\" class=\"headerlink\" title=\"如何判断两个class对象是否相同\"></a>如何判断两个class对象是否相同</h3><p>在JVM中表示两个class对象是否为同一个类存在两个必要条件：</p>\n<ul>\n<li>类的完整类名必须一致，包括包名。</li>\n<li>加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。</li>\n</ul>\n<p>换句话说，在JvM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。</p>\n<p>JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</p>\n<h3 id=\"类的主动使用和被动使用\"><a href=\"#类的主动使用和被动使用\" class=\"headerlink\" title=\"类的主动使用和被动使用\"></a>类的主动使用和被动使用</h3><p>Java程序对类的使用方式分为：王动使用和被动使用。<br>主动使用，又分为七种情况：</p>\n<ul>\n<li>创建类的实例</li>\n<li>访问某个类或接口的静态变量，或者对该静态变量赋值</li>\n<li>调用类的静态方法I</li>\n<li>反射（比如：Class.forName（”com.atguigu.Test”））</li>\n<li>初始化一个类的子类</li>\n<li>Java虚拟机启动时被标明为启动类的类</li>\n<li>JDK7开始提供的动态语言支持：</li>\n<li>java.lang.invoke.MethodHandle实例的解析结果REF getStatic、REF putStatic、REF invokeStatic句柄对应的类没有初始化，则初始化</li>\n</ul>\n<p>除了以上七种情况，其他使用Java类的方式都被看作是对类的被动使用，都不会导致类的初始化。</p>\n"},{"title":"java堆","date":"2023-12-03T13:14:03.000Z","_content":"\n# 堆\n\n## 堆的核心概念\n\n堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。\n\n![image-20200706195127740](images/jvm/image-20200706195127740.png)\n\n一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。\n\nJava堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。\n\n- 堆内存的大小是可以调节的。\n\n《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。\n\n所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。\n\n> -Xms10m：最小堆内存\n>\n> -Xmx10m：最大堆内存\n\n下图就是使用：Java VisualVM查看堆空间的内容，通过 jdk bin提供的插件\n\n![image-20200706200739392](images/jvm/image-20200706200739392.png)\n\n《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）\n\n我要说的是：“几乎”所有的对象实例都在这里分配内存。—从实际使用角度看的。\n\n- 因为还有一些对象是在栈上分配的\n\n数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。\n\n在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。\n\n- 也就是触发了GC的时候，才会进行回收\n- 如果堆中对象马上被回收，那么用户线程就会收到影响，因为有stop the word\n\n堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。\n\n![image-20200706201904057](images/jvm/image-20200706201904057.png)\n\n### 堆内存细分\n\nJava 7及之前堆内存逻辑上分为三部分：新生区+养老区+永久区\n\n- Young Generation Space 新生区  Young/New   又被划分为Eden区和Survivor区\n- Tenure generation space 养老区 Old/Tenure\n- Permanent Space永久区   Perm\n\nJava 8及之后堆内存逻辑上分为三部分：新生区养老区+元空间\n- Young Generation Space新生区  Young/New  又被划分为Eden区和Survivor区\n- Tenure generation space 养老区  Old/Tenure\n- Meta Space  元空间   Meta\n\n约定：新生区 -> 新生代 -> 年轻代   、  养老区 -> 老年区 -> 老年代、 永久区 -> 永久代\n\n![image-20200706203419496](images/jvm/image-20200706203419496.png)\n\n堆空间内部结构，JDK1.8之前从永久代  替换成 元空间\n\n![image-20200706203835403](images/jvm/image-20200706203835403.png)\n\n\n\n\n\n## 设置堆内存大小与OOM\n\nJava堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项\"-Xmx\"和\"-Xms\"来进行设置。\n\n- “-Xms\"用于表示堆区的起始内存，等价于-xx:InitialHeapSize\n- “-Xmx\"则用于表示堆区的最大内存，等价于-XX:MaxHeapSize\n\n一旦堆区中的内存大小超过“-xmx\"所指定的最大内存时，将会抛出outofMemoryError异常。\n\n通常会将-Xms和-Xmx两个参数配置相同的值，其目的是**为了能够在ava垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能**。\n\n默认情况下\n\n- 初始内存大小：物理电脑内存大小/64\n\n- 最大内存大小：物理电脑内存大小/4\n\n```java\n/**\n * -Xms 用来设置堆空间（年轻代+老年代）的初始内存大小\n *  -X：是jvm运行参数\n *  ms：memory start\n * -Xmx：用来设置堆空间（年轻代+老年代）的最大内存大小\n *\n * @author: 陌溪\n * @create: 2020-07-06-20:44\n */\npublic class HeapSpaceInitial {\n    public static void main(String[] args) {\n        // 返回Java虚拟机中的堆内存总量\n        long initialMemory = Runtime.getRuntime().totalMemory() / 1024 / 1024;\n        // 返回Java虚拟机试图使用的最大堆内存\n        long maxMemory = Runtime.getRuntime().maxMemory() / 1024 / 1024;\n        System.out.println(\"-Xms:\" + initialMemory + \"M\");\n        System.out.println(\"-Xmx:\" + maxMemory + \"M\");\n    }\n}\n```\n\n输出结果\n\n```\n-Xms:245M\n-Xmx:3614M\n```\n\n如何查看堆内存的内存分配情况\n\n```\njps  ->  jstat -gc 进程id\n```\n\n![image-20200706205756045](images/jvm/image-20200706205756045.png)\n\n```\n-XX:+PrintGCDetails\n```\n\n![image-20200706205821919](images/jvm/image-20200706205821919.png)\n\n### OutOfMemory举例\n\n![image-20200706205947535](images/jvm/image-20200706205947535.png)\n\n![image-20200706210000461](images/jvm/image-20200706210000461.png)\n\n我们简单的写一个OOM例子\n\n```java\n/**\n * OOM测试\n *\n * @author: 陌溪\n * @create: 2020-07-06-21:11\n */\npublic class OOMTest {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        while(true) {\n            list.add(999999999);\n        }\n    }\n}\n\n```\n\n然后设置启动参数\n\n```\n-Xms10m -Xmx:10m\n```\n\n运行后，就出现OOM了，那么我们可以通过 VisualVM这个工具查看具体是什么参数造成的OOM\n\n![image-20200706211652779](images/jvm/image-20200706211652779.png)\n\n## 年轻代与老年代\n\n存储在JVM中的Java对象可以被划分为两类：\n- 一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速\n  - 生命周期短的，及时回收即可\n- 另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致\n\nJava堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（oldGen）\n\n其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）\n\n![image-20200707075847954](images/jvm/image-20200707075847954.png)\n\n下面这参数开发中一般不会调：\n\n![image-20200707080154039](images/jvm/image-20200707080154039.png)\n\n- Eden：From：to ->  8:1:1\n- 新生代：老年代  - >  1 : 2\n\n配置新生代与老年代在堆结构的占比。\n\n- 默认-XX:NewRatio=2，表示新生代占1，老年代占2，新生代占整个堆的1/3\n\n- 可以修改-XX:NewRatio=4，表示新生代占1，老年代占4，新生代占整个堆的1/5\n\n> 当发现在整个项目中，生命周期长的对象偏多，那么就可以通过调整 老年代的大小，来进行调优\n\n在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是8：1：1当然开发人员可以通过选项“-xx:SurvivorRatio”调整这个空间比例。比如-xx:SurvivorRatio=8\n\n几乎所有的Java对象都是在Eden区被new出来的。绝大部分的Java对象的销毁都在新生代进行了。（有些大的对象在Eden区无法存储时候，将直接进入老年代）\n\n>IBM公司的专门研究表明，新生代中80%的对象都是“朝生夕死”的。\n>\n>可以使用选项\"-Xmn\"设置新生代最大内存大小\n>\n>这个参数一般使用默认值就可以了。\n\n![image-20200707084208115](images/jvm/image-20200707084208115.png)\n\n## 图解对象分配过程\n\n### 概念\n\n为新对象分配内存是一件非常严谨和复杂的任务，JM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。\n\n- new的对象先放伊甸园区。此区有大小限制。\n- 当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区\n- 然后将伊甸园中的剩余对象移动到幸存者0区。\n- 如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。\n- 如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。\n- 啥时候能去养老区呢？可以设置次数。默认是15次。\n- 在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理\n- 若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。\n\n可以设置参数：-Xx:MaxTenuringThreshold= N进行设置\n\n### 图解过程\n\n我们创建的对象，一般都是存放在Eden区的，当我们Eden区满了后，就会触发GC操作，一般被称为 YGC / Minor GC操作\n\n![image-20200707084714886](images/jvm/image-20200707084714886.png)\n\n当我们进行一次垃圾收集后，红色的将会被回收，而绿色的还会被占用着，存放在S0(Survivor From)区。同时我们给每个对象设置了一个年龄计数器，一次回收后就是1。\n\n同时Eden区继续存放对象，当Eden区再次存满的时候，又会触发一个MinorGC操作，此时GC将会把 Eden和Survivor From中的对象 进行一次收集，把存活的对象放到 Survivor To区，同时让年龄 + 1\n\n![image-20200707085232646](images/jvm/image-20200707085232646.png)\n\n我们继续不断的进行对象生成 和 垃圾回收，当Survivor中的对象的年龄达到15的时候，将会触发一次 Promotion晋升的操作，也就是将年轻代中的对象  晋升到 老年代中\n\n![image-20200707085737207](images/jvm/image-20200707085737207.png)\n\n### 思考：幸存区区满了后？\n\n特别注意，在Eden区满了的时候，才会触发MinorGC，而幸存者区满了后，不会触发MinorGC操作\n\n如果Survivor区满了后，将会触发一些特殊的规则，也就是可能直接晋升老年代\n\n> 举例：以当兵为例，正常人的晋升可能是 ：  新兵 -> 班长 -> 排长 -> 连长\n>\n> 但是也有可能有些人因为做了非常大的贡献，直接从  新兵 -> 排长\n\n### 对象分配的特殊情况\n\n![image-20200707091058346](images/jvm/image-20200707091058346.png)\n\n### 代码演示对象分配过程\n\n我们不断的创建大对象\n\n```java\n/**\n * 代码演示对象创建过程\n *\n * @author: 陌溪\n * @create: 2020-07-07-9:16\n */\npublic class HeapInstanceTest {\n    byte [] buffer = new byte[new Random().nextInt(1024 * 200)];\n    public static void main(String[] args) throws InterruptedException {\n        ArrayList<HeapInstanceTest> list = new ArrayList<>();\n        while (true) {\n            list.add(new HeapInstanceTest());\n            Thread.sleep(10);\n        }\n    }\n}\n```\n\n然后设置JVM参数\n\n```bash\n-Xms600m -Xmx600m\n```\n\n然后cmd输入下面命令，打开VisualVM图形化界面\n\n```\njvisualvm\n```\n\n然后通过执行上面代码，通过VisualGC进行动态化查看\n\n![垃圾回收](images/jvm/垃圾回收.gif)\n\n最终，在老年代和新生代都满了，就出现OOM\n\n```\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat com.atguigu.java.chapter08.HeapInstanceTest.<init>(HeapInstanceTest.java:13)\n\tat com.atguigu.java.chapter08.HeapInstanceTest.main(HeapInstanceTest.java:17)\n```\n\n### 常用的调优工具\n\n- JDK命令行\n- Eclipse：Memory Analyzer Tool\n- Jconsole\n- Visual VM（实时监控  推荐~）\n- Jprofiler（推荐~）\n- Java Flight Recorder（实时监控）\n- GCViewer\n- GCEasy\n\n### 总结\n\n- 针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to\n- 关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集\n- 新生代采用复制算法的目的：是为了减少内碎片\n\n## Minor GC，MajorGC、Full GC\n\n- Minor GC：新生代的GC\n- Major GC：老年代的GC\n- Full GC：整堆收集，收集整个Java堆和方法区的垃圾收集\n\n>我们都知道，JVM的调优的一个环节，也就是垃圾收集，我们需要尽量的避免垃圾回收，因为在垃圾回收的过程中，容易出现STW的问题\n>\n>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上\n\nJVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）\n\n部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为：\n\n- 新生代收集（MinorGC/YoungGC）：只是新生代的垃圾收集\n- 老年代收集（MajorGC/o1dGC）：只是老年代的圾收集。\n  - 目前，只有CMSGC会有单独收集老年代的行为。\n  - 注意，很多时候Major GC会和Fu11GC混淆使用，需要具体分辨是老年代回收还是整堆回收。\n- 混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。\n  - 目前，只有G1 GC会有这种行为\n\n整堆收集（FullGC）：收集整个java堆和方法区的垃圾收集。\n\n### Minor GC\n\n当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次Minor GC会清理年轻代的内存。）\n\n因为Java对象大多都具备 **朝生夕灭** 的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。\n\nMinor GC会引发STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行\n\n> STW：stop the word\n\n![image-20200707095606813](images/jvm/image-20200707095606813.png)\n\n### Major GC\n\n指发生在老年代的GC，对象从老年代消失时，我们说 “Major Gc” 或 “Full GC” 发生了\n\n出现了MajorGc，经常会伴随至少一次的Minor GC（但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程）\n\n- 也就是在老年代空间不足时，会先尝试触发MinorGc。如果之后空间还不足，则触发Major GC\n\nMajor GC的速度一般会比MinorGc慢1e倍以上，STW的时间更长，如果Major GC后，内存还不足，就报OOM了\n\n### Full GC\n\n触发Fu11GC执行的情况有如下五种：\n\n- 调用System.gc（）时，系统建议执行Fu11GC，但是不必然执行\n- 老年代空间不足\n- 方法区空间不足\n- 通过Minor GC后进入老年代的平均大小大于老年代的可用内存\n- 由Eden区、survivor spacee（From Space）区向survivor spacel（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小\n\n说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些\n\n\n\n### GC 举例\n\n我们编写一个OOM的异常，因为我们在不断的创建字符串，是存放在元空间的\n\n```java\n/**\n * GC测试\n *\n * @author: 陌溪\n * @create: 2020-07-07-10:01\n */\npublic class GCTest {\n    public static void main(String[] args) {\n        int i = 0;\n        try {\n            List<String> list = new ArrayList<>();\n            String a = \"mogu blog\";\n            while(true) {\n                list.add(a);\n                a = a + a;\n                i++;\n            }\n        }catch (Exception e) {\n            e.getStackTrace();\n        }\n    }\n}\n```\n\n设置JVM启动参数\n\n```bash\n-Xms10m -Xmx10m -XX:+PrintGCDetails\n```\n\n打印出的日志\n\n```\n[GC (Allocation Failure) [PSYoungGen: 2038K->500K(2560K)] 2038K->797K(9728K), 0.3532002 secs] [Times: user=0.01 sys=0.00, real=0.36 secs] \n[GC (Allocation Failure) [PSYoungGen: 2108K->480K(2560K)] 2405K->1565K(9728K), 0.0014069 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2288K->0K(2560K)] [ParOldGen: 6845K->5281K(7168K)] 9133K->5281K(9728K), [Metaspace: 3482K->3482K(1056768K)], 0.0058675 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K->0K(2560K)] 5281K->5281K(9728K), 0.0002857 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K->0K(2560K)] [ParOldGen: 5281K->5263K(7168K)] 5281K->5263K(9728K), [Metaspace: 3482K->3482K(1056768K)], 0.0058564 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 2560K, used 60K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 2% used [0x00000000ffd00000,0x00000000ffd0f138,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 7168K, used 5263K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 73% used [0x00000000ff600000,0x00000000ffb23cf0,0x00000000ffd00000)\n Metaspace       used 3514K, capacity 4498K, committed 4864K, reserved 1056768K\n  class space    used 388K, capacity 390K, committed 512K, reserved 1048576K\n  \n  Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOfRange(Arrays.java:3664)\n\tat java.lang.String.<init>(String.java:207)\n\tat java.lang.StringBuilder.toString(StringBuilder.java:407)\n\tat com.atguigu.java.chapter08.GCTest.main(GCTest.java:20)\n```\n\n触发OOM的时候，一定是进行了一次Full GC，因为只有在老年代空间不足时候，才会爆出OOM异常\n\n## 堆空间分代思想\n\n 为什么要把Java堆分代？不分代就不能正常工作了吗？经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。\n\n>新生代：有Eden、两块大小相同的survivor（又称为from/to，s0/s1）构成，to总为空。\n>老年代：存放新生代中经历多次GC仍然存活的对象。\n\n![image-20200707101511025](images/jvm/image-20200707101511025.png)\n\n其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。\n\n![image-20200707101543871](images/jvm/image-20200707101543871.png)\n\n\n\n## 内存分配策略\n\n如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到survivor空间中，并将对象年龄设为1。对象在survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代\n\n对象晋升老年代的年龄阀值，可以通过选项-xx:MaxTenuringThreshold来设置\n\n针对不同年龄段的对象分配原则如下所示：\n\n- 优先分配到Eden\n  - 开发中比较长的字符串或者数组，会直接存在老年代，但是因为新创建的对象 都是 朝生夕死的，所以这个大对象可能也很快被回收，但是因为老年代触发Major GC的次数比 Minor GC要更少，因此可能回收起来就会比较慢\n- 大对象直接分配到老年代\n  - 尽量避免程序中出现过多的大对象\n- 长期存活的对象分配到老年代\n- 动态对象年龄判断\n  - 如果survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold 中要求的年龄。\n\n空间分配担保： -Xx:HandlePromotionFailure\n\n- 也就是经过Minor GC后，所有的对象都存活，因为Survivor比较小，所以就需要将Survivor无法容纳的对象，存放到老年代中。\n\n## 为对象分配内存：TLAB\n\n### 问题：堆空间都是共享的么？\n\n不一定，因为还有TLAB这个概念，在堆中划分出一块区域，为每个线程所独占\n\n### 为什么有TLAB？\n\nTLAB：Thread Local Allocation Buffer，也就是为每个线程单独分配了一个缓冲区\n\n堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据\n\n由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的\n\n为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。\n\n### 什么是TLAB\n\n从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。\n\n多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。\n\n据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。\n\n![image-20200707103547712](images/jvm/image-20200707103547712.png)\n\n尽管不是所有的对象实例都能够在TLAB中成功分配内存，但JVM确实是将TLAB作为内存分配的首选。\n\n在程序中，开发人员可以通过选项“-Xx:UseTLAB”设置是否开启TLAB空间。\n\n默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1，当然我们可以通过选项“-Xx:TLABWasteTargetPercent”设置TLAB空间所占用Eden空间的百分比大小。\n\n一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。\n\n### TLAB分配过程\n\n对象首先是通过TLAB开辟空间，如果不能放入，那么需要通过Eden来进行分配\n\n![image-20200707104253530](images/jvm/image-20200707104253530.png)\n\n## 小结：堆空间的参数设置\n\n- -XX：+PrintFlagsInitial：查看所有的参数的默认初始值\n- -XX：+PrintFlagsFinal：查看所有的参数的最终值（可能会存在修改，不再是初始值）\n- -Xms：初始堆空间内存（默认为物理内存的1/64）\n- -Xmx：最大堆空间内存（默认为物理内存的1/4）\n- -Xmn：设置新生代的大小。（初始值及最大值）\n- -XX:NewRatio：配置新生代与老年代在堆结构的占比\n\n- -XX:SurvivorRatio：设置新生代中Eden和S0/S1空间的比例\n- -XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄\n- -XX：+PrintGCDetails：输出详细的GC处理日志\n  - 打印gc简要信息：①-Xx：+PrintGC  ② - verbose:gc\n- -XX:HandlePromotionFalilure：是否设置空间分配担保\n\n\n\n在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。I\n\n- 如果大于，则此次Minor GC是安全的\n- 如果小于，则虚拟机会查看-xx:HandlePromotionFailure设置值是否允担保失败。\n  - 如果HandlePromotionFailure=true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。\n  - 如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；\n  - 如果小于，则改为进行一次FullGC。\n  - 如果HandlePromotionFailure=false，则改为进行一次Ful1 Gc。\n\n在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行FullGC。\n\n## 堆是分配对象的唯一选择么？\n\n### 逃逸分析\n\n在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：\n\n随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。\n\n在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。\n\n此外，前面提到的基于openJDk深度定制的TaoBaovm，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。\n\n如何将堆上的对象分配到栈，需要使用逃逸分析手段。\n\n这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。逃逸分析的基本行为就是分析对象动态作用域：\n\n- 当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。\n- 当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。\n\n#### 逃逸分析举例\n\n没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧，也就是发生逃逸分析\n\n```java\npublic void my_method() {\n    V v = new V();\n    // use v\n    // ....\n    v = null;\n}\n```\n\n针对下面的代码\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n如果想要StringBuffer sb不发生逃逸，可以这样写\n\n```java\npublic static String createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n完整的逃逸分析代码举例\n\n```java\n/**\n * 逃逸分析\n * 如何快速的判断是否发生了逃逸分析，大家就看new的对象是否在方法外被调用。\n * @author: 陌溪\n * @create: 2020-07-07-20:05\n */\npublic class EscapeAnalysis {\n\n    public EscapeAnalysis obj;\n\n    /**\n     * 方法返回EscapeAnalysis对象，发生逃逸\n     * @return\n     */\n    public EscapeAnalysis getInstance() {\n        return obj == null ? new EscapeAnalysis():obj;\n    }\n\n    /**\n     * 为成员属性赋值，发生逃逸\n     */\n    public void setObj() {\n        this.obj = new EscapeAnalysis();\n    }\n\n    /**\n     * 对象的作用于仅在当前方法中有效，没有发生逃逸\n     */\n    public void useEscapeAnalysis() {\n        EscapeAnalysis e = new EscapeAnalysis();\n    }\n\n    /**\n     * 引用成员变量的值，发生逃逸\n     */\n    public void useEscapeAnalysis2() {\n        EscapeAnalysis e = getInstance();\n        // getInstance().XXX  发生逃逸\n    }\n}\n```\n\n#### 参数设置\n\n在JDK 1.7 版本之后，HotSpot中默认就已经开启了逃逸分析\n\n如果使用的是较早的版本，开发人员则可以通过：\n\n- 选项“-xx：+DoEscapeAnalysis\"显式开启逃逸分析\n- 通过选项“-xx：+PrintEscapeAnalysis\"查看逃逸分析的筛选结果\n\n#### 结论\n\n开发中能使用局部变量的，就不要使用在方法外定义。\n\n使用逃逸分析，编译器可以对代码做如下优化：\n\n- 栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配\n- 同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。\n- 分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。\n\n### 栈上分配\n\nJIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。\n\n常见的栈上分配的场景\n\n> 在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。\n\n#### 举例\n\n我们通过举例来说明 开启逃逸分析 和 未开启逃逸分析时候的情况\n\n```java\n/**\n * 栈上分配\n * -Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n * @author: 陌溪\n * @create: 2020-07-07-20:23\n */\nclass User {\n    private String name;\n    private String age;\n    private String gender;\n    private String phone;\n}\npublic class StackAllocation {\n    public static void main(String[] args) throws InterruptedException {\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 100000000; i++) {\n            alloc();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"花费的时间为：\" + (end - start) + \" ms\");\n\n        // 为了方便查看堆内存中对象个数，线程sleep\n        Thread.sleep(10000000);\n    }\n\n    private static void alloc() {\n        // 未发生逃逸\n        User user = new User(); \n    }\n}\n```\n\n设置JVM参数，表示未开启逃逸分析\n\n```\n-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n```\n\n运行结果，同时还触发了GC操作\n\n```\n花费的时间为：664 ms\n```\n\n然后查看内存的情况，发现有大量的User存储在堆中\n\n![image-20200707203038615](images/jvm/image-20200707203038615.png)\n\n\n\n我们在开启逃逸分析\n\n```\n-Xmx1G -Xms1G -XX:+DoEscapeAnalysis -XX:+PrintGCDetails\n```\n\n然后查看运行时间，我们能够发现花费的时间快速减少，同时不会发生GC操作\n\n```\n花费的时间为：5 ms\n```\n\n在看内存情况，我们发现只有很少的User对象，说明User未发生逃逸，因为它存储在栈中，随着栈的销毁而消失\n\n![image-20200707203441718](images/jvm/image-20200707203441718.png)\n\n\n\n### 同步省略\n\n线程同步的代价是相当高的，同步的后果是降低并发性和性能。\n\n在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。\n\n例如下面的代码\n\n```java\npublic void f() {\n    Object hellis = new Object();\n    synchronized(hellis) {\n        System.out.println(hellis);\n    }\n}\n```\n\n代码中对hellis这个对象加锁，但是hellis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉，优化成：\n\n```java\npublic void f() {\n    Object hellis = new Object();\n\tSystem.out.println(hellis);\n}\n```\n\n我们将其转换成字节码\n\n![image-20200707205634266](images/jvm/image-20200707205634266.png)\n\n### 分离对象和标量替换\n\n标量（scalar）是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。\n\n相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。\n\n在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。\n\n```java\npublic static void main(String args[]) {\n    alloc();\n}\nclass Point {\n    private int x;\n    private int y;\n}\nprivate static void alloc() {\n    Point point = new Point(1,2);\n    System.out.println(\"point.x\" + point.x + \";point.y\" + point.y);\n}\n```\n\n以上代码，经过标量替换后，就会变成\n\n```java\nprivate static void alloc() {\n    int x = 1;\n    int y = 2;\n    System.out.println(\"point.x = \" + x + \"; point.y=\" + y);\n}\n```\n\n可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。\n标量替换为栈上分配提供了很好的基础。\n\n### 代码优化之标量替换\n\n上述代码在主函数中进行了1亿次alloc。调用进行对象创建，由于User对象实例需要占据约16字节的空间，因此累计分配空间达到将近1.5GB。如果堆空间小于这个值，就必然会发生GC。使用如下参数运行上述代码：\n\n```bash\n-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations\n```\n\n这里设置参数如下：\n\n- 参数-server：启动Server模式，因为在server模式下，才可以启用逃逸分析。\n- 参数-XX:+DoEscapeAnalysis：启用逃逸分析\n- 参数-Xmx10m：指定了堆空间最大为10MB\n- 参数-XX:+PrintGC：将打印Gc日志\n- 参数一xx：+EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有id和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配\n\n### 逃逸分析的不足\n\n关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟。\n\n其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。\n一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。\n\n虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JvM设计者的选择。据我所知，oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。\n\n目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。\n\n## 小结\n\n年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。\n\n老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGc。\n\n当GC发生在老年代时则被称为MajorGc或者FullGC。一般的，MinorGc的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。","source":"_posts/jvm/java堆.md","raw":"---\ntitle: java堆\ndate: 2023-12-03 21:14:03\ntags: jvm\ncategories: java\n---\n\n# 堆\n\n## 堆的核心概念\n\n堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。\n\n![image-20200706195127740](images/jvm/image-20200706195127740.png)\n\n一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。\n\nJava堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。\n\n- 堆内存的大小是可以调节的。\n\n《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。\n\n所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。\n\n> -Xms10m：最小堆内存\n>\n> -Xmx10m：最大堆内存\n\n下图就是使用：Java VisualVM查看堆空间的内容，通过 jdk bin提供的插件\n\n![image-20200706200739392](images/jvm/image-20200706200739392.png)\n\n《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）\n\n我要说的是：“几乎”所有的对象实例都在这里分配内存。—从实际使用角度看的。\n\n- 因为还有一些对象是在栈上分配的\n\n数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。\n\n在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。\n\n- 也就是触发了GC的时候，才会进行回收\n- 如果堆中对象马上被回收，那么用户线程就会收到影响，因为有stop the word\n\n堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。\n\n![image-20200706201904057](images/jvm/image-20200706201904057.png)\n\n### 堆内存细分\n\nJava 7及之前堆内存逻辑上分为三部分：新生区+养老区+永久区\n\n- Young Generation Space 新生区  Young/New   又被划分为Eden区和Survivor区\n- Tenure generation space 养老区 Old/Tenure\n- Permanent Space永久区   Perm\n\nJava 8及之后堆内存逻辑上分为三部分：新生区养老区+元空间\n- Young Generation Space新生区  Young/New  又被划分为Eden区和Survivor区\n- Tenure generation space 养老区  Old/Tenure\n- Meta Space  元空间   Meta\n\n约定：新生区 -> 新生代 -> 年轻代   、  养老区 -> 老年区 -> 老年代、 永久区 -> 永久代\n\n![image-20200706203419496](images/jvm/image-20200706203419496.png)\n\n堆空间内部结构，JDK1.8之前从永久代  替换成 元空间\n\n![image-20200706203835403](images/jvm/image-20200706203835403.png)\n\n\n\n\n\n## 设置堆内存大小与OOM\n\nJava堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项\"-Xmx\"和\"-Xms\"来进行设置。\n\n- “-Xms\"用于表示堆区的起始内存，等价于-xx:InitialHeapSize\n- “-Xmx\"则用于表示堆区的最大内存，等价于-XX:MaxHeapSize\n\n一旦堆区中的内存大小超过“-xmx\"所指定的最大内存时，将会抛出outofMemoryError异常。\n\n通常会将-Xms和-Xmx两个参数配置相同的值，其目的是**为了能够在ava垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能**。\n\n默认情况下\n\n- 初始内存大小：物理电脑内存大小/64\n\n- 最大内存大小：物理电脑内存大小/4\n\n```java\n/**\n * -Xms 用来设置堆空间（年轻代+老年代）的初始内存大小\n *  -X：是jvm运行参数\n *  ms：memory start\n * -Xmx：用来设置堆空间（年轻代+老年代）的最大内存大小\n *\n * @author: 陌溪\n * @create: 2020-07-06-20:44\n */\npublic class HeapSpaceInitial {\n    public static void main(String[] args) {\n        // 返回Java虚拟机中的堆内存总量\n        long initialMemory = Runtime.getRuntime().totalMemory() / 1024 / 1024;\n        // 返回Java虚拟机试图使用的最大堆内存\n        long maxMemory = Runtime.getRuntime().maxMemory() / 1024 / 1024;\n        System.out.println(\"-Xms:\" + initialMemory + \"M\");\n        System.out.println(\"-Xmx:\" + maxMemory + \"M\");\n    }\n}\n```\n\n输出结果\n\n```\n-Xms:245M\n-Xmx:3614M\n```\n\n如何查看堆内存的内存分配情况\n\n```\njps  ->  jstat -gc 进程id\n```\n\n![image-20200706205756045](images/jvm/image-20200706205756045.png)\n\n```\n-XX:+PrintGCDetails\n```\n\n![image-20200706205821919](images/jvm/image-20200706205821919.png)\n\n### OutOfMemory举例\n\n![image-20200706205947535](images/jvm/image-20200706205947535.png)\n\n![image-20200706210000461](images/jvm/image-20200706210000461.png)\n\n我们简单的写一个OOM例子\n\n```java\n/**\n * OOM测试\n *\n * @author: 陌溪\n * @create: 2020-07-06-21:11\n */\npublic class OOMTest {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        while(true) {\n            list.add(999999999);\n        }\n    }\n}\n\n```\n\n然后设置启动参数\n\n```\n-Xms10m -Xmx:10m\n```\n\n运行后，就出现OOM了，那么我们可以通过 VisualVM这个工具查看具体是什么参数造成的OOM\n\n![image-20200706211652779](images/jvm/image-20200706211652779.png)\n\n## 年轻代与老年代\n\n存储在JVM中的Java对象可以被划分为两类：\n- 一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速\n  - 生命周期短的，及时回收即可\n- 另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致\n\nJava堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（oldGen）\n\n其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）\n\n![image-20200707075847954](images/jvm/image-20200707075847954.png)\n\n下面这参数开发中一般不会调：\n\n![image-20200707080154039](images/jvm/image-20200707080154039.png)\n\n- Eden：From：to ->  8:1:1\n- 新生代：老年代  - >  1 : 2\n\n配置新生代与老年代在堆结构的占比。\n\n- 默认-XX:NewRatio=2，表示新生代占1，老年代占2，新生代占整个堆的1/3\n\n- 可以修改-XX:NewRatio=4，表示新生代占1，老年代占4，新生代占整个堆的1/5\n\n> 当发现在整个项目中，生命周期长的对象偏多，那么就可以通过调整 老年代的大小，来进行调优\n\n在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是8：1：1当然开发人员可以通过选项“-xx:SurvivorRatio”调整这个空间比例。比如-xx:SurvivorRatio=8\n\n几乎所有的Java对象都是在Eden区被new出来的。绝大部分的Java对象的销毁都在新生代进行了。（有些大的对象在Eden区无法存储时候，将直接进入老年代）\n\n>IBM公司的专门研究表明，新生代中80%的对象都是“朝生夕死”的。\n>\n>可以使用选项\"-Xmn\"设置新生代最大内存大小\n>\n>这个参数一般使用默认值就可以了。\n\n![image-20200707084208115](images/jvm/image-20200707084208115.png)\n\n## 图解对象分配过程\n\n### 概念\n\n为新对象分配内存是一件非常严谨和复杂的任务，JM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。\n\n- new的对象先放伊甸园区。此区有大小限制。\n- 当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区\n- 然后将伊甸园中的剩余对象移动到幸存者0区。\n- 如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。\n- 如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。\n- 啥时候能去养老区呢？可以设置次数。默认是15次。\n- 在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理\n- 若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。\n\n可以设置参数：-Xx:MaxTenuringThreshold= N进行设置\n\n### 图解过程\n\n我们创建的对象，一般都是存放在Eden区的，当我们Eden区满了后，就会触发GC操作，一般被称为 YGC / Minor GC操作\n\n![image-20200707084714886](images/jvm/image-20200707084714886.png)\n\n当我们进行一次垃圾收集后，红色的将会被回收，而绿色的还会被占用着，存放在S0(Survivor From)区。同时我们给每个对象设置了一个年龄计数器，一次回收后就是1。\n\n同时Eden区继续存放对象，当Eden区再次存满的时候，又会触发一个MinorGC操作，此时GC将会把 Eden和Survivor From中的对象 进行一次收集，把存活的对象放到 Survivor To区，同时让年龄 + 1\n\n![image-20200707085232646](images/jvm/image-20200707085232646.png)\n\n我们继续不断的进行对象生成 和 垃圾回收，当Survivor中的对象的年龄达到15的时候，将会触发一次 Promotion晋升的操作，也就是将年轻代中的对象  晋升到 老年代中\n\n![image-20200707085737207](images/jvm/image-20200707085737207.png)\n\n### 思考：幸存区区满了后？\n\n特别注意，在Eden区满了的时候，才会触发MinorGC，而幸存者区满了后，不会触发MinorGC操作\n\n如果Survivor区满了后，将会触发一些特殊的规则，也就是可能直接晋升老年代\n\n> 举例：以当兵为例，正常人的晋升可能是 ：  新兵 -> 班长 -> 排长 -> 连长\n>\n> 但是也有可能有些人因为做了非常大的贡献，直接从  新兵 -> 排长\n\n### 对象分配的特殊情况\n\n![image-20200707091058346](images/jvm/image-20200707091058346.png)\n\n### 代码演示对象分配过程\n\n我们不断的创建大对象\n\n```java\n/**\n * 代码演示对象创建过程\n *\n * @author: 陌溪\n * @create: 2020-07-07-9:16\n */\npublic class HeapInstanceTest {\n    byte [] buffer = new byte[new Random().nextInt(1024 * 200)];\n    public static void main(String[] args) throws InterruptedException {\n        ArrayList<HeapInstanceTest> list = new ArrayList<>();\n        while (true) {\n            list.add(new HeapInstanceTest());\n            Thread.sleep(10);\n        }\n    }\n}\n```\n\n然后设置JVM参数\n\n```bash\n-Xms600m -Xmx600m\n```\n\n然后cmd输入下面命令，打开VisualVM图形化界面\n\n```\njvisualvm\n```\n\n然后通过执行上面代码，通过VisualGC进行动态化查看\n\n![垃圾回收](images/jvm/垃圾回收.gif)\n\n最终，在老年代和新生代都满了，就出现OOM\n\n```\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat com.atguigu.java.chapter08.HeapInstanceTest.<init>(HeapInstanceTest.java:13)\n\tat com.atguigu.java.chapter08.HeapInstanceTest.main(HeapInstanceTest.java:17)\n```\n\n### 常用的调优工具\n\n- JDK命令行\n- Eclipse：Memory Analyzer Tool\n- Jconsole\n- Visual VM（实时监控  推荐~）\n- Jprofiler（推荐~）\n- Java Flight Recorder（实时监控）\n- GCViewer\n- GCEasy\n\n### 总结\n\n- 针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to\n- 关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集\n- 新生代采用复制算法的目的：是为了减少内碎片\n\n## Minor GC，MajorGC、Full GC\n\n- Minor GC：新生代的GC\n- Major GC：老年代的GC\n- Full GC：整堆收集，收集整个Java堆和方法区的垃圾收集\n\n>我们都知道，JVM的调优的一个环节，也就是垃圾收集，我们需要尽量的避免垃圾回收，因为在垃圾回收的过程中，容易出现STW的问题\n>\n>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上\n\nJVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）\n\n部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为：\n\n- 新生代收集（MinorGC/YoungGC）：只是新生代的垃圾收集\n- 老年代收集（MajorGC/o1dGC）：只是老年代的圾收集。\n  - 目前，只有CMSGC会有单独收集老年代的行为。\n  - 注意，很多时候Major GC会和Fu11GC混淆使用，需要具体分辨是老年代回收还是整堆回收。\n- 混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。\n  - 目前，只有G1 GC会有这种行为\n\n整堆收集（FullGC）：收集整个java堆和方法区的垃圾收集。\n\n### Minor GC\n\n当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次Minor GC会清理年轻代的内存。）\n\n因为Java对象大多都具备 **朝生夕灭** 的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。\n\nMinor GC会引发STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行\n\n> STW：stop the word\n\n![image-20200707095606813](images/jvm/image-20200707095606813.png)\n\n### Major GC\n\n指发生在老年代的GC，对象从老年代消失时，我们说 “Major Gc” 或 “Full GC” 发生了\n\n出现了MajorGc，经常会伴随至少一次的Minor GC（但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程）\n\n- 也就是在老年代空间不足时，会先尝试触发MinorGc。如果之后空间还不足，则触发Major GC\n\nMajor GC的速度一般会比MinorGc慢1e倍以上，STW的时间更长，如果Major GC后，内存还不足，就报OOM了\n\n### Full GC\n\n触发Fu11GC执行的情况有如下五种：\n\n- 调用System.gc（）时，系统建议执行Fu11GC，但是不必然执行\n- 老年代空间不足\n- 方法区空间不足\n- 通过Minor GC后进入老年代的平均大小大于老年代的可用内存\n- 由Eden区、survivor spacee（From Space）区向survivor spacel（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小\n\n说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些\n\n\n\n### GC 举例\n\n我们编写一个OOM的异常，因为我们在不断的创建字符串，是存放在元空间的\n\n```java\n/**\n * GC测试\n *\n * @author: 陌溪\n * @create: 2020-07-07-10:01\n */\npublic class GCTest {\n    public static void main(String[] args) {\n        int i = 0;\n        try {\n            List<String> list = new ArrayList<>();\n            String a = \"mogu blog\";\n            while(true) {\n                list.add(a);\n                a = a + a;\n                i++;\n            }\n        }catch (Exception e) {\n            e.getStackTrace();\n        }\n    }\n}\n```\n\n设置JVM启动参数\n\n```bash\n-Xms10m -Xmx10m -XX:+PrintGCDetails\n```\n\n打印出的日志\n\n```\n[GC (Allocation Failure) [PSYoungGen: 2038K->500K(2560K)] 2038K->797K(9728K), 0.3532002 secs] [Times: user=0.01 sys=0.00, real=0.36 secs] \n[GC (Allocation Failure) [PSYoungGen: 2108K->480K(2560K)] 2405K->1565K(9728K), 0.0014069 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2288K->0K(2560K)] [ParOldGen: 6845K->5281K(7168K)] 9133K->5281K(9728K), [Metaspace: 3482K->3482K(1056768K)], 0.0058675 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K->0K(2560K)] 5281K->5281K(9728K), 0.0002857 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K->0K(2560K)] [ParOldGen: 5281K->5263K(7168K)] 5281K->5263K(9728K), [Metaspace: 3482K->3482K(1056768K)], 0.0058564 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 2560K, used 60K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 2% used [0x00000000ffd00000,0x00000000ffd0f138,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 7168K, used 5263K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 73% used [0x00000000ff600000,0x00000000ffb23cf0,0x00000000ffd00000)\n Metaspace       used 3514K, capacity 4498K, committed 4864K, reserved 1056768K\n  class space    used 388K, capacity 390K, committed 512K, reserved 1048576K\n  \n  Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOfRange(Arrays.java:3664)\n\tat java.lang.String.<init>(String.java:207)\n\tat java.lang.StringBuilder.toString(StringBuilder.java:407)\n\tat com.atguigu.java.chapter08.GCTest.main(GCTest.java:20)\n```\n\n触发OOM的时候，一定是进行了一次Full GC，因为只有在老年代空间不足时候，才会爆出OOM异常\n\n## 堆空间分代思想\n\n 为什么要把Java堆分代？不分代就不能正常工作了吗？经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。\n\n>新生代：有Eden、两块大小相同的survivor（又称为from/to，s0/s1）构成，to总为空。\n>老年代：存放新生代中经历多次GC仍然存活的对象。\n\n![image-20200707101511025](images/jvm/image-20200707101511025.png)\n\n其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。\n\n![image-20200707101543871](images/jvm/image-20200707101543871.png)\n\n\n\n## 内存分配策略\n\n如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到survivor空间中，并将对象年龄设为1。对象在survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代\n\n对象晋升老年代的年龄阀值，可以通过选项-xx:MaxTenuringThreshold来设置\n\n针对不同年龄段的对象分配原则如下所示：\n\n- 优先分配到Eden\n  - 开发中比较长的字符串或者数组，会直接存在老年代，但是因为新创建的对象 都是 朝生夕死的，所以这个大对象可能也很快被回收，但是因为老年代触发Major GC的次数比 Minor GC要更少，因此可能回收起来就会比较慢\n- 大对象直接分配到老年代\n  - 尽量避免程序中出现过多的大对象\n- 长期存活的对象分配到老年代\n- 动态对象年龄判断\n  - 如果survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold 中要求的年龄。\n\n空间分配担保： -Xx:HandlePromotionFailure\n\n- 也就是经过Minor GC后，所有的对象都存活，因为Survivor比较小，所以就需要将Survivor无法容纳的对象，存放到老年代中。\n\n## 为对象分配内存：TLAB\n\n### 问题：堆空间都是共享的么？\n\n不一定，因为还有TLAB这个概念，在堆中划分出一块区域，为每个线程所独占\n\n### 为什么有TLAB？\n\nTLAB：Thread Local Allocation Buffer，也就是为每个线程单独分配了一个缓冲区\n\n堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据\n\n由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的\n\n为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。\n\n### 什么是TLAB\n\n从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。\n\n多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。\n\n据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。\n\n![image-20200707103547712](images/jvm/image-20200707103547712.png)\n\n尽管不是所有的对象实例都能够在TLAB中成功分配内存，但JVM确实是将TLAB作为内存分配的首选。\n\n在程序中，开发人员可以通过选项“-Xx:UseTLAB”设置是否开启TLAB空间。\n\n默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1，当然我们可以通过选项“-Xx:TLABWasteTargetPercent”设置TLAB空间所占用Eden空间的百分比大小。\n\n一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。\n\n### TLAB分配过程\n\n对象首先是通过TLAB开辟空间，如果不能放入，那么需要通过Eden来进行分配\n\n![image-20200707104253530](images/jvm/image-20200707104253530.png)\n\n## 小结：堆空间的参数设置\n\n- -XX：+PrintFlagsInitial：查看所有的参数的默认初始值\n- -XX：+PrintFlagsFinal：查看所有的参数的最终值（可能会存在修改，不再是初始值）\n- -Xms：初始堆空间内存（默认为物理内存的1/64）\n- -Xmx：最大堆空间内存（默认为物理内存的1/4）\n- -Xmn：设置新生代的大小。（初始值及最大值）\n- -XX:NewRatio：配置新生代与老年代在堆结构的占比\n\n- -XX:SurvivorRatio：设置新生代中Eden和S0/S1空间的比例\n- -XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄\n- -XX：+PrintGCDetails：输出详细的GC处理日志\n  - 打印gc简要信息：①-Xx：+PrintGC  ② - verbose:gc\n- -XX:HandlePromotionFalilure：是否设置空间分配担保\n\n\n\n在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。I\n\n- 如果大于，则此次Minor GC是安全的\n- 如果小于，则虚拟机会查看-xx:HandlePromotionFailure设置值是否允担保失败。\n  - 如果HandlePromotionFailure=true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。\n  - 如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；\n  - 如果小于，则改为进行一次FullGC。\n  - 如果HandlePromotionFailure=false，则改为进行一次Ful1 Gc。\n\n在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行FullGC。\n\n## 堆是分配对象的唯一选择么？\n\n### 逃逸分析\n\n在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：\n\n随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。\n\n在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。\n\n此外，前面提到的基于openJDk深度定制的TaoBaovm，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。\n\n如何将堆上的对象分配到栈，需要使用逃逸分析手段。\n\n这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。逃逸分析的基本行为就是分析对象动态作用域：\n\n- 当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。\n- 当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。\n\n#### 逃逸分析举例\n\n没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧，也就是发生逃逸分析\n\n```java\npublic void my_method() {\n    V v = new V();\n    // use v\n    // ....\n    v = null;\n}\n```\n\n针对下面的代码\n\n```java\npublic static StringBuffer createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n```\n\n如果想要StringBuffer sb不发生逃逸，可以这样写\n\n```java\npublic static String createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n```\n\n完整的逃逸分析代码举例\n\n```java\n/**\n * 逃逸分析\n * 如何快速的判断是否发生了逃逸分析，大家就看new的对象是否在方法外被调用。\n * @author: 陌溪\n * @create: 2020-07-07-20:05\n */\npublic class EscapeAnalysis {\n\n    public EscapeAnalysis obj;\n\n    /**\n     * 方法返回EscapeAnalysis对象，发生逃逸\n     * @return\n     */\n    public EscapeAnalysis getInstance() {\n        return obj == null ? new EscapeAnalysis():obj;\n    }\n\n    /**\n     * 为成员属性赋值，发生逃逸\n     */\n    public void setObj() {\n        this.obj = new EscapeAnalysis();\n    }\n\n    /**\n     * 对象的作用于仅在当前方法中有效，没有发生逃逸\n     */\n    public void useEscapeAnalysis() {\n        EscapeAnalysis e = new EscapeAnalysis();\n    }\n\n    /**\n     * 引用成员变量的值，发生逃逸\n     */\n    public void useEscapeAnalysis2() {\n        EscapeAnalysis e = getInstance();\n        // getInstance().XXX  发生逃逸\n    }\n}\n```\n\n#### 参数设置\n\n在JDK 1.7 版本之后，HotSpot中默认就已经开启了逃逸分析\n\n如果使用的是较早的版本，开发人员则可以通过：\n\n- 选项“-xx：+DoEscapeAnalysis\"显式开启逃逸分析\n- 通过选项“-xx：+PrintEscapeAnalysis\"查看逃逸分析的筛选结果\n\n#### 结论\n\n开发中能使用局部变量的，就不要使用在方法外定义。\n\n使用逃逸分析，编译器可以对代码做如下优化：\n\n- 栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配\n- 同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。\n- 分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。\n\n### 栈上分配\n\nJIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。\n\n常见的栈上分配的场景\n\n> 在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。\n\n#### 举例\n\n我们通过举例来说明 开启逃逸分析 和 未开启逃逸分析时候的情况\n\n```java\n/**\n * 栈上分配\n * -Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n * @author: 陌溪\n * @create: 2020-07-07-20:23\n */\nclass User {\n    private String name;\n    private String age;\n    private String gender;\n    private String phone;\n}\npublic class StackAllocation {\n    public static void main(String[] args) throws InterruptedException {\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 100000000; i++) {\n            alloc();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"花费的时间为：\" + (end - start) + \" ms\");\n\n        // 为了方便查看堆内存中对象个数，线程sleep\n        Thread.sleep(10000000);\n    }\n\n    private static void alloc() {\n        // 未发生逃逸\n        User user = new User(); \n    }\n}\n```\n\n设置JVM参数，表示未开启逃逸分析\n\n```\n-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n```\n\n运行结果，同时还触发了GC操作\n\n```\n花费的时间为：664 ms\n```\n\n然后查看内存的情况，发现有大量的User存储在堆中\n\n![image-20200707203038615](images/jvm/image-20200707203038615.png)\n\n\n\n我们在开启逃逸分析\n\n```\n-Xmx1G -Xms1G -XX:+DoEscapeAnalysis -XX:+PrintGCDetails\n```\n\n然后查看运行时间，我们能够发现花费的时间快速减少，同时不会发生GC操作\n\n```\n花费的时间为：5 ms\n```\n\n在看内存情况，我们发现只有很少的User对象，说明User未发生逃逸，因为它存储在栈中，随着栈的销毁而消失\n\n![image-20200707203441718](images/jvm/image-20200707203441718.png)\n\n\n\n### 同步省略\n\n线程同步的代价是相当高的，同步的后果是降低并发性和性能。\n\n在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。\n\n例如下面的代码\n\n```java\npublic void f() {\n    Object hellis = new Object();\n    synchronized(hellis) {\n        System.out.println(hellis);\n    }\n}\n```\n\n代码中对hellis这个对象加锁，但是hellis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉，优化成：\n\n```java\npublic void f() {\n    Object hellis = new Object();\n\tSystem.out.println(hellis);\n}\n```\n\n我们将其转换成字节码\n\n![image-20200707205634266](images/jvm/image-20200707205634266.png)\n\n### 分离对象和标量替换\n\n标量（scalar）是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。\n\n相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。\n\n在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。\n\n```java\npublic static void main(String args[]) {\n    alloc();\n}\nclass Point {\n    private int x;\n    private int y;\n}\nprivate static void alloc() {\n    Point point = new Point(1,2);\n    System.out.println(\"point.x\" + point.x + \";point.y\" + point.y);\n}\n```\n\n以上代码，经过标量替换后，就会变成\n\n```java\nprivate static void alloc() {\n    int x = 1;\n    int y = 2;\n    System.out.println(\"point.x = \" + x + \"; point.y=\" + y);\n}\n```\n\n可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。\n标量替换为栈上分配提供了很好的基础。\n\n### 代码优化之标量替换\n\n上述代码在主函数中进行了1亿次alloc。调用进行对象创建，由于User对象实例需要占据约16字节的空间，因此累计分配空间达到将近1.5GB。如果堆空间小于这个值，就必然会发生GC。使用如下参数运行上述代码：\n\n```bash\n-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations\n```\n\n这里设置参数如下：\n\n- 参数-server：启动Server模式，因为在server模式下，才可以启用逃逸分析。\n- 参数-XX:+DoEscapeAnalysis：启用逃逸分析\n- 参数-Xmx10m：指定了堆空间最大为10MB\n- 参数-XX:+PrintGC：将打印Gc日志\n- 参数一xx：+EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有id和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配\n\n### 逃逸分析的不足\n\n关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟。\n\n其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。\n一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。\n\n虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JvM设计者的选择。据我所知，oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。\n\n目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。\n\n## 小结\n\n年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。\n\n老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGc。\n\n当GC发生在老年代时则被称为MajorGc或者FullGC。一般的，MinorGc的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。","slug":"jvm/java堆","published":1,"updated":"2023-12-09T05:52:52.648Z","_id":"clpxlg52u000cawwf5mfj6djw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><h2 id=\"堆的核心概念\"><a href=\"#堆的核心概念\" class=\"headerlink\" title=\"堆的核心概念\"></a>堆的核心概念</h2><p>堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。</p>\n<p><img src=\"/images/jvm/image-20200706195127740.png\" alt=\"image-20200706195127740\"></p>\n<p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</p>\n<p>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。</p>\n<ul>\n<li>堆内存的大小是可以调节的。</li>\n</ul>\n<p>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>\n<p>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。</p>\n<blockquote>\n<p>-Xms10m：最小堆内存</p>\n<p>-Xmx10m：最大堆内存</p>\n</blockquote>\n<p>下图就是使用：Java VisualVM查看堆空间的内容，通过 jdk bin提供的插件</p>\n<p><img src=\"/images/jvm/image-20200706200739392.png\" alt=\"image-20200706200739392\"></p>\n<p>《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）</p>\n<p>我要说的是：“几乎”所有的对象实例都在这里分配内存。—从实际使用角度看的。</p>\n<ul>\n<li>因为还有一些对象是在栈上分配的</li>\n</ul>\n<p>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</p>\n<p>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</p>\n<ul>\n<li>也就是触发了GC的时候，才会进行回收</li>\n<li>如果堆中对象马上被回收，那么用户线程就会收到影响，因为有stop the word</li>\n</ul>\n<p>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</p>\n<p><img src=\"/images/jvm/image-20200706201904057.png\" alt=\"image-20200706201904057\"></p>\n<h3 id=\"堆内存细分\"><a href=\"#堆内存细分\" class=\"headerlink\" title=\"堆内存细分\"></a>堆内存细分</h3><p>Java 7及之前堆内存逻辑上分为三部分：新生区+养老区+永久区</p>\n<ul>\n<li>Young Generation Space 新生区  Young&#x2F;New   又被划分为Eden区和Survivor区</li>\n<li>Tenure generation space 养老区 Old&#x2F;Tenure</li>\n<li>Permanent Space永久区   Perm</li>\n</ul>\n<p>Java 8及之后堆内存逻辑上分为三部分：新生区养老区+元空间</p>\n<ul>\n<li>Young Generation Space新生区  Young&#x2F;New  又被划分为Eden区和Survivor区</li>\n<li>Tenure generation space 养老区  Old&#x2F;Tenure</li>\n<li>Meta Space  元空间   Meta</li>\n</ul>\n<p>约定：新生区 -&gt; 新生代 -&gt; 年轻代   、  养老区 -&gt; 老年区 -&gt; 老年代、 永久区 -&gt; 永久代</p>\n<p><img src=\"/images/jvm/image-20200706203419496.png\" alt=\"image-20200706203419496\"></p>\n<p>堆空间内部结构，JDK1.8之前从永久代  替换成 元空间</p>\n<p><img src=\"/images/jvm/image-20200706203835403.png\" alt=\"image-20200706203835403\"></p>\n<h2 id=\"设置堆内存大小与OOM\"><a href=\"#设置堆内存大小与OOM\" class=\"headerlink\" title=\"设置堆内存大小与OOM\"></a>设置堆内存大小与OOM</h2><p>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项”-Xmx”和”-Xms”来进行设置。</p>\n<ul>\n<li>“-Xms”用于表示堆区的起始内存，等价于-xx:InitialHeapSize</li>\n<li>“-Xmx”则用于表示堆区的最大内存，等价于-XX:MaxHeapSize</li>\n</ul>\n<p>一旦堆区中的内存大小超过“-xmx”所指定的最大内存时，将会抛出outofMemoryError异常。</p>\n<p>通常会将-Xms和-Xmx两个参数配置相同的值，其目的是<strong>为了能够在ava垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能</strong>。</p>\n<p>默认情况下</p>\n<ul>\n<li><p>初始内存大小：物理电脑内存大小&#x2F;64</p>\n</li>\n<li><p>最大内存大小：物理电脑内存大小&#x2F;4</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * -Xms 用来设置堆空间（年轻代+老年代）的初始内存大小</span><br><span class=\"hljs-comment\"> *  -X：是jvm运行参数</span><br><span class=\"hljs-comment\"> *  ms：memory start</span><br><span class=\"hljs-comment\"> * -Xmx：用来设置堆空间（年轻代+老年代）的最大内存大小</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-06-20:44</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HeapSpaceInitial</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 返回Java虚拟机中的堆内存总量</span><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">initialMemory</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().totalMemory() / <span class=\"hljs-number\">1024</span> / <span class=\"hljs-number\">1024</span>;<br>        <span class=\"hljs-comment\">// 返回Java虚拟机试图使用的最大堆内存</span><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">maxMemory</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().maxMemory() / <span class=\"hljs-number\">1024</span> / <span class=\"hljs-number\">1024</span>;<br>        System.out.println(<span class=\"hljs-string\">&quot;-Xms:&quot;</span> + initialMemory + <span class=\"hljs-string\">&quot;M&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;-Xmx:&quot;</span> + maxMemory + <span class=\"hljs-string\">&quot;M&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-Xms:245M</span><br><span class=\"hljs-deletion\">-Xmx:3614M</span><br></code></pre></td></tr></table></figure>\n\n<p>如何查看堆内存的内存分配情况</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">jps </span> -&gt;  <span class=\"hljs-keyword\">jstat </span>-gc 进程id<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jvm/image-20200706205756045.png\" alt=\"image-20200706205756045\"></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">-<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:+PrintGCDetails</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jvm/image-20200706205821919.png\" alt=\"image-20200706205821919\"></p>\n<h3 id=\"OutOfMemory举例\"><a href=\"#OutOfMemory举例\" class=\"headerlink\" title=\"OutOfMemory举例\"></a>OutOfMemory举例</h3><p><img src=\"/images/jvm/image-20200706205947535.png\" alt=\"image-20200706205947535\"></p>\n<p><img src=\"/images/jvm/image-20200706210000461.png\" alt=\"image-20200706210000461\"></p>\n<p>我们简单的写一个OOM例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * OOM测试</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-06-21:11</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OOMTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br>            list.add(<span class=\"hljs-number\">999999999</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>然后设置启动参数</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-Xms10m -Xmx:10m</span><br></code></pre></td></tr></table></figure>\n\n<p>运行后，就出现OOM了，那么我们可以通过 VisualVM这个工具查看具体是什么参数造成的OOM</p>\n<p><img src=\"/images/jvm/image-20200706211652779.png\" alt=\"image-20200706211652779\"></p>\n<h2 id=\"年轻代与老年代\"><a href=\"#年轻代与老年代\" class=\"headerlink\" title=\"年轻代与老年代\"></a>年轻代与老年代</h2><p>存储在JVM中的Java对象可以被划分为两类：</p>\n<ul>\n<li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速<ul>\n<li>生命周期短的，及时回收即可</li>\n</ul>\n</li>\n<li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致</li>\n</ul>\n<p>Java堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（oldGen）</p>\n<p>其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）</p>\n<p><img src=\"/images/jvm/image-20200707075847954.png\" alt=\"image-20200707075847954\"></p>\n<p>下面这参数开发中一般不会调：</p>\n<p><img src=\"/images/jvm/image-20200707080154039.png\" alt=\"image-20200707080154039\"></p>\n<ul>\n<li>Eden：From：to -&gt;  8:1:1</li>\n<li>新生代：老年代  - &gt;  1 : 2</li>\n</ul>\n<p>配置新生代与老年代在堆结构的占比。</p>\n<ul>\n<li><p>默认-XX:NewRatio&#x3D;2，表示新生代占1，老年代占2，新生代占整个堆的1&#x2F;3</p>\n</li>\n<li><p>可以修改-XX:NewRatio&#x3D;4，表示新生代占1，老年代占4，新生代占整个堆的1&#x2F;5</p>\n</li>\n</ul>\n<blockquote>\n<p>当发现在整个项目中，生命周期长的对象偏多，那么就可以通过调整 老年代的大小，来进行调优</p>\n</blockquote>\n<p>在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是8：1：1当然开发人员可以通过选项“-xx:SurvivorRatio”调整这个空间比例。比如-xx:SurvivorRatio&#x3D;8</p>\n<p>几乎所有的Java对象都是在Eden区被new出来的。绝大部分的Java对象的销毁都在新生代进行了。（有些大的对象在Eden区无法存储时候，将直接进入老年代）</p>\n<blockquote>\n<p>IBM公司的专门研究表明，新生代中80%的对象都是“朝生夕死”的。</p>\n<p>可以使用选项”-Xmn”设置新生代最大内存大小</p>\n<p>这个参数一般使用默认值就可以了。</p>\n</blockquote>\n<p><img src=\"/images/jvm/image-20200707084208115.png\" alt=\"image-20200707084208115\"></p>\n<h2 id=\"图解对象分配过程\"><a href=\"#图解对象分配过程\" class=\"headerlink\" title=\"图解对象分配过程\"></a>图解对象分配过程</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>为新对象分配内存是一件非常严谨和复杂的任务，JM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p>\n<ul>\n<li>new的对象先放伊甸园区。此区有大小限制。</li>\n<li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区</li>\n<li>然后将伊甸园中的剩余对象移动到幸存者0区。</li>\n<li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</li>\n<li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</li>\n<li>啥时候能去养老区呢？可以设置次数。默认是15次。</li>\n<li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理</li>\n<li>若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。</li>\n</ul>\n<p>可以设置参数：-Xx:MaxTenuringThreshold&#x3D; N进行设置</p>\n<h3 id=\"图解过程\"><a href=\"#图解过程\" class=\"headerlink\" title=\"图解过程\"></a>图解过程</h3><p>我们创建的对象，一般都是存放在Eden区的，当我们Eden区满了后，就会触发GC操作，一般被称为 YGC &#x2F; Minor GC操作</p>\n<p><img src=\"/images/jvm/image-20200707084714886.png\" alt=\"image-20200707084714886\"></p>\n<p>当我们进行一次垃圾收集后，红色的将会被回收，而绿色的还会被占用着，存放在S0(Survivor From)区。同时我们给每个对象设置了一个年龄计数器，一次回收后就是1。</p>\n<p>同时Eden区继续存放对象，当Eden区再次存满的时候，又会触发一个MinorGC操作，此时GC将会把 Eden和Survivor From中的对象 进行一次收集，把存活的对象放到 Survivor To区，同时让年龄 + 1</p>\n<p><img src=\"/images/jvm/image-20200707085232646.png\" alt=\"image-20200707085232646\"></p>\n<p>我们继续不断的进行对象生成 和 垃圾回收，当Survivor中的对象的年龄达到15的时候，将会触发一次 Promotion晋升的操作，也就是将年轻代中的对象  晋升到 老年代中</p>\n<p><img src=\"/images/jvm/image-20200707085737207.png\" alt=\"image-20200707085737207\"></p>\n<h3 id=\"思考：幸存区区满了后？\"><a href=\"#思考：幸存区区满了后？\" class=\"headerlink\" title=\"思考：幸存区区满了后？\"></a>思考：幸存区区满了后？</h3><p>特别注意，在Eden区满了的时候，才会触发MinorGC，而幸存者区满了后，不会触发MinorGC操作</p>\n<p>如果Survivor区满了后，将会触发一些特殊的规则，也就是可能直接晋升老年代</p>\n<blockquote>\n<p>举例：以当兵为例，正常人的晋升可能是 ：  新兵 -&gt; 班长 -&gt; 排长 -&gt; 连长</p>\n<p>但是也有可能有些人因为做了非常大的贡献，直接从  新兵 -&gt; 排长</p>\n</blockquote>\n<h3 id=\"对象分配的特殊情况\"><a href=\"#对象分配的特殊情况\" class=\"headerlink\" title=\"对象分配的特殊情况\"></a>对象分配的特殊情况</h3><p><img src=\"/images/jvm/image-20200707091058346.png\" alt=\"image-20200707091058346\"></p>\n<h3 id=\"代码演示对象分配过程\"><a href=\"#代码演示对象分配过程\" class=\"headerlink\" title=\"代码演示对象分配过程\"></a>代码演示对象分配过程</h3><p>我们不断的创建大对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 代码演示对象创建过程</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-07-9:16</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HeapInstanceTest</span> &#123;<br>    <span class=\"hljs-type\">byte</span> [] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().nextInt(<span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">200</span>)];<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        ArrayList&lt;HeapInstanceTest&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HeapInstanceTest</span>());<br>            Thread.sleep(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后设置JVM参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">-Xms600m -Xmx600m<br></code></pre></td></tr></table></figure>\n\n<p>然后cmd输入下面命令，打开VisualVM图形化界面</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">jvisualvm</span><br></code></pre></td></tr></table></figure>\n\n<p>然后通过执行上面代码，通过VisualGC进行动态化查看</p>\n<p><img src=\"/images/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.gif\" alt=\"垃圾回收\"></p>\n<p>最终，在老年代和新生代都满了，就出现OOM</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">Exception <span class=\"hljs-keyword\">in</span> thread <span class=\"hljs-string\">&quot;main&quot;</span> java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.OutOfMemoryError</span>: Java heap space<br>\tat com<span class=\"hljs-selector-class\">.atguigu</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-class\">.chapter08</span><span class=\"hljs-selector-class\">.HeapInstanceTest</span>.&lt;init&gt;(HeapInstanceTest<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">13</span>)<br>\tat com<span class=\"hljs-selector-class\">.atguigu</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-class\">.chapter08</span><span class=\"hljs-selector-class\">.HeapInstanceTest</span><span class=\"hljs-selector-class\">.main</span>(HeapInstanceTest<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">17</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常用的调优工具\"><a href=\"#常用的调优工具\" class=\"headerlink\" title=\"常用的调优工具\"></a>常用的调优工具</h3><ul>\n<li>JDK命令行</li>\n<li>Eclipse：Memory Analyzer Tool</li>\n<li>Jconsole</li>\n<li>Visual VM（实时监控  推荐~）</li>\n<li>Jprofiler（推荐~）</li>\n<li>Java Flight Recorder（实时监控）</li>\n<li>GCViewer</li>\n<li>GCEasy</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to</li>\n<li>关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集</li>\n<li>新生代采用复制算法的目的：是为了减少内碎片</li>\n</ul>\n<h2 id=\"Minor-GC，MajorGC、Full-GC\"><a href=\"#Minor-GC，MajorGC、Full-GC\" class=\"headerlink\" title=\"Minor GC，MajorGC、Full GC\"></a>Minor GC，MajorGC、Full GC</h2><ul>\n<li>Minor GC：新生代的GC</li>\n<li>Major GC：老年代的GC</li>\n<li>Full GC：整堆收集，收集整个Java堆和方法区的垃圾收集</li>\n</ul>\n<blockquote>\n<p>我们都知道，JVM的调优的一个环节，也就是垃圾收集，我们需要尽量的避免垃圾回收，因为在垃圾回收的过程中，容易出现STW的问题</p>\n<p>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上</p>\n</blockquote>\n<p>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）</p>\n<p>部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为：</p>\n<ul>\n<li>新生代收集（MinorGC&#x2F;YoungGC）：只是新生代的垃圾收集</li>\n<li>老年代收集（MajorGC&#x2F;o1dGC）：只是老年代的圾收集。<ul>\n<li>目前，只有CMSGC会有单独收集老年代的行为。</li>\n<li>注意，很多时候Major GC会和Fu11GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</li>\n</ul>\n</li>\n<li>混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。<ul>\n<li>目前，只有G1 GC会有这种行为</li>\n</ul>\n</li>\n</ul>\n<p>整堆收集（FullGC）：收集整个java堆和方法区的垃圾收集。</p>\n<h3 id=\"Minor-GC\"><a href=\"#Minor-GC\" class=\"headerlink\" title=\"Minor GC\"></a>Minor GC</h3><p>当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次Minor GC会清理年轻代的内存。）</p>\n<p>因为Java对象大多都具备 <strong>朝生夕灭</strong> 的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</p>\n<p>Minor GC会引发STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行</p>\n<blockquote>\n<p>STW：stop the word</p>\n</blockquote>\n<p><img src=\"/images/jvm/image-20200707095606813.png\" alt=\"image-20200707095606813\"></p>\n<h3 id=\"Major-GC\"><a href=\"#Major-GC\" class=\"headerlink\" title=\"Major GC\"></a>Major GC</h3><p>指发生在老年代的GC，对象从老年代消失时，我们说 “Major Gc” 或 “Full GC” 发生了</p>\n<p>出现了MajorGc，经常会伴随至少一次的Minor GC（但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程）</p>\n<ul>\n<li>也就是在老年代空间不足时，会先尝试触发MinorGc。如果之后空间还不足，则触发Major GC</li>\n</ul>\n<p>Major GC的速度一般会比MinorGc慢1e倍以上，STW的时间更长，如果Major GC后，内存还不足，就报OOM了</p>\n<h3 id=\"Full-GC\"><a href=\"#Full-GC\" class=\"headerlink\" title=\"Full GC\"></a>Full GC</h3><p>触发Fu11GC执行的情况有如下五种：</p>\n<ul>\n<li>调用System.gc（）时，系统建议执行Fu11GC，但是不必然执行</li>\n<li>老年代空间不足</li>\n<li>方法区空间不足</li>\n<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li>\n<li>由Eden区、survivor spacee（From Space）区向survivor spacel（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li>\n</ul>\n<p>说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些</p>\n<h3 id=\"GC-举例\"><a href=\"#GC-举例\" class=\"headerlink\" title=\"GC 举例\"></a>GC 举例</h3><p>我们编写一个OOM的异常，因为我们在不断的创建字符串，是存放在元空间的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * GC测试</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-07-10:01</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GCTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;mogu blog&quot;</span>;<br>            <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br>                list.add(a);<br>                a = a + a;<br>                i++;<br>            &#125;<br>        &#125;<span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.getStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>设置JVM启动参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">-Xms10m -Xmx10m -XX:+PrintGCDetails<br></code></pre></td></tr></table></figure>\n\n<p>打印出的日志</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mathematica\"><span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Allocation</span> <span class=\"hljs-built_in\">Failure</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">2038</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">500</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">2038</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">797</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.3532002</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.01</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.36</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Allocation</span> <span class=\"hljs-built_in\">Failure</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">2108</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">480</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">2405</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">1565</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0014069</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Full</span> <span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Ergonomics</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">2288</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">ParOldGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">6845</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">7168</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">9133</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">Metaspace</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">3482</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">3482</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0058675</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.01</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Allocation</span> <span class=\"hljs-built_in\">Failure</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0002857</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Full</span> <span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Allocation</span> <span class=\"hljs-built_in\">Failure</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">ParOldGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5263</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">7168</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5263</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">Metaspace</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">3482</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">3482</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0058564</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.01</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-variable\">Heap</span><br> <span class=\"hljs-variable\">PSYoungGen</span>      <span class=\"hljs-variable\">total</span> <span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">60</span><span class=\"hljs-built_in\">K</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000100000000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000100000000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">eden</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">2048</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">2</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd0f138</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff00000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">from</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">512</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff00000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff00000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff80000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">to</span>   <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">512</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff80000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff80000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000100000000</span><span class=\"hljs-punctuation\">)</span><br> <span class=\"hljs-variable\">ParOldGen</span>       <span class=\"hljs-variable\">total</span> <span class=\"hljs-number\">7168</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">5263</span><span class=\"hljs-built_in\">K</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ff600000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">object</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">7168</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">73</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ff600000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffb23cf0</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-punctuation\">)</span><br> <span class=\"hljs-variable\">Metaspace</span>       <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">3514</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">capacity</span> <span class=\"hljs-number\">4498</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">committed</span> <span class=\"hljs-number\">4864</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">reserved</span> <span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><br>  <span class=\"hljs-variable\">class</span> <span class=\"hljs-variable\">space</span>    <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">388</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">capacity</span> <span class=\"hljs-number\">390</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">committed</span> <span class=\"hljs-number\">512</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">reserved</span> <span class=\"hljs-number\">1048576</span><span class=\"hljs-built_in\">K</span><br>  <br>  <span class=\"hljs-variable\">Exception</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-variable\">thread</span> <span class=\"hljs-string\">&quot;main&quot;</span> <span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">lang</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">OutOfMemoryError</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">Java</span> <span class=\"hljs-variable\">heap</span> <span class=\"hljs-variable\">space</span><br>\t<span class=\"hljs-variable\">at</span> <span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">util</span><span class=\"hljs-operator\">.</span><span class=\"hljs-built_in\">Arrays</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">copyOfRange</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">Arrays</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">:</span><span class=\"hljs-number\">3664</span><span class=\"hljs-punctuation\">)</span><br>\t<span class=\"hljs-variable\">at</span> <span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">lang</span><span class=\"hljs-operator\">.</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-operator\">.&lt;</span><span class=\"hljs-variable\">init</span><span class=\"hljs-operator\">&gt;</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">:</span><span class=\"hljs-number\">207</span><span class=\"hljs-punctuation\">)</span><br>\t<span class=\"hljs-variable\">at</span> <span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">lang</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">StringBuilder</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">toString</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">StringBuilder</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">:</span><span class=\"hljs-number\">407</span><span class=\"hljs-punctuation\">)</span><br>\t<span class=\"hljs-variable\">at</span> <span class=\"hljs-variable\">com</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">atguigu</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">chapter08</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">GCTest</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">main</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">GCTest</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">:</span><span class=\"hljs-number\">20</span><span class=\"hljs-punctuation\">)</span><br></code></pre></td></tr></table></figure>\n\n<p>触发OOM的时候，一定是进行了一次Full GC，因为只有在老年代空间不足时候，才会爆出OOM异常</p>\n<h2 id=\"堆空间分代思想\"><a href=\"#堆空间分代思想\" class=\"headerlink\" title=\"堆空间分代思想\"></a>堆空间分代思想</h2><p> 为什么要把Java堆分代？不分代就不能正常工作了吗？经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。</p>\n<blockquote>\n<p>新生代：有Eden、两块大小相同的survivor（又称为from&#x2F;to，s0&#x2F;s1）构成，to总为空。<br>老年代：存放新生代中经历多次GC仍然存活的对象。</p>\n</blockquote>\n<p><img src=\"/images/jvm/image-20200707101511025.png\" alt=\"image-20200707101511025\"></p>\n<p>其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。</p>\n<p><img src=\"/images/jvm/image-20200707101543871.png\" alt=\"image-20200707101543871\"></p>\n<h2 id=\"内存分配策略\"><a href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"></a>内存分配策略</h2><p>如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到survivor空间中，并将对象年龄设为1。对象在survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代</p>\n<p>对象晋升老年代的年龄阀值，可以通过选项-xx:MaxTenuringThreshold来设置</p>\n<p>针对不同年龄段的对象分配原则如下所示：</p>\n<ul>\n<li>优先分配到Eden<ul>\n<li>开发中比较长的字符串或者数组，会直接存在老年代，但是因为新创建的对象 都是 朝生夕死的，所以这个大对象可能也很快被回收，但是因为老年代触发Major GC的次数比 Minor GC要更少，因此可能回收起来就会比较慢</li>\n</ul>\n</li>\n<li>大对象直接分配到老年代<ul>\n<li>尽量避免程序中出现过多的大对象</li>\n</ul>\n</li>\n<li>长期存活的对象分配到老年代</li>\n<li>动态对象年龄判断<ul>\n<li>如果survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold 中要求的年龄。</li>\n</ul>\n</li>\n</ul>\n<p>空间分配担保： -Xx:HandlePromotionFailure</p>\n<ul>\n<li>也就是经过Minor GC后，所有的对象都存活，因为Survivor比较小，所以就需要将Survivor无法容纳的对象，存放到老年代中。</li>\n</ul>\n<h2 id=\"为对象分配内存：TLAB\"><a href=\"#为对象分配内存：TLAB\" class=\"headerlink\" title=\"为对象分配内存：TLAB\"></a>为对象分配内存：TLAB</h2><h3 id=\"问题：堆空间都是共享的么？\"><a href=\"#问题：堆空间都是共享的么？\" class=\"headerlink\" title=\"问题：堆空间都是共享的么？\"></a>问题：堆空间都是共享的么？</h3><p>不一定，因为还有TLAB这个概念，在堆中划分出一块区域，为每个线程所独占</p>\n<h3 id=\"为什么有TLAB？\"><a href=\"#为什么有TLAB？\" class=\"headerlink\" title=\"为什么有TLAB？\"></a>为什么有TLAB？</h3><p>TLAB：Thread Local Allocation Buffer，也就是为每个线程单独分配了一个缓冲区</p>\n<p>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</p>\n<p>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</p>\n<p>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</p>\n<h3 id=\"什么是TLAB\"><a href=\"#什么是TLAB\" class=\"headerlink\" title=\"什么是TLAB\"></a>什么是TLAB</h3><p>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。</p>\n<p>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。</p>\n<p>据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。</p>\n<p><img src=\"/images/jvm/image-20200707103547712.png\" alt=\"image-20200707103547712\"></p>\n<p>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但JVM确实是将TLAB作为内存分配的首选。</p>\n<p>在程序中，开发人员可以通过选项“-Xx:UseTLAB”设置是否开启TLAB空间。</p>\n<p>默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1，当然我们可以通过选项“-Xx:TLABWasteTargetPercent”设置TLAB空间所占用Eden空间的百分比大小。</p>\n<p>一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。</p>\n<h3 id=\"TLAB分配过程\"><a href=\"#TLAB分配过程\" class=\"headerlink\" title=\"TLAB分配过程\"></a>TLAB分配过程</h3><p>对象首先是通过TLAB开辟空间，如果不能放入，那么需要通过Eden来进行分配</p>\n<p><img src=\"/images/jvm/image-20200707104253530.png\" alt=\"image-20200707104253530\"></p>\n<h2 id=\"小结：堆空间的参数设置\"><a href=\"#小结：堆空间的参数设置\" class=\"headerlink\" title=\"小结：堆空间的参数设置\"></a>小结：堆空间的参数设置</h2><ul>\n<li><p>-XX：+PrintFlagsInitial：查看所有的参数的默认初始值</p>\n</li>\n<li><p>-XX：+PrintFlagsFinal：查看所有的参数的最终值（可能会存在修改，不再是初始值）</p>\n</li>\n<li><p>-Xms：初始堆空间内存（默认为物理内存的1&#x2F;64）</p>\n</li>\n<li><p>-Xmx：最大堆空间内存（默认为物理内存的1&#x2F;4）</p>\n</li>\n<li><p>-Xmn：设置新生代的大小。（初始值及最大值）</p>\n</li>\n<li><p>-XX:NewRatio：配置新生代与老年代在堆结构的占比</p>\n</li>\n<li><p>-XX:SurvivorRatio：设置新生代中Eden和S0&#x2F;S1空间的比例</p>\n</li>\n<li><p>-XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄</p>\n</li>\n<li><p>-XX：+PrintGCDetails：输出详细的GC处理日志</p>\n<ul>\n<li>打印gc简要信息：①-Xx：+PrintGC  ② - verbose:gc</li>\n</ul>\n</li>\n<li><p>-XX:HandlePromotionFalilure：是否设置空间分配担保</p>\n</li>\n</ul>\n<p>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。I</p>\n<ul>\n<li>如果大于，则此次Minor GC是安全的</li>\n<li>如果小于，则虚拟机会查看-xx:HandlePromotionFailure设置值是否允担保失败。<ul>\n<li>如果HandlePromotionFailure&#x3D;true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。</li>\n<li>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；</li>\n<li>如果小于，则改为进行一次FullGC。</li>\n<li>如果HandlePromotionFailure&#x3D;false，则改为进行一次Ful1 Gc。</li>\n</ul>\n</li>\n</ul>\n<p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行FullGC。</p>\n<h2 id=\"堆是分配对象的唯一选择么？\"><a href=\"#堆是分配对象的唯一选择么？\" class=\"headerlink\" title=\"堆是分配对象的唯一选择么？\"></a>堆是分配对象的唯一选择么？</h2><h3 id=\"逃逸分析\"><a href=\"#逃逸分析\" class=\"headerlink\" title=\"逃逸分析\"></a>逃逸分析</h3><p>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：</p>\n<p>随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。</p>\n<p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p>\n<p>此外，前面提到的基于openJDk深度定制的TaoBaovm，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p>\n<p>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</p>\n<p>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。逃逸分析的基本行为就是分析对象动态作用域：</p>\n<ul>\n<li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li>\n<li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li>\n</ul>\n<h4 id=\"逃逸分析举例\"><a href=\"#逃逸分析举例\" class=\"headerlink\" title=\"逃逸分析举例\"></a>逃逸分析举例</h4><p>没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧，也就是发生逃逸分析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">my_method</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">V</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">V</span>();<br>    <span class=\"hljs-comment\">// use v</span><br>    <span class=\"hljs-comment\">// ....</span><br>    v = <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>针对下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> StringBuffer <span class=\"hljs-title function_\">createStringBuffer</span><span class=\"hljs-params\">(String s1, String s2)</span> &#123;<br>    <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();<br>    sb.append(s1);<br>    sb.append(s2);<br>    <span class=\"hljs-keyword\">return</span> sb;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果想要StringBuffer sb不发生逃逸，可以这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">createStringBuffer</span><span class=\"hljs-params\">(String s1, String s2)</span> &#123;<br>    <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();<br>    sb.append(s1);<br>    sb.append(s2);<br>    <span class=\"hljs-keyword\">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>完整的逃逸分析代码举例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 逃逸分析</span><br><span class=\"hljs-comment\"> * 如何快速的判断是否发生了逃逸分析，大家就看new的对象是否在方法外被调用。</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-07-20:05</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EscapeAnalysis</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> EscapeAnalysis obj;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 方法返回EscapeAnalysis对象，发生逃逸</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> EscapeAnalysis <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> obj == <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EscapeAnalysis</span>():obj;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 为成员属性赋值，发生逃逸</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setObj</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EscapeAnalysis</span>();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 对象的作用于仅在当前方法中有效，没有发生逃逸</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">useEscapeAnalysis</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">EscapeAnalysis</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EscapeAnalysis</span>();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 引用成员变量的值，发生逃逸</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">useEscapeAnalysis2</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">EscapeAnalysis</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> getInstance();<br>        <span class=\"hljs-comment\">// getInstance().XXX  发生逃逸</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数设置\"><a href=\"#参数设置\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>在JDK 1.7 版本之后，HotSpot中默认就已经开启了逃逸分析</p>\n<p>如果使用的是较早的版本，开发人员则可以通过：</p>\n<ul>\n<li>选项“-xx：+DoEscapeAnalysis”显式开启逃逸分析</li>\n<li>通过选项“-xx：+PrintEscapeAnalysis”查看逃逸分析的筛选结果</li>\n</ul>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>开发中能使用局部变量的，就不要使用在方法外定义。</p>\n<p>使用逃逸分析，编译器可以对代码做如下优化：</p>\n<ul>\n<li>栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配</li>\n<li>同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</li>\n<li>分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</li>\n</ul>\n<h3 id=\"栈上分配\"><a href=\"#栈上分配\" class=\"headerlink\" title=\"栈上分配\"></a>栈上分配</h3><p>JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</p>\n<p>常见的栈上分配的场景</p>\n<blockquote>\n<p>在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。</p>\n</blockquote>\n<h4 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h4><p>我们通过举例来说明 开启逃逸分析 和 未开启逃逸分析时候的情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 栈上分配</span><br><span class=\"hljs-comment\"> * -Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-07-20:23</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> String age;<br>    <span class=\"hljs-keyword\">private</span> String gender;<br>    <span class=\"hljs-keyword\">private</span> String phone;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StackAllocation</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000000</span>; i++) &#123;<br>            alloc();<br>        &#125;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>        System.out.println(<span class=\"hljs-string\">&quot;花费的时间为：&quot;</span> + (end - start) + <span class=\"hljs-string\">&quot; ms&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 为了方便查看堆内存中对象个数，线程sleep</span><br>        Thread.sleep(<span class=\"hljs-number\">10000000</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">alloc</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 未发生逃逸</span><br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>(); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>设置JVM参数，表示未开启逃逸分析</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">-<span class=\"hljs-title class_\">Xmx1</span>G -<span class=\"hljs-title class_\">Xms1</span>G -<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:-DoEscapeAnalysis</span> -<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:+PrintGCDetails</span><br></code></pre></td></tr></table></figure>\n\n<p>运行结果，同时还触发了GC操作</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">花费的时间为：664 ms<br></code></pre></td></tr></table></figure>\n\n<p>然后查看内存的情况，发现有大量的User存储在堆中</p>\n<p><img src=\"/images/jvm/image-20200707203038615.png\" alt=\"image-20200707203038615\"></p>\n<p>我们在开启逃逸分析</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">-<span class=\"hljs-title class_\">Xmx1</span>G -<span class=\"hljs-title class_\">Xms1</span>G -<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:+DoEscapeAnalysis</span> -<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:+PrintGCDetails</span><br></code></pre></td></tr></table></figure>\n\n<p>然后查看运行时间，我们能够发现花费的时间快速减少，同时不会发生GC操作</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">花费的时间为：5 ms<br></code></pre></td></tr></table></figure>\n\n<p>在看内存情况，我们发现只有很少的User对象，说明User未发生逃逸，因为它存储在栈中，随着栈的销毁而消失</p>\n<p><img src=\"/images/jvm/image-20200707203441718.png\" alt=\"image-20200707203441718\"></p>\n<h3 id=\"同步省略\"><a href=\"#同步省略\" class=\"headerlink\" title=\"同步省略\"></a>同步省略</h3><p>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</p>\n<p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。</p>\n<p>例如下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">f</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">hellis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    <span class=\"hljs-keyword\">synchronized</span>(hellis) &#123;<br>        System.out.println(hellis);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>代码中对hellis这个对象加锁，但是hellis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉，优化成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">f</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">hellis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>\tSystem.out.println(hellis);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们将其转换成字节码</p>\n<p><img src=\"/images/jvm/image-20200707205634266.png\" alt=\"image-20200707205634266\"></p>\n<h3 id=\"分离对象和标量替换\"><a href=\"#分离对象和标量替换\" class=\"headerlink\" title=\"分离对象和标量替换\"></a>分离对象和标量替换</h3><p>标量（scalar）是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。</p>\n<p>相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p>\n<p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> &#123;<br>    alloc();<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Point</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> x;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> y;<br>&#125;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">alloc</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Point</span> <span class=\"hljs-variable\">point</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Point</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;point.x&quot;</span> + point.x + <span class=\"hljs-string\">&quot;;point.y&quot;</span> + point.y);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>以上代码，经过标量替换后，就会变成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">alloc</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;<br>    System.out.println(<span class=\"hljs-string\">&quot;point.x = &quot;</span> + x + <span class=\"hljs-string\">&quot;; point.y=&quot;</span> + y);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。<br>标量替换为栈上分配提供了很好的基础。</p>\n<h3 id=\"代码优化之标量替换\"><a href=\"#代码优化之标量替换\" class=\"headerlink\" title=\"代码优化之标量替换\"></a>代码优化之标量替换</h3><p>上述代码在主函数中进行了1亿次alloc。调用进行对象创建，由于User对象实例需要占据约16字节的空间，因此累计分配空间达到将近1.5GB。如果堆空间小于这个值，就必然会发生GC。使用如下参数运行上述代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations<br></code></pre></td></tr></table></figure>\n\n<p>这里设置参数如下：</p>\n<ul>\n<li>参数-server：启动Server模式，因为在server模式下，才可以启用逃逸分析。</li>\n<li>参数-XX:+DoEscapeAnalysis：启用逃逸分析</li>\n<li>参数-Xmx10m：指定了堆空间最大为10MB</li>\n<li>参数-XX:+PrintGC：将打印Gc日志</li>\n<li>参数一xx：+EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有id和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配</li>\n</ul>\n<h3 id=\"逃逸分析的不足\"><a href=\"#逃逸分析的不足\" class=\"headerlink\" title=\"逃逸分析的不足\"></a>逃逸分析的不足</h3><p>关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟。</p>\n<p>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。<br>一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p>\n<p>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JvM设计者的选择。据我所知，oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。</p>\n<p>目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</p>\n<p>老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGc。</p>\n<p>当GC发生在老年代时则被称为MajorGc或者FullGC。一般的，MinorGc的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><h2 id=\"堆的核心概念\"><a href=\"#堆的核心概念\" class=\"headerlink\" title=\"堆的核心概念\"></a>堆的核心概念</h2><p>堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。</p>\n<p><img src=\"/images/jvm/image-20200706195127740.png\" alt=\"image-20200706195127740\"></p>\n<p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</p>\n<p>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。</p>\n<ul>\n<li>堆内存的大小是可以调节的。</li>\n</ul>\n<p>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>\n<p>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。</p>\n<blockquote>\n<p>-Xms10m：最小堆内存</p>\n<p>-Xmx10m：最大堆内存</p>\n</blockquote>\n<p>下图就是使用：Java VisualVM查看堆空间的内容，通过 jdk bin提供的插件</p>\n<p><img src=\"/images/jvm/image-20200706200739392.png\" alt=\"image-20200706200739392\"></p>\n<p>《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）</p>\n<p>我要说的是：“几乎”所有的对象实例都在这里分配内存。—从实际使用角度看的。</p>\n<ul>\n<li>因为还有一些对象是在栈上分配的</li>\n</ul>\n<p>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</p>\n<p>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</p>\n<ul>\n<li>也就是触发了GC的时候，才会进行回收</li>\n<li>如果堆中对象马上被回收，那么用户线程就会收到影响，因为有stop the word</li>\n</ul>\n<p>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</p>\n<p><img src=\"/images/jvm/image-20200706201904057.png\" alt=\"image-20200706201904057\"></p>\n<h3 id=\"堆内存细分\"><a href=\"#堆内存细分\" class=\"headerlink\" title=\"堆内存细分\"></a>堆内存细分</h3><p>Java 7及之前堆内存逻辑上分为三部分：新生区+养老区+永久区</p>\n<ul>\n<li>Young Generation Space 新生区  Young&#x2F;New   又被划分为Eden区和Survivor区</li>\n<li>Tenure generation space 养老区 Old&#x2F;Tenure</li>\n<li>Permanent Space永久区   Perm</li>\n</ul>\n<p>Java 8及之后堆内存逻辑上分为三部分：新生区养老区+元空间</p>\n<ul>\n<li>Young Generation Space新生区  Young&#x2F;New  又被划分为Eden区和Survivor区</li>\n<li>Tenure generation space 养老区  Old&#x2F;Tenure</li>\n<li>Meta Space  元空间   Meta</li>\n</ul>\n<p>约定：新生区 -&gt; 新生代 -&gt; 年轻代   、  养老区 -&gt; 老年区 -&gt; 老年代、 永久区 -&gt; 永久代</p>\n<p><img src=\"/images/jvm/image-20200706203419496.png\" alt=\"image-20200706203419496\"></p>\n<p>堆空间内部结构，JDK1.8之前从永久代  替换成 元空间</p>\n<p><img src=\"/images/jvm/image-20200706203835403.png\" alt=\"image-20200706203835403\"></p>\n<h2 id=\"设置堆内存大小与OOM\"><a href=\"#设置堆内存大小与OOM\" class=\"headerlink\" title=\"设置堆内存大小与OOM\"></a>设置堆内存大小与OOM</h2><p>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项”-Xmx”和”-Xms”来进行设置。</p>\n<ul>\n<li>“-Xms”用于表示堆区的起始内存，等价于-xx:InitialHeapSize</li>\n<li>“-Xmx”则用于表示堆区的最大内存，等价于-XX:MaxHeapSize</li>\n</ul>\n<p>一旦堆区中的内存大小超过“-xmx”所指定的最大内存时，将会抛出outofMemoryError异常。</p>\n<p>通常会将-Xms和-Xmx两个参数配置相同的值，其目的是<strong>为了能够在ava垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能</strong>。</p>\n<p>默认情况下</p>\n<ul>\n<li><p>初始内存大小：物理电脑内存大小&#x2F;64</p>\n</li>\n<li><p>最大内存大小：物理电脑内存大小&#x2F;4</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * -Xms 用来设置堆空间（年轻代+老年代）的初始内存大小</span><br><span class=\"hljs-comment\"> *  -X：是jvm运行参数</span><br><span class=\"hljs-comment\"> *  ms：memory start</span><br><span class=\"hljs-comment\"> * -Xmx：用来设置堆空间（年轻代+老年代）的最大内存大小</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-06-20:44</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HeapSpaceInitial</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 返回Java虚拟机中的堆内存总量</span><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">initialMemory</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().totalMemory() / <span class=\"hljs-number\">1024</span> / <span class=\"hljs-number\">1024</span>;<br>        <span class=\"hljs-comment\">// 返回Java虚拟机试图使用的最大堆内存</span><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">maxMemory</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().maxMemory() / <span class=\"hljs-number\">1024</span> / <span class=\"hljs-number\">1024</span>;<br>        System.out.println(<span class=\"hljs-string\">&quot;-Xms:&quot;</span> + initialMemory + <span class=\"hljs-string\">&quot;M&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;-Xmx:&quot;</span> + maxMemory + <span class=\"hljs-string\">&quot;M&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-Xms:245M</span><br><span class=\"hljs-deletion\">-Xmx:3614M</span><br></code></pre></td></tr></table></figure>\n\n<p>如何查看堆内存的内存分配情况</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">jps </span> -&gt;  <span class=\"hljs-keyword\">jstat </span>-gc 进程id<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jvm/image-20200706205756045.png\" alt=\"image-20200706205756045\"></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">-<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:+PrintGCDetails</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jvm/image-20200706205821919.png\" alt=\"image-20200706205821919\"></p>\n<h3 id=\"OutOfMemory举例\"><a href=\"#OutOfMemory举例\" class=\"headerlink\" title=\"OutOfMemory举例\"></a>OutOfMemory举例</h3><p><img src=\"/images/jvm/image-20200706205947535.png\" alt=\"image-20200706205947535\"></p>\n<p><img src=\"/images/jvm/image-20200706210000461.png\" alt=\"image-20200706210000461\"></p>\n<p>我们简单的写一个OOM例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * OOM测试</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-06-21:11</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OOMTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br>            list.add(<span class=\"hljs-number\">999999999</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>然后设置启动参数</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-Xms10m -Xmx:10m</span><br></code></pre></td></tr></table></figure>\n\n<p>运行后，就出现OOM了，那么我们可以通过 VisualVM这个工具查看具体是什么参数造成的OOM</p>\n<p><img src=\"/images/jvm/image-20200706211652779.png\" alt=\"image-20200706211652779\"></p>\n<h2 id=\"年轻代与老年代\"><a href=\"#年轻代与老年代\" class=\"headerlink\" title=\"年轻代与老年代\"></a>年轻代与老年代</h2><p>存储在JVM中的Java对象可以被划分为两类：</p>\n<ul>\n<li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速<ul>\n<li>生命周期短的，及时回收即可</li>\n</ul>\n</li>\n<li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致</li>\n</ul>\n<p>Java堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（oldGen）</p>\n<p>其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）</p>\n<p><img src=\"/images/jvm/image-20200707075847954.png\" alt=\"image-20200707075847954\"></p>\n<p>下面这参数开发中一般不会调：</p>\n<p><img src=\"/images/jvm/image-20200707080154039.png\" alt=\"image-20200707080154039\"></p>\n<ul>\n<li>Eden：From：to -&gt;  8:1:1</li>\n<li>新生代：老年代  - &gt;  1 : 2</li>\n</ul>\n<p>配置新生代与老年代在堆结构的占比。</p>\n<ul>\n<li><p>默认-XX:NewRatio&#x3D;2，表示新生代占1，老年代占2，新生代占整个堆的1&#x2F;3</p>\n</li>\n<li><p>可以修改-XX:NewRatio&#x3D;4，表示新生代占1，老年代占4，新生代占整个堆的1&#x2F;5</p>\n</li>\n</ul>\n<blockquote>\n<p>当发现在整个项目中，生命周期长的对象偏多，那么就可以通过调整 老年代的大小，来进行调优</p>\n</blockquote>\n<p>在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是8：1：1当然开发人员可以通过选项“-xx:SurvivorRatio”调整这个空间比例。比如-xx:SurvivorRatio&#x3D;8</p>\n<p>几乎所有的Java对象都是在Eden区被new出来的。绝大部分的Java对象的销毁都在新生代进行了。（有些大的对象在Eden区无法存储时候，将直接进入老年代）</p>\n<blockquote>\n<p>IBM公司的专门研究表明，新生代中80%的对象都是“朝生夕死”的。</p>\n<p>可以使用选项”-Xmn”设置新生代最大内存大小</p>\n<p>这个参数一般使用默认值就可以了。</p>\n</blockquote>\n<p><img src=\"/images/jvm/image-20200707084208115.png\" alt=\"image-20200707084208115\"></p>\n<h2 id=\"图解对象分配过程\"><a href=\"#图解对象分配过程\" class=\"headerlink\" title=\"图解对象分配过程\"></a>图解对象分配过程</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>为新对象分配内存是一件非常严谨和复杂的任务，JM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p>\n<ul>\n<li>new的对象先放伊甸园区。此区有大小限制。</li>\n<li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区</li>\n<li>然后将伊甸园中的剩余对象移动到幸存者0区。</li>\n<li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</li>\n<li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</li>\n<li>啥时候能去养老区呢？可以设置次数。默认是15次。</li>\n<li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理</li>\n<li>若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。</li>\n</ul>\n<p>可以设置参数：-Xx:MaxTenuringThreshold&#x3D; N进行设置</p>\n<h3 id=\"图解过程\"><a href=\"#图解过程\" class=\"headerlink\" title=\"图解过程\"></a>图解过程</h3><p>我们创建的对象，一般都是存放在Eden区的，当我们Eden区满了后，就会触发GC操作，一般被称为 YGC &#x2F; Minor GC操作</p>\n<p><img src=\"/images/jvm/image-20200707084714886.png\" alt=\"image-20200707084714886\"></p>\n<p>当我们进行一次垃圾收集后，红色的将会被回收，而绿色的还会被占用着，存放在S0(Survivor From)区。同时我们给每个对象设置了一个年龄计数器，一次回收后就是1。</p>\n<p>同时Eden区继续存放对象，当Eden区再次存满的时候，又会触发一个MinorGC操作，此时GC将会把 Eden和Survivor From中的对象 进行一次收集，把存活的对象放到 Survivor To区，同时让年龄 + 1</p>\n<p><img src=\"/images/jvm/image-20200707085232646.png\" alt=\"image-20200707085232646\"></p>\n<p>我们继续不断的进行对象生成 和 垃圾回收，当Survivor中的对象的年龄达到15的时候，将会触发一次 Promotion晋升的操作，也就是将年轻代中的对象  晋升到 老年代中</p>\n<p><img src=\"/images/jvm/image-20200707085737207.png\" alt=\"image-20200707085737207\"></p>\n<h3 id=\"思考：幸存区区满了后？\"><a href=\"#思考：幸存区区满了后？\" class=\"headerlink\" title=\"思考：幸存区区满了后？\"></a>思考：幸存区区满了后？</h3><p>特别注意，在Eden区满了的时候，才会触发MinorGC，而幸存者区满了后，不会触发MinorGC操作</p>\n<p>如果Survivor区满了后，将会触发一些特殊的规则，也就是可能直接晋升老年代</p>\n<blockquote>\n<p>举例：以当兵为例，正常人的晋升可能是 ：  新兵 -&gt; 班长 -&gt; 排长 -&gt; 连长</p>\n<p>但是也有可能有些人因为做了非常大的贡献，直接从  新兵 -&gt; 排长</p>\n</blockquote>\n<h3 id=\"对象分配的特殊情况\"><a href=\"#对象分配的特殊情况\" class=\"headerlink\" title=\"对象分配的特殊情况\"></a>对象分配的特殊情况</h3><p><img src=\"/images/jvm/image-20200707091058346.png\" alt=\"image-20200707091058346\"></p>\n<h3 id=\"代码演示对象分配过程\"><a href=\"#代码演示对象分配过程\" class=\"headerlink\" title=\"代码演示对象分配过程\"></a>代码演示对象分配过程</h3><p>我们不断的创建大对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 代码演示对象创建过程</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-07-9:16</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HeapInstanceTest</span> &#123;<br>    <span class=\"hljs-type\">byte</span> [] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().nextInt(<span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">200</span>)];<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        ArrayList&lt;HeapInstanceTest&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HeapInstanceTest</span>());<br>            Thread.sleep(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后设置JVM参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">-Xms600m -Xmx600m<br></code></pre></td></tr></table></figure>\n\n<p>然后cmd输入下面命令，打开VisualVM图形化界面</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">jvisualvm</span><br></code></pre></td></tr></table></figure>\n\n<p>然后通过执行上面代码，通过VisualGC进行动态化查看</p>\n<p><img src=\"/images/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.gif\" alt=\"垃圾回收\"></p>\n<p>最终，在老年代和新生代都满了，就出现OOM</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">Exception <span class=\"hljs-keyword\">in</span> thread <span class=\"hljs-string\">&quot;main&quot;</span> java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.OutOfMemoryError</span>: Java heap space<br>\tat com<span class=\"hljs-selector-class\">.atguigu</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-class\">.chapter08</span><span class=\"hljs-selector-class\">.HeapInstanceTest</span>.&lt;init&gt;(HeapInstanceTest<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">13</span>)<br>\tat com<span class=\"hljs-selector-class\">.atguigu</span><span class=\"hljs-selector-class\">.java</span><span class=\"hljs-selector-class\">.chapter08</span><span class=\"hljs-selector-class\">.HeapInstanceTest</span><span class=\"hljs-selector-class\">.main</span>(HeapInstanceTest<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">17</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常用的调优工具\"><a href=\"#常用的调优工具\" class=\"headerlink\" title=\"常用的调优工具\"></a>常用的调优工具</h3><ul>\n<li>JDK命令行</li>\n<li>Eclipse：Memory Analyzer Tool</li>\n<li>Jconsole</li>\n<li>Visual VM（实时监控  推荐~）</li>\n<li>Jprofiler（推荐~）</li>\n<li>Java Flight Recorder（实时监控）</li>\n<li>GCViewer</li>\n<li>GCEasy</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to</li>\n<li>关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集</li>\n<li>新生代采用复制算法的目的：是为了减少内碎片</li>\n</ul>\n<h2 id=\"Minor-GC，MajorGC、Full-GC\"><a href=\"#Minor-GC，MajorGC、Full-GC\" class=\"headerlink\" title=\"Minor GC，MajorGC、Full GC\"></a>Minor GC，MajorGC、Full GC</h2><ul>\n<li>Minor GC：新生代的GC</li>\n<li>Major GC：老年代的GC</li>\n<li>Full GC：整堆收集，收集整个Java堆和方法区的垃圾收集</li>\n</ul>\n<blockquote>\n<p>我们都知道，JVM的调优的一个环节，也就是垃圾收集，我们需要尽量的避免垃圾回收，因为在垃圾回收的过程中，容易出现STW的问题</p>\n<p>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上</p>\n</blockquote>\n<p>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）</p>\n<p>部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为：</p>\n<ul>\n<li>新生代收集（MinorGC&#x2F;YoungGC）：只是新生代的垃圾收集</li>\n<li>老年代收集（MajorGC&#x2F;o1dGC）：只是老年代的圾收集。<ul>\n<li>目前，只有CMSGC会有单独收集老年代的行为。</li>\n<li>注意，很多时候Major GC会和Fu11GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</li>\n</ul>\n</li>\n<li>混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。<ul>\n<li>目前，只有G1 GC会有这种行为</li>\n</ul>\n</li>\n</ul>\n<p>整堆收集（FullGC）：收集整个java堆和方法区的垃圾收集。</p>\n<h3 id=\"Minor-GC\"><a href=\"#Minor-GC\" class=\"headerlink\" title=\"Minor GC\"></a>Minor GC</h3><p>当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次Minor GC会清理年轻代的内存。）</p>\n<p>因为Java对象大多都具备 <strong>朝生夕灭</strong> 的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</p>\n<p>Minor GC会引发STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行</p>\n<blockquote>\n<p>STW：stop the word</p>\n</blockquote>\n<p><img src=\"/images/jvm/image-20200707095606813.png\" alt=\"image-20200707095606813\"></p>\n<h3 id=\"Major-GC\"><a href=\"#Major-GC\" class=\"headerlink\" title=\"Major GC\"></a>Major GC</h3><p>指发生在老年代的GC，对象从老年代消失时，我们说 “Major Gc” 或 “Full GC” 发生了</p>\n<p>出现了MajorGc，经常会伴随至少一次的Minor GC（但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程）</p>\n<ul>\n<li>也就是在老年代空间不足时，会先尝试触发MinorGc。如果之后空间还不足，则触发Major GC</li>\n</ul>\n<p>Major GC的速度一般会比MinorGc慢1e倍以上，STW的时间更长，如果Major GC后，内存还不足，就报OOM了</p>\n<h3 id=\"Full-GC\"><a href=\"#Full-GC\" class=\"headerlink\" title=\"Full GC\"></a>Full GC</h3><p>触发Fu11GC执行的情况有如下五种：</p>\n<ul>\n<li>调用System.gc（）时，系统建议执行Fu11GC，但是不必然执行</li>\n<li>老年代空间不足</li>\n<li>方法区空间不足</li>\n<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li>\n<li>由Eden区、survivor spacee（From Space）区向survivor spacel（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li>\n</ul>\n<p>说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些</p>\n<h3 id=\"GC-举例\"><a href=\"#GC-举例\" class=\"headerlink\" title=\"GC 举例\"></a>GC 举例</h3><p>我们编写一个OOM的异常，因为我们在不断的创建字符串，是存放在元空间的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * GC测试</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-07-10:01</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GCTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;mogu blog&quot;</span>;<br>            <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br>                list.add(a);<br>                a = a + a;<br>                i++;<br>            &#125;<br>        &#125;<span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.getStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>设置JVM启动参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">-Xms10m -Xmx10m -XX:+PrintGCDetails<br></code></pre></td></tr></table></figure>\n\n<p>打印出的日志</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mathematica\"><span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Allocation</span> <span class=\"hljs-built_in\">Failure</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">2038</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">500</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">2038</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">797</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.3532002</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.01</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.36</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Allocation</span> <span class=\"hljs-built_in\">Failure</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">2108</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">480</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">2405</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">1565</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0014069</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Full</span> <span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Ergonomics</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">2288</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">ParOldGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">6845</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">7168</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">9133</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">Metaspace</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">3482</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">3482</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0058675</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.01</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Allocation</span> <span class=\"hljs-built_in\">Failure</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0002857</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Full</span> <span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">Allocation</span> <span class=\"hljs-built_in\">Failure</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">ParOldGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5263</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">7168</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">5281</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">5263</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">9728</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">Metaspace</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">3482</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">3482</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0058564</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.01</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-variable\">Heap</span><br> <span class=\"hljs-variable\">PSYoungGen</span>      <span class=\"hljs-variable\">total</span> <span class=\"hljs-number\">2560</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">60</span><span class=\"hljs-built_in\">K</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000100000000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000100000000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">eden</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">2048</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">2</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd0f138</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff00000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">from</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">512</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff00000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff00000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff80000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">to</span>   <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">512</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff80000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000fff80000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000100000000</span><span class=\"hljs-punctuation\">)</span><br> <span class=\"hljs-variable\">ParOldGen</span>       <span class=\"hljs-variable\">total</span> <span class=\"hljs-number\">7168</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">5263</span><span class=\"hljs-built_in\">K</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ff600000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">object</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">7168</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">73</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ff600000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffb23cf0</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000000ffd00000</span><span class=\"hljs-punctuation\">)</span><br> <span class=\"hljs-variable\">Metaspace</span>       <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">3514</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">capacity</span> <span class=\"hljs-number\">4498</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">committed</span> <span class=\"hljs-number\">4864</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">reserved</span> <span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><br>  <span class=\"hljs-variable\">class</span> <span class=\"hljs-variable\">space</span>    <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">388</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">capacity</span> <span class=\"hljs-number\">390</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">committed</span> <span class=\"hljs-number\">512</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">reserved</span> <span class=\"hljs-number\">1048576</span><span class=\"hljs-built_in\">K</span><br>  <br>  <span class=\"hljs-variable\">Exception</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-variable\">thread</span> <span class=\"hljs-string\">&quot;main&quot;</span> <span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">lang</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">OutOfMemoryError</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">Java</span> <span class=\"hljs-variable\">heap</span> <span class=\"hljs-variable\">space</span><br>\t<span class=\"hljs-variable\">at</span> <span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">util</span><span class=\"hljs-operator\">.</span><span class=\"hljs-built_in\">Arrays</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">copyOfRange</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">Arrays</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">:</span><span class=\"hljs-number\">3664</span><span class=\"hljs-punctuation\">)</span><br>\t<span class=\"hljs-variable\">at</span> <span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">lang</span><span class=\"hljs-operator\">.</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-operator\">.&lt;</span><span class=\"hljs-variable\">init</span><span class=\"hljs-operator\">&gt;</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">:</span><span class=\"hljs-number\">207</span><span class=\"hljs-punctuation\">)</span><br>\t<span class=\"hljs-variable\">at</span> <span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">lang</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">StringBuilder</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">toString</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">StringBuilder</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">:</span><span class=\"hljs-number\">407</span><span class=\"hljs-punctuation\">)</span><br>\t<span class=\"hljs-variable\">at</span> <span class=\"hljs-variable\">com</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">atguigu</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">chapter08</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">GCTest</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">main</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">GCTest</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">java</span><span class=\"hljs-operator\">:</span><span class=\"hljs-number\">20</span><span class=\"hljs-punctuation\">)</span><br></code></pre></td></tr></table></figure>\n\n<p>触发OOM的时候，一定是进行了一次Full GC，因为只有在老年代空间不足时候，才会爆出OOM异常</p>\n<h2 id=\"堆空间分代思想\"><a href=\"#堆空间分代思想\" class=\"headerlink\" title=\"堆空间分代思想\"></a>堆空间分代思想</h2><p> 为什么要把Java堆分代？不分代就不能正常工作了吗？经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。</p>\n<blockquote>\n<p>新生代：有Eden、两块大小相同的survivor（又称为from&#x2F;to，s0&#x2F;s1）构成，to总为空。<br>老年代：存放新生代中经历多次GC仍然存活的对象。</p>\n</blockquote>\n<p><img src=\"/images/jvm/image-20200707101511025.png\" alt=\"image-20200707101511025\"></p>\n<p>其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。</p>\n<p><img src=\"/images/jvm/image-20200707101543871.png\" alt=\"image-20200707101543871\"></p>\n<h2 id=\"内存分配策略\"><a href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"></a>内存分配策略</h2><p>如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到survivor空间中，并将对象年龄设为1。对象在survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代</p>\n<p>对象晋升老年代的年龄阀值，可以通过选项-xx:MaxTenuringThreshold来设置</p>\n<p>针对不同年龄段的对象分配原则如下所示：</p>\n<ul>\n<li>优先分配到Eden<ul>\n<li>开发中比较长的字符串或者数组，会直接存在老年代，但是因为新创建的对象 都是 朝生夕死的，所以这个大对象可能也很快被回收，但是因为老年代触发Major GC的次数比 Minor GC要更少，因此可能回收起来就会比较慢</li>\n</ul>\n</li>\n<li>大对象直接分配到老年代<ul>\n<li>尽量避免程序中出现过多的大对象</li>\n</ul>\n</li>\n<li>长期存活的对象分配到老年代</li>\n<li>动态对象年龄判断<ul>\n<li>如果survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold 中要求的年龄。</li>\n</ul>\n</li>\n</ul>\n<p>空间分配担保： -Xx:HandlePromotionFailure</p>\n<ul>\n<li>也就是经过Minor GC后，所有的对象都存活，因为Survivor比较小，所以就需要将Survivor无法容纳的对象，存放到老年代中。</li>\n</ul>\n<h2 id=\"为对象分配内存：TLAB\"><a href=\"#为对象分配内存：TLAB\" class=\"headerlink\" title=\"为对象分配内存：TLAB\"></a>为对象分配内存：TLAB</h2><h3 id=\"问题：堆空间都是共享的么？\"><a href=\"#问题：堆空间都是共享的么？\" class=\"headerlink\" title=\"问题：堆空间都是共享的么？\"></a>问题：堆空间都是共享的么？</h3><p>不一定，因为还有TLAB这个概念，在堆中划分出一块区域，为每个线程所独占</p>\n<h3 id=\"为什么有TLAB？\"><a href=\"#为什么有TLAB？\" class=\"headerlink\" title=\"为什么有TLAB？\"></a>为什么有TLAB？</h3><p>TLAB：Thread Local Allocation Buffer，也就是为每个线程单独分配了一个缓冲区</p>\n<p>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</p>\n<p>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</p>\n<p>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</p>\n<h3 id=\"什么是TLAB\"><a href=\"#什么是TLAB\" class=\"headerlink\" title=\"什么是TLAB\"></a>什么是TLAB</h3><p>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。</p>\n<p>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。</p>\n<p>据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。</p>\n<p><img src=\"/images/jvm/image-20200707103547712.png\" alt=\"image-20200707103547712\"></p>\n<p>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但JVM确实是将TLAB作为内存分配的首选。</p>\n<p>在程序中，开发人员可以通过选项“-Xx:UseTLAB”设置是否开启TLAB空间。</p>\n<p>默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1，当然我们可以通过选项“-Xx:TLABWasteTargetPercent”设置TLAB空间所占用Eden空间的百分比大小。</p>\n<p>一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。</p>\n<h3 id=\"TLAB分配过程\"><a href=\"#TLAB分配过程\" class=\"headerlink\" title=\"TLAB分配过程\"></a>TLAB分配过程</h3><p>对象首先是通过TLAB开辟空间，如果不能放入，那么需要通过Eden来进行分配</p>\n<p><img src=\"/images/jvm/image-20200707104253530.png\" alt=\"image-20200707104253530\"></p>\n<h2 id=\"小结：堆空间的参数设置\"><a href=\"#小结：堆空间的参数设置\" class=\"headerlink\" title=\"小结：堆空间的参数设置\"></a>小结：堆空间的参数设置</h2><ul>\n<li><p>-XX：+PrintFlagsInitial：查看所有的参数的默认初始值</p>\n</li>\n<li><p>-XX：+PrintFlagsFinal：查看所有的参数的最终值（可能会存在修改，不再是初始值）</p>\n</li>\n<li><p>-Xms：初始堆空间内存（默认为物理内存的1&#x2F;64）</p>\n</li>\n<li><p>-Xmx：最大堆空间内存（默认为物理内存的1&#x2F;4）</p>\n</li>\n<li><p>-Xmn：设置新生代的大小。（初始值及最大值）</p>\n</li>\n<li><p>-XX:NewRatio：配置新生代与老年代在堆结构的占比</p>\n</li>\n<li><p>-XX:SurvivorRatio：设置新生代中Eden和S0&#x2F;S1空间的比例</p>\n</li>\n<li><p>-XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄</p>\n</li>\n<li><p>-XX：+PrintGCDetails：输出详细的GC处理日志</p>\n<ul>\n<li>打印gc简要信息：①-Xx：+PrintGC  ② - verbose:gc</li>\n</ul>\n</li>\n<li><p>-XX:HandlePromotionFalilure：是否设置空间分配担保</p>\n</li>\n</ul>\n<p>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。I</p>\n<ul>\n<li>如果大于，则此次Minor GC是安全的</li>\n<li>如果小于，则虚拟机会查看-xx:HandlePromotionFailure设置值是否允担保失败。<ul>\n<li>如果HandlePromotionFailure&#x3D;true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。</li>\n<li>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；</li>\n<li>如果小于，则改为进行一次FullGC。</li>\n<li>如果HandlePromotionFailure&#x3D;false，则改为进行一次Ful1 Gc。</li>\n</ul>\n</li>\n</ul>\n<p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行FullGC。</p>\n<h2 id=\"堆是分配对象的唯一选择么？\"><a href=\"#堆是分配对象的唯一选择么？\" class=\"headerlink\" title=\"堆是分配对象的唯一选择么？\"></a>堆是分配对象的唯一选择么？</h2><h3 id=\"逃逸分析\"><a href=\"#逃逸分析\" class=\"headerlink\" title=\"逃逸分析\"></a>逃逸分析</h3><p>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：</p>\n<p>随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。</p>\n<p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p>\n<p>此外，前面提到的基于openJDk深度定制的TaoBaovm，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p>\n<p>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</p>\n<p>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。逃逸分析的基本行为就是分析对象动态作用域：</p>\n<ul>\n<li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li>\n<li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li>\n</ul>\n<h4 id=\"逃逸分析举例\"><a href=\"#逃逸分析举例\" class=\"headerlink\" title=\"逃逸分析举例\"></a>逃逸分析举例</h4><p>没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧，也就是发生逃逸分析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">my_method</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">V</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">V</span>();<br>    <span class=\"hljs-comment\">// use v</span><br>    <span class=\"hljs-comment\">// ....</span><br>    v = <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>针对下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> StringBuffer <span class=\"hljs-title function_\">createStringBuffer</span><span class=\"hljs-params\">(String s1, String s2)</span> &#123;<br>    <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();<br>    sb.append(s1);<br>    sb.append(s2);<br>    <span class=\"hljs-keyword\">return</span> sb;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果想要StringBuffer sb不发生逃逸，可以这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">createStringBuffer</span><span class=\"hljs-params\">(String s1, String s2)</span> &#123;<br>    <span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();<br>    sb.append(s1);<br>    sb.append(s2);<br>    <span class=\"hljs-keyword\">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>完整的逃逸分析代码举例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 逃逸分析</span><br><span class=\"hljs-comment\"> * 如何快速的判断是否发生了逃逸分析，大家就看new的对象是否在方法外被调用。</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-07-20:05</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EscapeAnalysis</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> EscapeAnalysis obj;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 方法返回EscapeAnalysis对象，发生逃逸</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> EscapeAnalysis <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> obj == <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EscapeAnalysis</span>():obj;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 为成员属性赋值，发生逃逸</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setObj</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EscapeAnalysis</span>();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 对象的作用于仅在当前方法中有效，没有发生逃逸</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">useEscapeAnalysis</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">EscapeAnalysis</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EscapeAnalysis</span>();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 引用成员变量的值，发生逃逸</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">useEscapeAnalysis2</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">EscapeAnalysis</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> getInstance();<br>        <span class=\"hljs-comment\">// getInstance().XXX  发生逃逸</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数设置\"><a href=\"#参数设置\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>在JDK 1.7 版本之后，HotSpot中默认就已经开启了逃逸分析</p>\n<p>如果使用的是较早的版本，开发人员则可以通过：</p>\n<ul>\n<li>选项“-xx：+DoEscapeAnalysis”显式开启逃逸分析</li>\n<li>通过选项“-xx：+PrintEscapeAnalysis”查看逃逸分析的筛选结果</li>\n</ul>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>开发中能使用局部变量的，就不要使用在方法外定义。</p>\n<p>使用逃逸分析，编译器可以对代码做如下优化：</p>\n<ul>\n<li>栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配</li>\n<li>同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</li>\n<li>分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</li>\n</ul>\n<h3 id=\"栈上分配\"><a href=\"#栈上分配\" class=\"headerlink\" title=\"栈上分配\"></a>栈上分配</h3><p>JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</p>\n<p>常见的栈上分配的场景</p>\n<blockquote>\n<p>在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。</p>\n</blockquote>\n<h4 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h4><p>我们通过举例来说明 开启逃逸分析 和 未开启逃逸分析时候的情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 栈上分配</span><br><span class=\"hljs-comment\"> * -Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-07-20:23</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> String age;<br>    <span class=\"hljs-keyword\">private</span> String gender;<br>    <span class=\"hljs-keyword\">private</span> String phone;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StackAllocation</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000000</span>; i++) &#123;<br>            alloc();<br>        &#125;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>        System.out.println(<span class=\"hljs-string\">&quot;花费的时间为：&quot;</span> + (end - start) + <span class=\"hljs-string\">&quot; ms&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 为了方便查看堆内存中对象个数，线程sleep</span><br>        Thread.sleep(<span class=\"hljs-number\">10000000</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">alloc</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 未发生逃逸</span><br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>(); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>设置JVM参数，表示未开启逃逸分析</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">-<span class=\"hljs-title class_\">Xmx1</span>G -<span class=\"hljs-title class_\">Xms1</span>G -<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:-DoEscapeAnalysis</span> -<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:+PrintGCDetails</span><br></code></pre></td></tr></table></figure>\n\n<p>运行结果，同时还触发了GC操作</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">花费的时间为：664 ms<br></code></pre></td></tr></table></figure>\n\n<p>然后查看内存的情况，发现有大量的User存储在堆中</p>\n<p><img src=\"/images/jvm/image-20200707203038615.png\" alt=\"image-20200707203038615\"></p>\n<p>我们在开启逃逸分析</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">-<span class=\"hljs-title class_\">Xmx1</span>G -<span class=\"hljs-title class_\">Xms1</span>G -<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:+DoEscapeAnalysis</span> -<span class=\"hljs-variable constant_\">XX</span><span class=\"hljs-symbol\">:+PrintGCDetails</span><br></code></pre></td></tr></table></figure>\n\n<p>然后查看运行时间，我们能够发现花费的时间快速减少，同时不会发生GC操作</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">花费的时间为：5 ms<br></code></pre></td></tr></table></figure>\n\n<p>在看内存情况，我们发现只有很少的User对象，说明User未发生逃逸，因为它存储在栈中，随着栈的销毁而消失</p>\n<p><img src=\"/images/jvm/image-20200707203441718.png\" alt=\"image-20200707203441718\"></p>\n<h3 id=\"同步省略\"><a href=\"#同步省略\" class=\"headerlink\" title=\"同步省略\"></a>同步省略</h3><p>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</p>\n<p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。</p>\n<p>例如下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">f</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">hellis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    <span class=\"hljs-keyword\">synchronized</span>(hellis) &#123;<br>        System.out.println(hellis);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>代码中对hellis这个对象加锁，但是hellis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉，优化成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">f</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">hellis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>\tSystem.out.println(hellis);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>我们将其转换成字节码</p>\n<p><img src=\"/images/jvm/image-20200707205634266.png\" alt=\"image-20200707205634266\"></p>\n<h3 id=\"分离对象和标量替换\"><a href=\"#分离对象和标量替换\" class=\"headerlink\" title=\"分离对象和标量替换\"></a>分离对象和标量替换</h3><p>标量（scalar）是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。</p>\n<p>相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p>\n<p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> &#123;<br>    alloc();<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Point</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> x;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> y;<br>&#125;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">alloc</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Point</span> <span class=\"hljs-variable\">point</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Point</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;point.x&quot;</span> + point.x + <span class=\"hljs-string\">&quot;;point.y&quot;</span> + point.y);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>以上代码，经过标量替换后，就会变成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">alloc</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;<br>    System.out.println(<span class=\"hljs-string\">&quot;point.x = &quot;</span> + x + <span class=\"hljs-string\">&quot;; point.y=&quot;</span> + y);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。<br>标量替换为栈上分配提供了很好的基础。</p>\n<h3 id=\"代码优化之标量替换\"><a href=\"#代码优化之标量替换\" class=\"headerlink\" title=\"代码优化之标量替换\"></a>代码优化之标量替换</h3><p>上述代码在主函数中进行了1亿次alloc。调用进行对象创建，由于User对象实例需要占据约16字节的空间，因此累计分配空间达到将近1.5GB。如果堆空间小于这个值，就必然会发生GC。使用如下参数运行上述代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations<br></code></pre></td></tr></table></figure>\n\n<p>这里设置参数如下：</p>\n<ul>\n<li>参数-server：启动Server模式，因为在server模式下，才可以启用逃逸分析。</li>\n<li>参数-XX:+DoEscapeAnalysis：启用逃逸分析</li>\n<li>参数-Xmx10m：指定了堆空间最大为10MB</li>\n<li>参数-XX:+PrintGC：将打印Gc日志</li>\n<li>参数一xx：+EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有id和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配</li>\n</ul>\n<h3 id=\"逃逸分析的不足\"><a href=\"#逃逸分析的不足\" class=\"headerlink\" title=\"逃逸分析的不足\"></a>逃逸分析的不足</h3><p>关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟。</p>\n<p>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。<br>一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p>\n<p>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JvM设计者的选择。据我所知，oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。</p>\n<p>目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</p>\n<p>老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGc。</p>\n<p>当GC发生在老年代时则被称为MajorGc或者FullGC。一般的，MinorGc的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。</p>\n"},{"title":"commit合并","date":"2023-12-09T05:35:57.000Z","_content":"\n##  如何将多个commit合并为一个commit\n\n\n\n> 场景说明\n\n有时候，我们在本地提交代码时执行了多个无效的commit，比如因为多次扫描代码而产生的commit，这些commit不需要提交到origin。而最终提交到origin的commit只能有一个，因此，这时需要将多个commit合并为一个origin。\n> 详细操作\n\n## 1 . git log 查看commitId(hash)\n![查看commitId](images/git/git_merge_1.png)\n\n## 2 . 取origin的commitId作为原点，执行 `git rebase -i [commitId]`\n![picture2](images/git/git_merge_2.png)\n\n## 3.进入rebase vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出\n![picture3](images/git/git_merge_3.png)\n\n\n## 4.退出后自动进入commit message edit界面，这时将其他提交的message注释,wq后退出\n## 5.在idea中查看git log \n![picture4](images/git/git_merge_4.png)\n\n## 6.执行git push 操作\n![picture5](images/git/git_merge_5.png)\n","source":"_posts/git/commit合并.md","raw":"---\ntitle: commit合并\ndate: 2023-12-09 13:35:57\ntags: git\ncategories: git\n---\n\n##  如何将多个commit合并为一个commit\n\n\n\n> 场景说明\n\n有时候，我们在本地提交代码时执行了多个无效的commit，比如因为多次扫描代码而产生的commit，这些commit不需要提交到origin。而最终提交到origin的commit只能有一个，因此，这时需要将多个commit合并为一个origin。\n> 详细操作\n\n## 1 . git log 查看commitId(hash)\n![查看commitId](images/git/git_merge_1.png)\n\n## 2 . 取origin的commitId作为原点，执行 `git rebase -i [commitId]`\n![picture2](images/git/git_merge_2.png)\n\n## 3.进入rebase vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出\n![picture3](images/git/git_merge_3.png)\n\n\n## 4.退出后自动进入commit message edit界面，这时将其他提交的message注释,wq后退出\n## 5.在idea中查看git log \n![picture4](images/git/git_merge_4.png)\n\n## 6.执行git push 操作\n![picture5](images/git/git_merge_5.png)\n","slug":"git/commit合并","published":1,"updated":"2023-12-09T05:46:40.721Z","_id":"clpxmhixe0000wwwf2hkj57om","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"如何将多个commit合并为一个commit\"><a href=\"#如何将多个commit合并为一个commit\" class=\"headerlink\" title=\"如何将多个commit合并为一个commit\"></a>如何将多个commit合并为一个commit</h2><blockquote>\n<p>场景说明</p>\n</blockquote>\n<p>有时候，我们在本地提交代码时执行了多个无效的commit，比如因为多次扫描代码而产生的commit，这些commit不需要提交到origin。而最终提交到origin的commit只能有一个，因此，这时需要将多个commit合并为一个origin。</p>\n<blockquote>\n<p>详细操作</p>\n</blockquote>\n<h2 id=\"1-git-log-查看commitId-hash\"><a href=\"#1-git-log-查看commitId-hash\" class=\"headerlink\" title=\"1 . git log 查看commitId(hash)\"></a>1 . git log 查看commitId(hash)</h2><p><img src=\"/images/git/git_merge_1.png\" alt=\"查看commitId\"></p>\n<h2 id=\"2-取origin的commitId作为原点，执行-git-rebase-i-commitId\"><a href=\"#2-取origin的commitId作为原点，执行-git-rebase-i-commitId\" class=\"headerlink\" title=\"2 . 取origin的commitId作为原点，执行 git rebase -i [commitId]\"></a>2 . 取origin的commitId作为原点，执行 <code>git rebase -i [commitId]</code></h2><p><img src=\"/images/git/git_merge_2.png\" alt=\"picture2\"></p>\n<h2 id=\"3-进入rebase-vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出\"><a href=\"#3-进入rebase-vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出\" class=\"headerlink\" title=\"3.进入rebase vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出\"></a>3.进入rebase vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出</h2><p><img src=\"/images/git/git_merge_3.png\" alt=\"picture3\"></p>\n<h2 id=\"4-退出后自动进入commit-message-edit界面，这时将其他提交的message注释-wq后退出\"><a href=\"#4-退出后自动进入commit-message-edit界面，这时将其他提交的message注释-wq后退出\" class=\"headerlink\" title=\"4.退出后自动进入commit message edit界面，这时将其他提交的message注释,wq后退出\"></a>4.退出后自动进入commit message edit界面，这时将其他提交的message注释,wq后退出</h2><h2 id=\"5-在idea中查看git-log\"><a href=\"#5-在idea中查看git-log\" class=\"headerlink\" title=\"5.在idea中查看git log\"></a>5.在idea中查看git log</h2><p><img src=\"/images/git/git_merge_4.png\" alt=\"picture4\"></p>\n<h2 id=\"6-执行git-push-操作\"><a href=\"#6-执行git-push-操作\" class=\"headerlink\" title=\"6.执行git push 操作\"></a>6.执行git push 操作</h2><p><img src=\"/images/git/git_merge_5.png\" alt=\"picture5\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何将多个commit合并为一个commit\"><a href=\"#如何将多个commit合并为一个commit\" class=\"headerlink\" title=\"如何将多个commit合并为一个commit\"></a>如何将多个commit合并为一个commit</h2><blockquote>\n<p>场景说明</p>\n</blockquote>\n<p>有时候，我们在本地提交代码时执行了多个无效的commit，比如因为多次扫描代码而产生的commit，这些commit不需要提交到origin。而最终提交到origin的commit只能有一个，因此，这时需要将多个commit合并为一个origin。</p>\n<blockquote>\n<p>详细操作</p>\n</blockquote>\n<h2 id=\"1-git-log-查看commitId-hash\"><a href=\"#1-git-log-查看commitId-hash\" class=\"headerlink\" title=\"1 . git log 查看commitId(hash)\"></a>1 . git log 查看commitId(hash)</h2><p><img src=\"/images/git/git_merge_1.png\" alt=\"查看commitId\"></p>\n<h2 id=\"2-取origin的commitId作为原点，执行-git-rebase-i-commitId\"><a href=\"#2-取origin的commitId作为原点，执行-git-rebase-i-commitId\" class=\"headerlink\" title=\"2 . 取origin的commitId作为原点，执行 git rebase -i [commitId]\"></a>2 . 取origin的commitId作为原点，执行 <code>git rebase -i [commitId]</code></h2><p><img src=\"/images/git/git_merge_2.png\" alt=\"picture2\"></p>\n<h2 id=\"3-进入rebase-vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出\"><a href=\"#3-进入rebase-vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出\" class=\"headerlink\" title=\"3.进入rebase vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出\"></a>3.进入rebase vi界面，只保留第一行的pick，将其余的pick改为s，wq保存退出</h2><p><img src=\"/images/git/git_merge_3.png\" alt=\"picture3\"></p>\n<h2 id=\"4-退出后自动进入commit-message-edit界面，这时将其他提交的message注释-wq后退出\"><a href=\"#4-退出后自动进入commit-message-edit界面，这时将其他提交的message注释-wq后退出\" class=\"headerlink\" title=\"4.退出后自动进入commit message edit界面，这时将其他提交的message注释,wq后退出\"></a>4.退出后自动进入commit message edit界面，这时将其他提交的message注释,wq后退出</h2><h2 id=\"5-在idea中查看git-log\"><a href=\"#5-在idea中查看git-log\" class=\"headerlink\" title=\"5.在idea中查看git log\"></a>5.在idea中查看git log</h2><p><img src=\"/images/git/git_merge_4.png\" alt=\"picture4\"></p>\n<h2 id=\"6-执行git-push-操作\"><a href=\"#6-执行git-push-操作\" class=\"headerlink\" title=\"6.执行git push 操作\"></a>6.执行git push 操作</h2><p><img src=\"/images/git/git_merge_5.png\" alt=\"picture5\"></p>\n"},{"title":"垃圾收集算法","date":"2023-12-09T05:57:13.000Z","_content":"# 垃圾回收相关算法\n\n## 标记阶段：引用计数算法\n\n在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。\n\n那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。\n\n判断对象存活一般有两种方式：**引用计数算法**和**可达性分析算法。**\n\n引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。\n\n对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。\n\n优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。\n\n缺点：它需要单独的字段存储计数器，这样的做法增加了存储空间的开销。\n\n>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销。\n>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。\n\n### 循环引用\n\n当p的指针断开的时候，内部的引用形成一个循环，这就是循环引用，从而造成内存泄漏\n\n![image-20200712102205795](images/jvm/image-20200712102205795.png)\n\n### 举例\n\n我们使用一个案例来测试Java中是否采用的是引用计数算法\n\n```java\n/**\n * 引用计数算法测试\n *\n * @author: \n * @create: 2020-07-12-10:26\n */\npublic class RefCountGC {\n    // 这个成员属性的唯一作用就是占用一点内存\n    private byte[] bigSize = new byte[5*1024*1024];\n    // 引用\n    Object reference = null;\n\n    public static void main(String[] args) {\n        RefCountGC obj1 = new RefCountGC();\n        RefCountGC obj2 = new RefCountGC();\n        obj1.reference = obj2;\n        obj2.reference = obj1;\n        obj1 = null;\n        obj2 = null;\n        // 显示的执行垃圾收集行为，判断obj1 和 obj2是否被回收？\n        System.gc();\n    }\n}\n```\n\n运行结果\n\n```\n[GC (System.gc()) [PSYoungGen: 15490K->808K(76288K)] 15490K->816K(251392K), 0.0061980 secs] [Times: user=0.00 sys=0.00, real=0.36 secs] \n[Full GC (System.gc()) [PSYoungGen: 808K->0K(76288K)] [ParOldGen: 8K->672K(175104K)] 816K->672K(251392K), [Metaspace: 3479K->3479K(1056768K)], 0.0045983 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \nHeap\n PSYoungGen      total 76288K, used 655K [0x000000076b500000, 0x0000000770a00000, 0x00000007c0000000)\n  eden space 65536K, 1% used [0x000000076b500000,0x000000076b5a3ee8,0x000000076f500000)\n  from space 10752K, 0% used [0x000000076f500000,0x000000076f500000,0x000000076ff80000)\n  to   space 10752K, 0% used [0x000000076ff80000,0x000000076ff80000,0x0000000770a00000)\n ParOldGen       total 175104K, used 672K [0x00000006c1e00000, 0x00000006cc900000, 0x000000076b500000)\n  object space 175104K, 0% used [0x00000006c1e00000,0x00000006c1ea8070,0x00000006cc900000)\n Metaspace       used 3486K, capacity 4496K, committed 4864K, reserved 1056768K\n  class space    used 385K, capacity 388K, committed 512K, reserved 1048576K\n```\n\n我们能够看到，上述进行了GC收集的行为，将上述的新生代中的两个对象都进行回收了\n\n```\nPSYoungGen: 15490K->808K(76288K)] 15490K->816K(251392K)\n```\n\n如果使用引用计数算法，那么这两个对象将会无法回收。而现在两个对象被回收了，说明Java使用的不是引用计数算法来进行标记的。\n\n![image-20200712103230349](images/jvm/image-20200712103230349.png)\n\n### 小结\n\n引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的Python，它更是同时支持引用计数和垃圾收集机制。\n\n具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。\n\nJava并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。Python如何解决循环引用？\n\n>手动解除：很好理解，就是在合适的时机，解除引用关系。\n>使用弱引用weakref，weakref是Python提供的标准库，旨在解决循环引用。\n\n## 标记阶段：可达性分析算法\n\n### 概念\n\n可达性分析算法：也可以称为 根搜索算法、追踪性垃圾收集\n\n相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生。\n\n相较于引用计数算法，这里的可达性分析就是Java、C#选择的。这种类型的垃圾收集通常也叫作追踪性垃圾收集（Tracing Garbage Collection）\n\n### 思路\n\n所谓\"GCRoots”根集合就是一组必须活跃的引用。\n\n基本思路：\n\n- 可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。\n- 使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）\n- 如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。\n- 在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。\n\n![image-20200712104149246](images/jvm/image-20200712104149246.png)\n\n官场上的裙带关系，可达性分析在人类关系网中\n\n![image-20200712104312406](images/jvm/image-20200712104312406.png)\n\n### GC Roots可以是哪些？\n\n- 虚拟机栈中引用的对象\n  - 比如：各个线程被调用的方法中使用到的参数、局部变量等。\n- 本地方法栈内JNI（通常说的本地方法）引用的对象方法区中类静态属性引用的对象\n  - 比如：Java类的引用类型静态变量\n- 方法区中常量引用的对象\n  - 比如：字符串常量池（string Table）里的引用\n- 所有被同步锁synchronized持有的对象\n- Java虚拟机内部的引用。\n  - 基本数据类型对应的Class对象，一些常驻的异常对象（如：Nu11PointerException、outofMemoryError），系统类加载器。\n- 反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n\n![image-20200712104622677](images/jvm/image-20200712104622677.png)\n\n#### 总结\n\n总结一句话就是，除了堆空间外的一些结构，比如 虚拟机栈、本地方法栈、方法区、字符串常量池 等地方对堆空间进行引用的，都可以作为GC Roots进行可达性分析\n\n除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收（PartialGC）。\n\n如果只针对Java堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入GCRoots集合中去考虑，才能保证可达性分析的准确性。\n\n#### 小技巧\n\n由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个Root。\n\n### 注意\n\n如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证。\n\n这点也是导致GC进行时必须“stop The World”的一个重要原因。\n\n即使是号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。\n\n## 对象的finalization机制\n\nJava语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。\n\n当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的finalize()方法。\n\nfinalize() 方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。\n\n### 注意\n\n永远不要主动调用某个对象的finalize（）方法I应该交给垃圾回收机制调用。理由包括下面三点：\n\n- 在finalize（）时可能会导致对象复活。\n- finalize（）方法的执行时间是没有保障的，它完全由Gc线程决定，极端情况下，若不发生GC，则finalize（）方法将没有执行机会。\n  - 因为优先级比较低，即使主动调用该方法，也不会因此就直接进行回收\n- 一个糟糕的finalize（）会严重影响Gc的性能。\n\n从功能上来说，finalize（）方法与c++中的析构函数比较相似，但是Java采用的是基于垃圾回收器的自动内存管理机制，所以finalize（）方法在本质上不同于C++中的析构函数。\n\n由于finalize（）方法的存在，虚拟机中的对象一般处于三种可能的状态。\n\n### 生存还是死亡？\n\n如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段。**一个无法触及的对象有可能在某一个条件下“复活”自己**，如果这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。如下：\n\n- 可触及的：从根节点开始，可以到达这个对象。\n- 可复活的：对象的所有引用都被释放，但是对象有可能在finalize（）中复活。\n- 不可触及的：对象的finalize（）被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为**finalize()只会被调用一次**。\n\n以上3种状态中，是由于finalize（）方法的存在，进行的区分。只有在对象不可触及时才可以被回收。\n\n### 具体过程\n\n判定一个对象objA是否可回收，至少要经历两次标记过程：\n\n- 如果对象objA到GC Roots没有引用链，则进行第一次标记。\n\n- 进行筛选，判断此对象是否有必要执行finalize（）方法\n  - 如果对象objA没有重写finalize（）方法，或者finalize（）方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA被判定为不可触及的。\n  - 如果对象objA重写了finalize（）方法，且还未执行过，那么objA会被插入到F-Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize（）方法执行。\n  - finalize（）方法是对象逃脱死亡的最后机会，稍后GC会对F-Queue队列中的对象进行第二次标记。如果objA在finalize（）方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出“即将回收”集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的finalize方法只会被调用一次。\n\n![image-20200712110411885](images/jvm/image-20200712110411885.png)\n\n上图就是我们看到的Finalizer线程\n\n### 代码演示\n\n我们使用重写 finalize()方法，然后在方法的内部，重写将其存放到GC Roots中\n\n```java\n/**\n * 测试Object类中finalize()方法\n * 对象复活场景\n *\n * @author: 陌溪\n * @create: 2020-07-12-11:06\n */\npublic class CanReliveObj {\n    // 类变量，属于GC Roots的一部分\n    public static CanReliveObj canReliveObj;\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\"调用当前类重写的finalize()方法\");\n        canReliveObj = this;\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        canReliveObj = new CanReliveObj();\n        canReliveObj = null;\n        System.gc();\n        System.out.println(\"-----------------第一次gc操作------------\");\n        // 因为Finalizer线程的优先级比较低，暂停2秒，以等待它\n        Thread.sleep(2000);\n        if (canReliveObj == null) {\n            System.out.println(\"obj is dead\");\n        } else {\n            System.out.println(\"obj is still alive\");\n        }\n\n        System.out.println(\"-----------------第二次gc操作------------\");\n        canReliveObj = null;\n        System.gc();\n        // 下面代码和上面代码是一样的，但是 canReliveObj却自救失败了\n        Thread.sleep(2000);\n        if (canReliveObj == null) {\n            System.out.println(\"obj is dead\");\n        } else {\n            System.out.println(\"obj is still alive\");\n        }\n\n    }\n}\n```\n\n最后运行结果\n\n```\n-----------------第一次gc操作------------\n调用当前类重写的finalize()方法\nobj is still alive\n-----------------第二次gc操作------------\nobj is dead\n```\n\n在进行第一次清除的时候，我们会执行finalize方法，然后 对象 进行了一次自救操作，但是因为finalize()方法只会被调用一次，因此第二次该对象将会被垃圾清除。\n\n## MAT与JProfiler的GC Roots溯源\n\n### MAT是什么？\n\nMAT是Memory Analyzer的简称，它是一款功能强大的Java堆内存分析器。用于查找内存泄漏以及查看内存消耗情况。\n\nMAT是基于Eclipse开发的，是一款免费的性能分析工具。\n\n大家可以在http://www.eclipse.org/mat/下载并使用MAT\n\n### 命令行使用 jmap\n\n![image-20200712112026317](images/jvm/image-20200712112026317.png)\n\n### 使用JVIsualVM\n\n捕获的heap dump文件是一个临时文件，关闭JVisualVM后自动删除，若要保留，需要将其另存为文件。可通过以下方法捕获heap dump：\n\n在左侧“Application\"（应用程序）子窗口中右击相应的应用程序，选择Heap Dump（堆Dump）。\n\n在Monitor（监视）子标签页中点击Heap Dump（堆Dump）按钮。本地应用程序的Heap dumps作为应用程序标签页的一个子标签页打开。同时，heap dump在左侧的Application（应用程序）栏中对应一个含有时间戳的节点。\n\n右击这个节点选择save as（另存为）即可将heap dump保存到本地。\n\n### 使用MAT打开Dump文件\n\n打开后，我们就可以看到有哪些可以作为GC Roots的对象\n\n![image-20200712112512720](images/jvm/image-20200712112512720.png)\n\n里面我们能够看到有一些常用的Java类，然后Thread线程。\n\n### JProfiler的GC Roots溯源\n\n我们在实际的开发中，一般不会查找全部的GC Roots，可能只是查找某个对象的整个链路，或者称为GC Roots溯源，这个时候，我们就可以使用JProfiler\n\n![image-20200712113256075](images/jvm/image-20200712113256075.png)\n\n### 如何判断什么原因造成OOM\n\n当我们程序出现OOM的时候，我们就需要进行排查，我们首先使用下面的例子进行说明\n\n```java\n/**\n * 内存溢出排查\n * -Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError\n * @author: 陌溪\n * @create: 2020-07-12-14:56\n */\npublic class HeapOOM {\n    // 创建1M的文件\n    byte [] buffer = new byte[1 * 1024 * 1024];\n\n    public static void main(String[] args) {\n        ArrayList<HeapOOM> list = new ArrayList<>();\n        int count = 0;\n        try {\n            while (true) {\n                list.add(new HeapOOM());\n                count++;\n            }\n        } catch (Exception e) {\n            e.getStackTrace();\n            System.out.println(\"count:\" + count);\n        }\n    }\n}\n```\n\n上述代码就是不断的创建一个1M小字节数组，然后让内存溢出，我们需要限制一下内存大小，同时使用HeapDumpOnOutOfMemoryError将出错时候的dump文件输出\n\n```\n-Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError\n```\n\n我们将生成的dump文件打开，然后点击Biggest Objects就能够看到超大对象\n\n![image-20200712150229048](images/jvm/image-20200712150229048.png)\n\n然后我们通过线程，还能够定位到哪里出现OOM\n\n![image-20200712150303710](images/jvm/image-20200712150303710.png)\n\n## 清除阶段：标记-清除算法\n\n当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。目前在JVM中比较常见的三种垃圾收集算法是\n\n- 标记一清除算法（Mark-Sweep）\n- 复制算法（copying）\n- 标记-压缩算法（Mark-Compact）\n\n标记-清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被J.McCarthy等人在1960年提出并并应用于Lisp语言。\n\n### 执行过程\n\n当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除\n\n- **标记**：Collector从引用根节点开始遍历，**标记所有被引用的对象**。一般是在对象的Header中记录为可达对象。\n  - **标记的是引用的对象，不是垃圾！！**\n- **清除**：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收\n\n![image-20200712150935078](images/jvm/image-20200712150935078.png)\n\n### 什么是清除？\n\n这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放覆盖原有的地址。\n\n关于空闲列表是在为对象分配内存的时候 提过\n\n- 如果内存规整\n  - 采用指针碰撞的方式进行内存分配\n- 如果内存不规整\n  - 虚拟机需要维护一个列表\n  - 空闲列表分配\n\n###  缺点\n\n- 标记清除算法的效率不算高\n- 在进行GC的时候，需要停止整个应用程序，用户体验较差\n- 这种方式清理出来的空闲内存是不连续的，产生内碎片，需要维护一个空闲列表\n\n## 清除阶段：复制算法\n\n### 背景\n\n为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky于1963年发表了著名的论文，“使用双存储区的Lisp语言垃圾收集器CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）”。M.L.Minsky在该论文中描述的算法被人们称为复制（Copying）算法，它也被M.L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。\n\n### 核心思想\n\n将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收\n\n![image-20200712151916991](images/jvm/image-20200712151916991.png)\n\n把可达的对象，直接复制到另外一个区域中复制完成后，A区就没有用了，里面的对象可以直接清除掉，其实里面的新生代里面就用到了复制算法\n\n![image-20200712152029615](images/jvm/image-20200712152029615.png)\n\n### 优点\n\n- 没有标记和清除过程，实现简单，运行高效\n- 复制过去以后保证空间的连续性，不会出现“碎片”问题。\n\n### 缺点\n\n- 此算法的缺点也是很明显的，就是需要两倍的内存空间。\n- 对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小\n\n### 注意\n\n如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大，或者说非常低才行（老年代大量的对象存活，那么复制的对象将会有很多，效率会很低）\n\n在新生代，对常规应用的垃圾回收，一次通常可以回收70% - 99% 的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。\n\n![image-20200712152847218](images/jvm/image-20200712152847218.png)\n\n## 清除阶段：标记-整理算法\n\n### 背景\n\n复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。\n\n标记一清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以JvM的设计者需要在此基础之上进行改进。标记-压缩（Mark-Compact）算法由此诞生。\n\n1970年前后，G.L.Steele、C.J.Chene和D.s.Wise等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。\n\n### 执行过程\n\n第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象\n\n第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。\n\n![image-20200712153236508](images/jvm/image-20200712153236508.png)\n\n### 标清和标整的区别\n\n标记-压缩算法的最终效果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为标记-清除-压缩（Mark-Sweep-Compact）算法。\n\n二者的本质差异在于标记-清除算法是一种非移动式的回收算法，标记-压缩是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。\n\n### 标整的优缺点\n\n#### 优点\n\n- 消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。\n- 消除了复制算法当中，内存减半的高额代价。\n\n#### 缺点\n\n- 从效率上来说，标记-整理算法要低于复制算法。\n- 移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址\n- 移动过程中，需要全程暂停用户应用程序。即：STW\n\n## 小结\n\n效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。\n\n而为了尽量兼顾上面提到的三个指标，标记-整理算法相对来说更平滑一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记-清除多了一个整理内存的阶段。\n\n|              | 标记清除           | 标记整理         | 复制                                  |\n| ------------ | ------------------ | ---------------- | ------------------------------------- |\n| **速率**     | 中等               | 最慢             | 最快                                  |\n| **空间开销** | 少（但会堆积碎片） | 少（不堆积碎片） | 通常需要活对象的2倍空间（不堆积碎片） |\n| **移动对象** | 否                 | 是               | 是                                    |\n\n综合我们可以找到，没有最好的算法，只有最合适的算法\n\n### 分代收集算法\n\n前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。\n\n分代收集算法，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。\n\n在Java程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关，比如Http请求中的Session对象、线程、Socket连接，这类对象跟业务直接挂钩，因此生命周期比较长。但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：string对象，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。\n\n目前几乎所有的GC都采用分代手机算法执行垃圾回收的\n\n在HotSpot中，基于分代的概念，GC所使用的内存回收算法必须结合年轻代和老年代各自的特点。\n\n- 年轻代（Young Gen）\n\n年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。\n\n这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。\n\n- 老年代（Tenured Gen）\n\n老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。\n\n这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。\n\n- Mark阶段的开销与存活对象的数量成正比。\n- Sweep阶段的开销与所管理区域的大小成正相关。\n- compact阶段的开销与存活对象的数据成正比。\n\n以HotSpot中的CMS回收器为例，CMS是基于Mark-Sweep实现的，对于对象的回收效率很高。而对于碎片问题，CMS采用基于Mark-Compact算法的Serial old回收器作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用serial old执行FullGC以达到对老年代内存的整理。\n\n分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代\n\n## 增量收集算法\n\n### 概述\n\n上述现有的算法，在垃圾回收过程中，应用软件将处于一种stop the World的状态。在stop the World状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。\n\n如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。\n\n总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。**增量收集算法通过对线程间冲突的妥善处理**，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作\n\n### 缺点\n\n使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。\n\n## 分区算法\n\n一般来说，在相同条件下，堆空间越大，一次Gc时所需要的时间就越长，有关GC产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。\n\n分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。\n每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。\n\n![image-20200712165318590](images/jvm/image-20200712165318590.png)\n\n## 写到最后\n\n注意，这些只是基本的算法思路，实际GC实现过程要复杂的多，目前还在发展中的前沿GC都是复合算法，并且并行和并发兼备。","source":"_posts/jvm/垃圾收集算法.md","raw":"---\ntitle: 垃圾收集算法\ndate: 2023-12-09 13:57:13\ntags: jvm\ncategories: java\n---\n# 垃圾回收相关算法\n\n## 标记阶段：引用计数算法\n\n在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。\n\n那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。\n\n判断对象存活一般有两种方式：**引用计数算法**和**可达性分析算法。**\n\n引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。\n\n对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。\n\n优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。\n\n缺点：它需要单独的字段存储计数器，这样的做法增加了存储空间的开销。\n\n>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销。\n>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。\n\n### 循环引用\n\n当p的指针断开的时候，内部的引用形成一个循环，这就是循环引用，从而造成内存泄漏\n\n![image-20200712102205795](images/jvm/image-20200712102205795.png)\n\n### 举例\n\n我们使用一个案例来测试Java中是否采用的是引用计数算法\n\n```java\n/**\n * 引用计数算法测试\n *\n * @author: \n * @create: 2020-07-12-10:26\n */\npublic class RefCountGC {\n    // 这个成员属性的唯一作用就是占用一点内存\n    private byte[] bigSize = new byte[5*1024*1024];\n    // 引用\n    Object reference = null;\n\n    public static void main(String[] args) {\n        RefCountGC obj1 = new RefCountGC();\n        RefCountGC obj2 = new RefCountGC();\n        obj1.reference = obj2;\n        obj2.reference = obj1;\n        obj1 = null;\n        obj2 = null;\n        // 显示的执行垃圾收集行为，判断obj1 和 obj2是否被回收？\n        System.gc();\n    }\n}\n```\n\n运行结果\n\n```\n[GC (System.gc()) [PSYoungGen: 15490K->808K(76288K)] 15490K->816K(251392K), 0.0061980 secs] [Times: user=0.00 sys=0.00, real=0.36 secs] \n[Full GC (System.gc()) [PSYoungGen: 808K->0K(76288K)] [ParOldGen: 8K->672K(175104K)] 816K->672K(251392K), [Metaspace: 3479K->3479K(1056768K)], 0.0045983 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \nHeap\n PSYoungGen      total 76288K, used 655K [0x000000076b500000, 0x0000000770a00000, 0x00000007c0000000)\n  eden space 65536K, 1% used [0x000000076b500000,0x000000076b5a3ee8,0x000000076f500000)\n  from space 10752K, 0% used [0x000000076f500000,0x000000076f500000,0x000000076ff80000)\n  to   space 10752K, 0% used [0x000000076ff80000,0x000000076ff80000,0x0000000770a00000)\n ParOldGen       total 175104K, used 672K [0x00000006c1e00000, 0x00000006cc900000, 0x000000076b500000)\n  object space 175104K, 0% used [0x00000006c1e00000,0x00000006c1ea8070,0x00000006cc900000)\n Metaspace       used 3486K, capacity 4496K, committed 4864K, reserved 1056768K\n  class space    used 385K, capacity 388K, committed 512K, reserved 1048576K\n```\n\n我们能够看到，上述进行了GC收集的行为，将上述的新生代中的两个对象都进行回收了\n\n```\nPSYoungGen: 15490K->808K(76288K)] 15490K->816K(251392K)\n```\n\n如果使用引用计数算法，那么这两个对象将会无法回收。而现在两个对象被回收了，说明Java使用的不是引用计数算法来进行标记的。\n\n![image-20200712103230349](images/jvm/image-20200712103230349.png)\n\n### 小结\n\n引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的Python，它更是同时支持引用计数和垃圾收集机制。\n\n具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。\n\nJava并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。Python如何解决循环引用？\n\n>手动解除：很好理解，就是在合适的时机，解除引用关系。\n>使用弱引用weakref，weakref是Python提供的标准库，旨在解决循环引用。\n\n## 标记阶段：可达性分析算法\n\n### 概念\n\n可达性分析算法：也可以称为 根搜索算法、追踪性垃圾收集\n\n相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生。\n\n相较于引用计数算法，这里的可达性分析就是Java、C#选择的。这种类型的垃圾收集通常也叫作追踪性垃圾收集（Tracing Garbage Collection）\n\n### 思路\n\n所谓\"GCRoots”根集合就是一组必须活跃的引用。\n\n基本思路：\n\n- 可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。\n- 使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）\n- 如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。\n- 在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。\n\n![image-20200712104149246](images/jvm/image-20200712104149246.png)\n\n官场上的裙带关系，可达性分析在人类关系网中\n\n![image-20200712104312406](images/jvm/image-20200712104312406.png)\n\n### GC Roots可以是哪些？\n\n- 虚拟机栈中引用的对象\n  - 比如：各个线程被调用的方法中使用到的参数、局部变量等。\n- 本地方法栈内JNI（通常说的本地方法）引用的对象方法区中类静态属性引用的对象\n  - 比如：Java类的引用类型静态变量\n- 方法区中常量引用的对象\n  - 比如：字符串常量池（string Table）里的引用\n- 所有被同步锁synchronized持有的对象\n- Java虚拟机内部的引用。\n  - 基本数据类型对应的Class对象，一些常驻的异常对象（如：Nu11PointerException、outofMemoryError），系统类加载器。\n- 反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n\n![image-20200712104622677](images/jvm/image-20200712104622677.png)\n\n#### 总结\n\n总结一句话就是，除了堆空间外的一些结构，比如 虚拟机栈、本地方法栈、方法区、字符串常量池 等地方对堆空间进行引用的，都可以作为GC Roots进行可达性分析\n\n除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收（PartialGC）。\n\n如果只针对Java堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入GCRoots集合中去考虑，才能保证可达性分析的准确性。\n\n#### 小技巧\n\n由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个Root。\n\n### 注意\n\n如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证。\n\n这点也是导致GC进行时必须“stop The World”的一个重要原因。\n\n即使是号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。\n\n## 对象的finalization机制\n\nJava语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。\n\n当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的finalize()方法。\n\nfinalize() 方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。\n\n### 注意\n\n永远不要主动调用某个对象的finalize（）方法I应该交给垃圾回收机制调用。理由包括下面三点：\n\n- 在finalize（）时可能会导致对象复活。\n- finalize（）方法的执行时间是没有保障的，它完全由Gc线程决定，极端情况下，若不发生GC，则finalize（）方法将没有执行机会。\n  - 因为优先级比较低，即使主动调用该方法，也不会因此就直接进行回收\n- 一个糟糕的finalize（）会严重影响Gc的性能。\n\n从功能上来说，finalize（）方法与c++中的析构函数比较相似，但是Java采用的是基于垃圾回收器的自动内存管理机制，所以finalize（）方法在本质上不同于C++中的析构函数。\n\n由于finalize（）方法的存在，虚拟机中的对象一般处于三种可能的状态。\n\n### 生存还是死亡？\n\n如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段。**一个无法触及的对象有可能在某一个条件下“复活”自己**，如果这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。如下：\n\n- 可触及的：从根节点开始，可以到达这个对象。\n- 可复活的：对象的所有引用都被释放，但是对象有可能在finalize（）中复活。\n- 不可触及的：对象的finalize（）被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为**finalize()只会被调用一次**。\n\n以上3种状态中，是由于finalize（）方法的存在，进行的区分。只有在对象不可触及时才可以被回收。\n\n### 具体过程\n\n判定一个对象objA是否可回收，至少要经历两次标记过程：\n\n- 如果对象objA到GC Roots没有引用链，则进行第一次标记。\n\n- 进行筛选，判断此对象是否有必要执行finalize（）方法\n  - 如果对象objA没有重写finalize（）方法，或者finalize（）方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA被判定为不可触及的。\n  - 如果对象objA重写了finalize（）方法，且还未执行过，那么objA会被插入到F-Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize（）方法执行。\n  - finalize（）方法是对象逃脱死亡的最后机会，稍后GC会对F-Queue队列中的对象进行第二次标记。如果objA在finalize（）方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出“即将回收”集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的finalize方法只会被调用一次。\n\n![image-20200712110411885](images/jvm/image-20200712110411885.png)\n\n上图就是我们看到的Finalizer线程\n\n### 代码演示\n\n我们使用重写 finalize()方法，然后在方法的内部，重写将其存放到GC Roots中\n\n```java\n/**\n * 测试Object类中finalize()方法\n * 对象复活场景\n *\n * @author: 陌溪\n * @create: 2020-07-12-11:06\n */\npublic class CanReliveObj {\n    // 类变量，属于GC Roots的一部分\n    public static CanReliveObj canReliveObj;\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        System.out.println(\"调用当前类重写的finalize()方法\");\n        canReliveObj = this;\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        canReliveObj = new CanReliveObj();\n        canReliveObj = null;\n        System.gc();\n        System.out.println(\"-----------------第一次gc操作------------\");\n        // 因为Finalizer线程的优先级比较低，暂停2秒，以等待它\n        Thread.sleep(2000);\n        if (canReliveObj == null) {\n            System.out.println(\"obj is dead\");\n        } else {\n            System.out.println(\"obj is still alive\");\n        }\n\n        System.out.println(\"-----------------第二次gc操作------------\");\n        canReliveObj = null;\n        System.gc();\n        // 下面代码和上面代码是一样的，但是 canReliveObj却自救失败了\n        Thread.sleep(2000);\n        if (canReliveObj == null) {\n            System.out.println(\"obj is dead\");\n        } else {\n            System.out.println(\"obj is still alive\");\n        }\n\n    }\n}\n```\n\n最后运行结果\n\n```\n-----------------第一次gc操作------------\n调用当前类重写的finalize()方法\nobj is still alive\n-----------------第二次gc操作------------\nobj is dead\n```\n\n在进行第一次清除的时候，我们会执行finalize方法，然后 对象 进行了一次自救操作，但是因为finalize()方法只会被调用一次，因此第二次该对象将会被垃圾清除。\n\n## MAT与JProfiler的GC Roots溯源\n\n### MAT是什么？\n\nMAT是Memory Analyzer的简称，它是一款功能强大的Java堆内存分析器。用于查找内存泄漏以及查看内存消耗情况。\n\nMAT是基于Eclipse开发的，是一款免费的性能分析工具。\n\n大家可以在http://www.eclipse.org/mat/下载并使用MAT\n\n### 命令行使用 jmap\n\n![image-20200712112026317](images/jvm/image-20200712112026317.png)\n\n### 使用JVIsualVM\n\n捕获的heap dump文件是一个临时文件，关闭JVisualVM后自动删除，若要保留，需要将其另存为文件。可通过以下方法捕获heap dump：\n\n在左侧“Application\"（应用程序）子窗口中右击相应的应用程序，选择Heap Dump（堆Dump）。\n\n在Monitor（监视）子标签页中点击Heap Dump（堆Dump）按钮。本地应用程序的Heap dumps作为应用程序标签页的一个子标签页打开。同时，heap dump在左侧的Application（应用程序）栏中对应一个含有时间戳的节点。\n\n右击这个节点选择save as（另存为）即可将heap dump保存到本地。\n\n### 使用MAT打开Dump文件\n\n打开后，我们就可以看到有哪些可以作为GC Roots的对象\n\n![image-20200712112512720](images/jvm/image-20200712112512720.png)\n\n里面我们能够看到有一些常用的Java类，然后Thread线程。\n\n### JProfiler的GC Roots溯源\n\n我们在实际的开发中，一般不会查找全部的GC Roots，可能只是查找某个对象的整个链路，或者称为GC Roots溯源，这个时候，我们就可以使用JProfiler\n\n![image-20200712113256075](images/jvm/image-20200712113256075.png)\n\n### 如何判断什么原因造成OOM\n\n当我们程序出现OOM的时候，我们就需要进行排查，我们首先使用下面的例子进行说明\n\n```java\n/**\n * 内存溢出排查\n * -Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError\n * @author: 陌溪\n * @create: 2020-07-12-14:56\n */\npublic class HeapOOM {\n    // 创建1M的文件\n    byte [] buffer = new byte[1 * 1024 * 1024];\n\n    public static void main(String[] args) {\n        ArrayList<HeapOOM> list = new ArrayList<>();\n        int count = 0;\n        try {\n            while (true) {\n                list.add(new HeapOOM());\n                count++;\n            }\n        } catch (Exception e) {\n            e.getStackTrace();\n            System.out.println(\"count:\" + count);\n        }\n    }\n}\n```\n\n上述代码就是不断的创建一个1M小字节数组，然后让内存溢出，我们需要限制一下内存大小，同时使用HeapDumpOnOutOfMemoryError将出错时候的dump文件输出\n\n```\n-Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError\n```\n\n我们将生成的dump文件打开，然后点击Biggest Objects就能够看到超大对象\n\n![image-20200712150229048](images/jvm/image-20200712150229048.png)\n\n然后我们通过线程，还能够定位到哪里出现OOM\n\n![image-20200712150303710](images/jvm/image-20200712150303710.png)\n\n## 清除阶段：标记-清除算法\n\n当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。目前在JVM中比较常见的三种垃圾收集算法是\n\n- 标记一清除算法（Mark-Sweep）\n- 复制算法（copying）\n- 标记-压缩算法（Mark-Compact）\n\n标记-清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被J.McCarthy等人在1960年提出并并应用于Lisp语言。\n\n### 执行过程\n\n当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除\n\n- **标记**：Collector从引用根节点开始遍历，**标记所有被引用的对象**。一般是在对象的Header中记录为可达对象。\n  - **标记的是引用的对象，不是垃圾！！**\n- **清除**：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收\n\n![image-20200712150935078](images/jvm/image-20200712150935078.png)\n\n### 什么是清除？\n\n这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放覆盖原有的地址。\n\n关于空闲列表是在为对象分配内存的时候 提过\n\n- 如果内存规整\n  - 采用指针碰撞的方式进行内存分配\n- 如果内存不规整\n  - 虚拟机需要维护一个列表\n  - 空闲列表分配\n\n###  缺点\n\n- 标记清除算法的效率不算高\n- 在进行GC的时候，需要停止整个应用程序，用户体验较差\n- 这种方式清理出来的空闲内存是不连续的，产生内碎片，需要维护一个空闲列表\n\n## 清除阶段：复制算法\n\n### 背景\n\n为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky于1963年发表了著名的论文，“使用双存储区的Lisp语言垃圾收集器CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）”。M.L.Minsky在该论文中描述的算法被人们称为复制（Copying）算法，它也被M.L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。\n\n### 核心思想\n\n将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收\n\n![image-20200712151916991](images/jvm/image-20200712151916991.png)\n\n把可达的对象，直接复制到另外一个区域中复制完成后，A区就没有用了，里面的对象可以直接清除掉，其实里面的新生代里面就用到了复制算法\n\n![image-20200712152029615](images/jvm/image-20200712152029615.png)\n\n### 优点\n\n- 没有标记和清除过程，实现简单，运行高效\n- 复制过去以后保证空间的连续性，不会出现“碎片”问题。\n\n### 缺点\n\n- 此算法的缺点也是很明显的，就是需要两倍的内存空间。\n- 对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小\n\n### 注意\n\n如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大，或者说非常低才行（老年代大量的对象存活，那么复制的对象将会有很多，效率会很低）\n\n在新生代，对常规应用的垃圾回收，一次通常可以回收70% - 99% 的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。\n\n![image-20200712152847218](images/jvm/image-20200712152847218.png)\n\n## 清除阶段：标记-整理算法\n\n### 背景\n\n复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。\n\n标记一清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以JvM的设计者需要在此基础之上进行改进。标记-压缩（Mark-Compact）算法由此诞生。\n\n1970年前后，G.L.Steele、C.J.Chene和D.s.Wise等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。\n\n### 执行过程\n\n第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象\n\n第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。\n\n![image-20200712153236508](images/jvm/image-20200712153236508.png)\n\n### 标清和标整的区别\n\n标记-压缩算法的最终效果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为标记-清除-压缩（Mark-Sweep-Compact）算法。\n\n二者的本质差异在于标记-清除算法是一种非移动式的回收算法，标记-压缩是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。\n\n### 标整的优缺点\n\n#### 优点\n\n- 消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。\n- 消除了复制算法当中，内存减半的高额代价。\n\n#### 缺点\n\n- 从效率上来说，标记-整理算法要低于复制算法。\n- 移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址\n- 移动过程中，需要全程暂停用户应用程序。即：STW\n\n## 小结\n\n效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。\n\n而为了尽量兼顾上面提到的三个指标，标记-整理算法相对来说更平滑一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记-清除多了一个整理内存的阶段。\n\n|              | 标记清除           | 标记整理         | 复制                                  |\n| ------------ | ------------------ | ---------------- | ------------------------------------- |\n| **速率**     | 中等               | 最慢             | 最快                                  |\n| **空间开销** | 少（但会堆积碎片） | 少（不堆积碎片） | 通常需要活对象的2倍空间（不堆积碎片） |\n| **移动对象** | 否                 | 是               | 是                                    |\n\n综合我们可以找到，没有最好的算法，只有最合适的算法\n\n### 分代收集算法\n\n前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。\n\n分代收集算法，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。\n\n在Java程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关，比如Http请求中的Session对象、线程、Socket连接，这类对象跟业务直接挂钩，因此生命周期比较长。但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：string对象，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。\n\n目前几乎所有的GC都采用分代手机算法执行垃圾回收的\n\n在HotSpot中，基于分代的概念，GC所使用的内存回收算法必须结合年轻代和老年代各自的特点。\n\n- 年轻代（Young Gen）\n\n年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。\n\n这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。\n\n- 老年代（Tenured Gen）\n\n老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。\n\n这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。\n\n- Mark阶段的开销与存活对象的数量成正比。\n- Sweep阶段的开销与所管理区域的大小成正相关。\n- compact阶段的开销与存活对象的数据成正比。\n\n以HotSpot中的CMS回收器为例，CMS是基于Mark-Sweep实现的，对于对象的回收效率很高。而对于碎片问题，CMS采用基于Mark-Compact算法的Serial old回收器作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用serial old执行FullGC以达到对老年代内存的整理。\n\n分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代\n\n## 增量收集算法\n\n### 概述\n\n上述现有的算法，在垃圾回收过程中，应用软件将处于一种stop the World的状态。在stop the World状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。\n\n如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。\n\n总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。**增量收集算法通过对线程间冲突的妥善处理**，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作\n\n### 缺点\n\n使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。\n\n## 分区算法\n\n一般来说，在相同条件下，堆空间越大，一次Gc时所需要的时间就越长，有关GC产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。\n\n分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。\n每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。\n\n![image-20200712165318590](images/jvm/image-20200712165318590.png)\n\n## 写到最后\n\n注意，这些只是基本的算法思路，实际GC实现过程要复杂的多，目前还在发展中的前沿GC都是复合算法，并且并行和并发兼备。","slug":"jvm/垃圾收集算法","published":1,"updated":"2023-12-09T05:59:53.197Z","_id":"clpxn8vyo0005wwwfctr34eq6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"垃圾回收相关算法\"><a href=\"#垃圾回收相关算法\" class=\"headerlink\" title=\"垃圾回收相关算法\"></a>垃圾回收相关算法</h1><h2 id=\"标记阶段：引用计数算法\"><a href=\"#标记阶段：引用计数算法\" class=\"headerlink\" title=\"标记阶段：引用计数算法\"></a>标记阶段：引用计数算法</h2><p>在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。</p>\n<p>那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。</p>\n<p>判断对象存活一般有两种方式：<strong>引用计数算法</strong>和<strong>可达性分析算法。</strong></p>\n<p>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。</p>\n<p>对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。</p>\n<p>优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。</p>\n<p>缺点：它需要单独的字段存储计数器，这样的做法增加了存储空间的开销。</p>\n<blockquote>\n<p>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销。<br>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。</p>\n</blockquote>\n<h3 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h3><p>当p的指针断开的时候，内部的引用形成一个循环，这就是循环引用，从而造成内存泄漏</p>\n<p><img src=\"/images/jvm/image-20200712102205795.png\" alt=\"image-20200712102205795\"></p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>我们使用一个案例来测试Java中是否采用的是引用计数算法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 引用计数算法测试</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: </span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-12-10:26</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RefCountGC</span> &#123;<br>    <span class=\"hljs-comment\">// 这个成员属性的唯一作用就是占用一点内存</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">byte</span>[] bigSize = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>];<br>    <span class=\"hljs-comment\">// 引用</span><br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">reference</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">RefCountGC</span> <span class=\"hljs-variable\">obj1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefCountGC</span>();<br>        <span class=\"hljs-type\">RefCountGC</span> <span class=\"hljs-variable\">obj2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefCountGC</span>();<br>        obj1.reference = obj2;<br>        obj2.reference = obj1;<br>        obj1 = <span class=\"hljs-literal\">null</span>;<br>        obj2 = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-comment\">// 显示的执行垃圾收集行为，判断obj1 和 obj2是否被回收？</span><br>        System.gc();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mathematica\"><span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">System</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">gc</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">15490</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">808</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">76288</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">15490</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">816</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">251392</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0061980</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.36</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Full</span> <span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">System</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">gc</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">808</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">76288</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">ParOldGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">8</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">672</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">175104</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">816</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">672</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">251392</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">Metaspace</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">3479</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">3479</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0045983</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-variable\">Heap</span><br> <span class=\"hljs-variable\">PSYoungGen</span>      <span class=\"hljs-variable\">total</span> <span class=\"hljs-number\">76288</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">655</span><span class=\"hljs-built_in\">K</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076b500000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000770a00000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000007c0000000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">eden</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">65536</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076b500000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076b5a3ee8</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076f500000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">from</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">10752</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076f500000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076f500000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076ff80000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">to</span>   <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">10752</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076ff80000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076ff80000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000770a00000</span><span class=\"hljs-punctuation\">)</span><br> <span class=\"hljs-variable\">ParOldGen</span>       <span class=\"hljs-variable\">total</span> <span class=\"hljs-number\">175104</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">672</span><span class=\"hljs-built_in\">K</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006c1e00000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006cc900000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076b500000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">object</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">175104</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006c1e00000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006c1ea8070</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006cc900000</span><span class=\"hljs-punctuation\">)</span><br> <span class=\"hljs-variable\">Metaspace</span>       <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">3486</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">capacity</span> <span class=\"hljs-number\">4496</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">committed</span> <span class=\"hljs-number\">4864</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">reserved</span> <span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><br>  <span class=\"hljs-variable\">class</span> <span class=\"hljs-variable\">space</span>    <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">385</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">capacity</span> <span class=\"hljs-number\">388</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">committed</span> <span class=\"hljs-number\">512</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">reserved</span> <span class=\"hljs-number\">1048576</span><span class=\"hljs-built_in\">K</span><br></code></pre></td></tr></table></figure>\n\n<p>我们能够看到，上述进行了GC收集的行为，将上述的新生代中的两个对象都进行回收了</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">PSYoungGen</span>: <span class=\"hljs-number\">15490</span>K-&gt;<span class=\"hljs-number\">808</span>K(<span class=\"hljs-number\">76288</span>K)] <span class=\"hljs-number\">15490</span>K-&gt;<span class=\"hljs-number\">816</span>K(<span class=\"hljs-number\">251392</span>K)<br></code></pre></td></tr></table></figure>\n\n<p>如果使用引用计数算法，那么这两个对象将会无法回收。而现在两个对象被回收了，说明Java使用的不是引用计数算法来进行标记的。</p>\n<p><img src=\"/images/jvm/image-20200712103230349.png\" alt=\"image-20200712103230349\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的Python，它更是同时支持引用计数和垃圾收集机制。</p>\n<p>具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。</p>\n<p>Java并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。Python如何解决循环引用？</p>\n<blockquote>\n<p>手动解除：很好理解，就是在合适的时机，解除引用关系。<br>使用弱引用weakref，weakref是Python提供的标准库，旨在解决循环引用。</p>\n</blockquote>\n<h2 id=\"标记阶段：可达性分析算法\"><a href=\"#标记阶段：可达性分析算法\" class=\"headerlink\" title=\"标记阶段：可达性分析算法\"></a>标记阶段：可达性分析算法</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>可达性分析算法：也可以称为 根搜索算法、追踪性垃圾收集</p>\n<p>相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生。</p>\n<p>相较于引用计数算法，这里的可达性分析就是Java、C#选择的。这种类型的垃圾收集通常也叫作追踪性垃圾收集（Tracing Garbage Collection）</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>所谓”GCRoots”根集合就是一组必须活跃的引用。</p>\n<p>基本思路：</p>\n<ul>\n<li>可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。</li>\n<li>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）</li>\n<li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</li>\n<li>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200712104149246.png\" alt=\"image-20200712104149246\"></p>\n<p>官场上的裙带关系，可达性分析在人类关系网中</p>\n<p><img src=\"/images/jvm/image-20200712104312406.png\" alt=\"image-20200712104312406\"></p>\n<h3 id=\"GC-Roots可以是哪些？\"><a href=\"#GC-Roots可以是哪些？\" class=\"headerlink\" title=\"GC Roots可以是哪些？\"></a>GC Roots可以是哪些？</h3><ul>\n<li>虚拟机栈中引用的对象<ul>\n<li>比如：各个线程被调用的方法中使用到的参数、局部变量等。</li>\n</ul>\n</li>\n<li>本地方法栈内JNI（通常说的本地方法）引用的对象方法区中类静态属性引用的对象<ul>\n<li>比如：Java类的引用类型静态变量</li>\n</ul>\n</li>\n<li>方法区中常量引用的对象<ul>\n<li>比如：字符串常量池（string Table）里的引用</li>\n</ul>\n</li>\n<li>所有被同步锁synchronized持有的对象</li>\n<li>Java虚拟机内部的引用。<ul>\n<li>基本数据类型对应的Class对象，一些常驻的异常对象（如：Nu11PointerException、outofMemoryError），系统类加载器。</li>\n</ul>\n</li>\n<li>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200712104622677.png\" alt=\"image-20200712104622677\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>总结一句话就是，除了堆空间外的一些结构，比如 虚拟机栈、本地方法栈、方法区、字符串常量池 等地方对堆空间进行引用的，都可以作为GC Roots进行可达性分析</p>\n<p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收（PartialGC）。</p>\n<p>如果只针对Java堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入GCRoots集合中去考虑，才能保证可达性分析的准确性。</p>\n<h4 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h4><p>由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个Root。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证。</p>\n<p>这点也是导致GC进行时必须“stop The World”的一个重要原因。</p>\n<p>即使是号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</p>\n<h2 id=\"对象的finalization机制\"><a href=\"#对象的finalization机制\" class=\"headerlink\" title=\"对象的finalization机制\"></a>对象的finalization机制</h2><p>Java语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。</p>\n<p>当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的finalize()方法。</p>\n<p>finalize() 方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</p>\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>永远不要主动调用某个对象的finalize（）方法I应该交给垃圾回收机制调用。理由包括下面三点：</p>\n<ul>\n<li>在finalize（）时可能会导致对象复活。</li>\n<li>finalize（）方法的执行时间是没有保障的，它完全由Gc线程决定，极端情况下，若不发生GC，则finalize（）方法将没有执行机会。<ul>\n<li>因为优先级比较低，即使主动调用该方法，也不会因此就直接进行回收</li>\n</ul>\n</li>\n<li>一个糟糕的finalize（）会严重影响Gc的性能。</li>\n</ul>\n<p>从功能上来说，finalize（）方法与c++中的析构函数比较相似，但是Java采用的是基于垃圾回收器的自动内存管理机制，所以finalize（）方法在本质上不同于C++中的析构函数。</p>\n<p>由于finalize（）方法的存在，虚拟机中的对象一般处于三种可能的状态。</p>\n<h3 id=\"生存还是死亡？\"><a href=\"#生存还是死亡？\" class=\"headerlink\" title=\"生存还是死亡？\"></a>生存还是死亡？</h3><p>如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段。<strong>一个无法触及的对象有可能在某一个条件下“复活”自己</strong>，如果这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。如下：</p>\n<ul>\n<li>可触及的：从根节点开始，可以到达这个对象。</li>\n<li>可复活的：对象的所有引用都被释放，但是对象有可能在finalize（）中复活。</li>\n<li>不可触及的：对象的finalize（）被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为<strong>finalize()只会被调用一次</strong>。</li>\n</ul>\n<p>以上3种状态中，是由于finalize（）方法的存在，进行的区分。只有在对象不可触及时才可以被回收。</p>\n<h3 id=\"具体过程\"><a href=\"#具体过程\" class=\"headerlink\" title=\"具体过程\"></a>具体过程</h3><p>判定一个对象objA是否可回收，至少要经历两次标记过程：</p>\n<ul>\n<li><p>如果对象objA到GC Roots没有引用链，则进行第一次标记。</p>\n</li>\n<li><p>进行筛选，判断此对象是否有必要执行finalize（）方法</p>\n<ul>\n<li>如果对象objA没有重写finalize（）方法，或者finalize（）方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA被判定为不可触及的。</li>\n<li>如果对象objA重写了finalize（）方法，且还未执行过，那么objA会被插入到F-Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize（）方法执行。</li>\n<li>finalize（）方法是对象逃脱死亡的最后机会，稍后GC会对F-Queue队列中的对象进行第二次标记。如果objA在finalize（）方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出“即将回收”集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的finalize方法只会被调用一次。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200712110411885.png\" alt=\"image-20200712110411885\"></p>\n<p>上图就是我们看到的Finalizer线程</p>\n<h3 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h3><p>我们使用重写 finalize()方法，然后在方法的内部，重写将其存放到GC Roots中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 测试Object类中finalize()方法</span><br><span class=\"hljs-comment\"> * 对象复活场景</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-12-11:06</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CanReliveObj</span> &#123;<br>    <span class=\"hljs-comment\">// 类变量，属于GC Roots的一部分</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> CanReliveObj canReliveObj;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">finalize</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Throwable &#123;<br>        <span class=\"hljs-built_in\">super</span>.finalize();<br>        System.out.println(<span class=\"hljs-string\">&quot;调用当前类重写的finalize()方法&quot;</span>);<br>        canReliveObj = <span class=\"hljs-built_in\">this</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        canReliveObj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CanReliveObj</span>();<br>        canReliveObj = <span class=\"hljs-literal\">null</span>;<br>        System.gc();<br>        System.out.println(<span class=\"hljs-string\">&quot;-----------------第一次gc操作------------&quot;</span>);<br>        <span class=\"hljs-comment\">// 因为Finalizer线程的优先级比较低，暂停2秒，以等待它</span><br>        Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>        <span class=\"hljs-keyword\">if</span> (canReliveObj == <span class=\"hljs-literal\">null</span>) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;obj is dead&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;obj is still alive&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class=\"hljs-string\">&quot;-----------------第二次gc操作------------&quot;</span>);<br>        canReliveObj = <span class=\"hljs-literal\">null</span>;<br>        System.gc();<br>        <span class=\"hljs-comment\">// 下面代码和上面代码是一样的，但是 canReliveObj却自救失败了</span><br>        Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>        <span class=\"hljs-keyword\">if</span> (canReliveObj == <span class=\"hljs-literal\">null</span>) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;obj is dead&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;obj is still alive&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>最后运行结果</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\"><span class=\"hljs-comment\">-----------------第一次gc操作------------</span><br>调用当前类重写的finalize()方法<br>obj <span class=\"hljs-keyword\">is</span> still alive<br><span class=\"hljs-comment\">-----------------第二次gc操作------------</span><br>obj <span class=\"hljs-keyword\">is</span> dead<br></code></pre></td></tr></table></figure>\n\n<p>在进行第一次清除的时候，我们会执行finalize方法，然后 对象 进行了一次自救操作，但是因为finalize()方法只会被调用一次，因此第二次该对象将会被垃圾清除。</p>\n<h2 id=\"MAT与JProfiler的GC-Roots溯源\"><a href=\"#MAT与JProfiler的GC-Roots溯源\" class=\"headerlink\" title=\"MAT与JProfiler的GC Roots溯源\"></a>MAT与JProfiler的GC Roots溯源</h2><h3 id=\"MAT是什么？\"><a href=\"#MAT是什么？\" class=\"headerlink\" title=\"MAT是什么？\"></a>MAT是什么？</h3><p>MAT是Memory Analyzer的简称，它是一款功能强大的Java堆内存分析器。用于查找内存泄漏以及查看内存消耗情况。</p>\n<p>MAT是基于Eclipse开发的，是一款免费的性能分析工具。</p>\n<p>大家可以在<a href=\"http://www.eclipse.org/mat/%E4%B8%8B%E8%BD%BD%E5%B9%B6%E4%BD%BF%E7%94%A8MAT\">http://www.eclipse.org/mat/下载并使用MAT</a></p>\n<h3 id=\"命令行使用-jmap\"><a href=\"#命令行使用-jmap\" class=\"headerlink\" title=\"命令行使用 jmap\"></a>命令行使用 jmap</h3><p><img src=\"/images/jvm/image-20200712112026317.png\" alt=\"image-20200712112026317\"></p>\n<h3 id=\"使用JVIsualVM\"><a href=\"#使用JVIsualVM\" class=\"headerlink\" title=\"使用JVIsualVM\"></a>使用JVIsualVM</h3><p>捕获的heap dump文件是一个临时文件，关闭JVisualVM后自动删除，若要保留，需要将其另存为文件。可通过以下方法捕获heap dump：</p>\n<p>在左侧“Application”（应用程序）子窗口中右击相应的应用程序，选择Heap Dump（堆Dump）。</p>\n<p>在Monitor（监视）子标签页中点击Heap Dump（堆Dump）按钮。本地应用程序的Heap dumps作为应用程序标签页的一个子标签页打开。同时，heap dump在左侧的Application（应用程序）栏中对应一个含有时间戳的节点。</p>\n<p>右击这个节点选择save as（另存为）即可将heap dump保存到本地。</p>\n<h3 id=\"使用MAT打开Dump文件\"><a href=\"#使用MAT打开Dump文件\" class=\"headerlink\" title=\"使用MAT打开Dump文件\"></a>使用MAT打开Dump文件</h3><p>打开后，我们就可以看到有哪些可以作为GC Roots的对象</p>\n<p><img src=\"/images/jvm/image-20200712112512720.png\" alt=\"image-20200712112512720\"></p>\n<p>里面我们能够看到有一些常用的Java类，然后Thread线程。</p>\n<h3 id=\"JProfiler的GC-Roots溯源\"><a href=\"#JProfiler的GC-Roots溯源\" class=\"headerlink\" title=\"JProfiler的GC Roots溯源\"></a>JProfiler的GC Roots溯源</h3><p>我们在实际的开发中，一般不会查找全部的GC Roots，可能只是查找某个对象的整个链路，或者称为GC Roots溯源，这个时候，我们就可以使用JProfiler</p>\n<p><img src=\"/images/jvm/image-20200712113256075.png\" alt=\"image-20200712113256075\"></p>\n<h3 id=\"如何判断什么原因造成OOM\"><a href=\"#如何判断什么原因造成OOM\" class=\"headerlink\" title=\"如何判断什么原因造成OOM\"></a>如何判断什么原因造成OOM</h3><p>当我们程序出现OOM的时候，我们就需要进行排查，我们首先使用下面的例子进行说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 内存溢出排查</span><br><span class=\"hljs-comment\"> * -Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-12-14:56</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HeapOOM</span> &#123;<br>    <span class=\"hljs-comment\">// 创建1M的文件</span><br>    <span class=\"hljs-type\">byte</span> [] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">1</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>];<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        ArrayList&lt;HeapOOM&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HeapOOM</span>());<br>                count++;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.getStackTrace();<br>            System.out.println(<span class=\"hljs-string\">&quot;count:&quot;</span> + count);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上述代码就是不断的创建一个1M小字节数组，然后让内存溢出，我们需要限制一下内存大小，同时使用HeapDumpOnOutOfMemoryError将出错时候的dump文件输出</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError</span><br></code></pre></td></tr></table></figure>\n\n<p>我们将生成的dump文件打开，然后点击Biggest Objects就能够看到超大对象</p>\n<p><img src=\"/images/jvm/image-20200712150229048.png\" alt=\"image-20200712150229048\"></p>\n<p>然后我们通过线程，还能够定位到哪里出现OOM</p>\n<p><img src=\"/images/jvm/image-20200712150303710.png\" alt=\"image-20200712150303710\"></p>\n<h2 id=\"清除阶段：标记-清除算法\"><a href=\"#清除阶段：标记-清除算法\" class=\"headerlink\" title=\"清除阶段：标记-清除算法\"></a>清除阶段：标记-清除算法</h2><p>当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。目前在JVM中比较常见的三种垃圾收集算法是</p>\n<ul>\n<li>标记一清除算法（Mark-Sweep）</li>\n<li>复制算法（copying）</li>\n<li>标记-压缩算法（Mark-Compact）</li>\n</ul>\n<p>标记-清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被J.McCarthy等人在1960年提出并并应用于Lisp语言。</p>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><p>当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除</p>\n<ul>\n<li><strong>标记</strong>：Collector从引用根节点开始遍历，<strong>标记所有被引用的对象</strong>。一般是在对象的Header中记录为可达对象。<ul>\n<li><strong>标记的是引用的对象，不是垃圾！！</strong></li>\n</ul>\n</li>\n<li><strong>清除</strong>：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200712150935078.png\" alt=\"image-20200712150935078\"></p>\n<h3 id=\"什么是清除？\"><a href=\"#什么是清除？\" class=\"headerlink\" title=\"什么是清除？\"></a>什么是清除？</h3><p>这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放覆盖原有的地址。</p>\n<p>关于空闲列表是在为对象分配内存的时候 提过</p>\n<ul>\n<li>如果内存规整<ul>\n<li>采用指针碰撞的方式进行内存分配</li>\n</ul>\n</li>\n<li>如果内存不规整<ul>\n<li>虚拟机需要维护一个列表</li>\n<li>空闲列表分配</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>标记清除算法的效率不算高</li>\n<li>在进行GC的时候，需要停止整个应用程序，用户体验较差</li>\n<li>这种方式清理出来的空闲内存是不连续的，产生内碎片，需要维护一个空闲列表</li>\n</ul>\n<h2 id=\"清除阶段：复制算法\"><a href=\"#清除阶段：复制算法\" class=\"headerlink\" title=\"清除阶段：复制算法\"></a>清除阶段：复制算法</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky于1963年发表了著名的论文，“使用双存储区的Lisp语言垃圾收集器CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）”。M.L.Minsky在该论文中描述的算法被人们称为复制（Copying）算法，它也被M.L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。</p>\n<h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收</p>\n<p><img src=\"/images/jvm/image-20200712151916991.png\" alt=\"image-20200712151916991\"></p>\n<p>把可达的对象，直接复制到另外一个区域中复制完成后，A区就没有用了，里面的对象可以直接清除掉，其实里面的新生代里面就用到了复制算法</p>\n<p><img src=\"/images/jvm/image-20200712152029615.png\" alt=\"image-20200712152029615\"></p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>没有标记和清除过程，实现简单，运行高效</li>\n<li>复制过去以后保证空间的连续性，不会出现“碎片”问题。</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>此算法的缺点也是很明显的，就是需要两倍的内存空间。</li>\n<li>对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小</li>\n</ul>\n<h3 id=\"注意-2\"><a href=\"#注意-2\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大，或者说非常低才行（老年代大量的对象存活，那么复制的对象将会有很多，效率会很低）</p>\n<p>在新生代，对常规应用的垃圾回收，一次通常可以回收70% - 99% 的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。</p>\n<p><img src=\"/images/jvm/image-20200712152847218.png\" alt=\"image-20200712152847218\"></p>\n<h2 id=\"清除阶段：标记-整理算法\"><a href=\"#清除阶段：标记-整理算法\" class=\"headerlink\" title=\"清除阶段：标记-整理算法\"></a>清除阶段：标记-整理算法</h2><h3 id=\"背景-1\"><a href=\"#背景-1\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。</p>\n<p>标记一清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以JvM的设计者需要在此基础之上进行改进。标记-压缩（Mark-Compact）算法由此诞生。</p>\n<p>1970年前后，G.L.Steele、C.J.Chene和D.s.Wise等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。</p>\n<h3 id=\"执行过程-1\"><a href=\"#执行过程-1\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><p>第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象</p>\n<p>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。</p>\n<p><img src=\"/images/jvm/image-20200712153236508.png\" alt=\"image-20200712153236508\"></p>\n<h3 id=\"标清和标整的区别\"><a href=\"#标清和标整的区别\" class=\"headerlink\" title=\"标清和标整的区别\"></a>标清和标整的区别</h3><p>标记-压缩算法的最终效果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为标记-清除-压缩（Mark-Sweep-Compact）算法。</p>\n<p>二者的本质差异在于标记-清除算法是一种非移动式的回收算法，标记-压缩是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</p>\n<h3 id=\"标整的优缺点\"><a href=\"#标整的优缺点\" class=\"headerlink\" title=\"标整的优缺点\"></a>标整的优缺点</h3><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。</li>\n<li>消除了复制算法当中，内存减半的高额代价。</li>\n</ul>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>从效率上来说，标记-整理算法要低于复制算法。</li>\n<li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址</li>\n<li>移动过程中，需要全程暂停用户应用程序。即：STW</li>\n</ul>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。</p>\n<p>而为了尽量兼顾上面提到的三个指标，标记-整理算法相对来说更平滑一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记-清除多了一个整理内存的阶段。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>标记清除</th>\n<th>标记整理</th>\n<th>复制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>速率</strong></td>\n<td>中等</td>\n<td>最慢</td>\n<td>最快</td>\n</tr>\n<tr>\n<td><strong>空间开销</strong></td>\n<td>少（但会堆积碎片）</td>\n<td>少（不堆积碎片）</td>\n<td>通常需要活对象的2倍空间（不堆积碎片）</td>\n</tr>\n<tr>\n<td><strong>移动对象</strong></td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>综合我们可以找到，没有最好的算法，只有最合适的算法</p>\n<h3 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h3><p>前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。</p>\n<p>分代收集算法，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。</p>\n<p>在Java程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关，比如Http请求中的Session对象、线程、Socket连接，这类对象跟业务直接挂钩，因此生命周期比较长。但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：string对象，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。</p>\n<p>目前几乎所有的GC都采用分代手机算法执行垃圾回收的</p>\n<p>在HotSpot中，基于分代的概念，GC所使用的内存回收算法必须结合年轻代和老年代各自的特点。</p>\n<ul>\n<li>年轻代（Young Gen）</li>\n</ul>\n<p>年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。</p>\n<p>这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。</p>\n<ul>\n<li>老年代（Tenured Gen）</li>\n</ul>\n<p>老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。</p>\n<p>这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。</p>\n<ul>\n<li>Mark阶段的开销与存活对象的数量成正比。</li>\n<li>Sweep阶段的开销与所管理区域的大小成正相关。</li>\n<li>compact阶段的开销与存活对象的数据成正比。</li>\n</ul>\n<p>以HotSpot中的CMS回收器为例，CMS是基于Mark-Sweep实现的，对于对象的回收效率很高。而对于碎片问题，CMS采用基于Mark-Compact算法的Serial old回收器作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用serial old执行FullGC以达到对老年代内存的整理。</p>\n<p>分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代</p>\n<h2 id=\"增量收集算法\"><a href=\"#增量收集算法\" class=\"headerlink\" title=\"增量收集算法\"></a>增量收集算法</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>上述现有的算法，在垃圾回收过程中，应用软件将处于一种stop the World的状态。在stop the World状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。</p>\n<p>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。</p>\n<p>总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。<strong>增量收集算法通过对线程间冲突的妥善处理</strong>，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作</p>\n<h3 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。</p>\n<h2 id=\"分区算法\"><a href=\"#分区算法\" class=\"headerlink\" title=\"分区算法\"></a>分区算法</h2><p>一般来说，在相同条件下，堆空间越大，一次Gc时所需要的时间就越长，有关GC产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。</p>\n<p>分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。<br>每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</p>\n<p><img src=\"/images/jvm/image-20200712165318590.png\" alt=\"image-20200712165318590\"></p>\n<h2 id=\"写到最后\"><a href=\"#写到最后\" class=\"headerlink\" title=\"写到最后\"></a>写到最后</h2><p>注意，这些只是基本的算法思路，实际GC实现过程要复杂的多，目前还在发展中的前沿GC都是复合算法，并且并行和并发兼备。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"垃圾回收相关算法\"><a href=\"#垃圾回收相关算法\" class=\"headerlink\" title=\"垃圾回收相关算法\"></a>垃圾回收相关算法</h1><h2 id=\"标记阶段：引用计数算法\"><a href=\"#标记阶段：引用计数算法\" class=\"headerlink\" title=\"标记阶段：引用计数算法\"></a>标记阶段：引用计数算法</h2><p>在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。</p>\n<p>那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。</p>\n<p>判断对象存活一般有两种方式：<strong>引用计数算法</strong>和<strong>可达性分析算法。</strong></p>\n<p>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。</p>\n<p>对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。</p>\n<p>优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。</p>\n<p>缺点：它需要单独的字段存储计数器，这样的做法增加了存储空间的开销。</p>\n<blockquote>\n<p>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销。<br>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。</p>\n</blockquote>\n<h3 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h3><p>当p的指针断开的时候，内部的引用形成一个循环，这就是循环引用，从而造成内存泄漏</p>\n<p><img src=\"/images/jvm/image-20200712102205795.png\" alt=\"image-20200712102205795\"></p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>我们使用一个案例来测试Java中是否采用的是引用计数算法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 引用计数算法测试</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: </span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-12-10:26</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RefCountGC</span> &#123;<br>    <span class=\"hljs-comment\">// 这个成员属性的唯一作用就是占用一点内存</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">byte</span>[] bigSize = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">1024</span>*<span class=\"hljs-number\">1024</span>];<br>    <span class=\"hljs-comment\">// 引用</span><br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">reference</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">RefCountGC</span> <span class=\"hljs-variable\">obj1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefCountGC</span>();<br>        <span class=\"hljs-type\">RefCountGC</span> <span class=\"hljs-variable\">obj2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefCountGC</span>();<br>        obj1.reference = obj2;<br>        obj2.reference = obj1;<br>        obj1 = <span class=\"hljs-literal\">null</span>;<br>        obj2 = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-comment\">// 显示的执行垃圾收集行为，判断obj1 和 obj2是否被回收？</span><br>        System.gc();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mathematica\"><span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">System</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">gc</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">15490</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">808</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">76288</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">15490</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">816</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">251392</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0061980</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.36</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Full</span> <span class=\"hljs-variable\">GC</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">System</span><span class=\"hljs-operator\">.</span><span class=\"hljs-variable\">gc</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">PSYoungGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">808</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">0</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">76288</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">ParOldGen</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">8</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">672</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">175104</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-number\">816</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">672</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">251392</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-variable\">Metaspace</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">3479</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-number\">3479</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0.0045983</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">Times</span><span class=\"hljs-operator\">:</span> <span class=\"hljs-variable\">user</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">sys</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">real</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0.00</span> <span class=\"hljs-variable\">secs</span><span class=\"hljs-punctuation\">]</span> <br><span class=\"hljs-variable\">Heap</span><br> <span class=\"hljs-variable\">PSYoungGen</span>      <span class=\"hljs-variable\">total</span> <span class=\"hljs-number\">76288</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">655</span><span class=\"hljs-built_in\">K</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076b500000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000770a00000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000007c0000000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">eden</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">65536</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076b500000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076b5a3ee8</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076f500000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">from</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">10752</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076f500000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076f500000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076ff80000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">to</span>   <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">10752</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076ff80000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076ff80000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x0000000770a00000</span><span class=\"hljs-punctuation\">)</span><br> <span class=\"hljs-variable\">ParOldGen</span>       <span class=\"hljs-variable\">total</span> <span class=\"hljs-number\">175104</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">672</span><span class=\"hljs-built_in\">K</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006c1e00000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006cc900000</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x000000076b500000</span><span class=\"hljs-punctuation\">)</span><br>  <span class=\"hljs-variable\">object</span> <span class=\"hljs-variable\">space</span> <span class=\"hljs-number\">175104</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">%</span> <span class=\"hljs-variable\">used</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006c1e00000</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006c1ea8070</span><span class=\"hljs-operator\">,</span><span class=\"hljs-number\">0</span><span class=\"hljs-variable\">x00000006cc900000</span><span class=\"hljs-punctuation\">)</span><br> <span class=\"hljs-variable\">Metaspace</span>       <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">3486</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">capacity</span> <span class=\"hljs-number\">4496</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">committed</span> <span class=\"hljs-number\">4864</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">reserved</span> <span class=\"hljs-number\">1056768</span><span class=\"hljs-built_in\">K</span><br>  <span class=\"hljs-variable\">class</span> <span class=\"hljs-variable\">space</span>    <span class=\"hljs-variable\">used</span> <span class=\"hljs-number\">385</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">capacity</span> <span class=\"hljs-number\">388</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">committed</span> <span class=\"hljs-number\">512</span><span class=\"hljs-built_in\">K</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-variable\">reserved</span> <span class=\"hljs-number\">1048576</span><span class=\"hljs-built_in\">K</span><br></code></pre></td></tr></table></figure>\n\n<p>我们能够看到，上述进行了GC收集的行为，将上述的新生代中的两个对象都进行回收了</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">PSYoungGen</span>: <span class=\"hljs-number\">15490</span>K-&gt;<span class=\"hljs-number\">808</span>K(<span class=\"hljs-number\">76288</span>K)] <span class=\"hljs-number\">15490</span>K-&gt;<span class=\"hljs-number\">816</span>K(<span class=\"hljs-number\">251392</span>K)<br></code></pre></td></tr></table></figure>\n\n<p>如果使用引用计数算法，那么这两个对象将会无法回收。而现在两个对象被回收了，说明Java使用的不是引用计数算法来进行标记的。</p>\n<p><img src=\"/images/jvm/image-20200712103230349.png\" alt=\"image-20200712103230349\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的Python，它更是同时支持引用计数和垃圾收集机制。</p>\n<p>具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。</p>\n<p>Java并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。Python如何解决循环引用？</p>\n<blockquote>\n<p>手动解除：很好理解，就是在合适的时机，解除引用关系。<br>使用弱引用weakref，weakref是Python提供的标准库，旨在解决循环引用。</p>\n</blockquote>\n<h2 id=\"标记阶段：可达性分析算法\"><a href=\"#标记阶段：可达性分析算法\" class=\"headerlink\" title=\"标记阶段：可达性分析算法\"></a>标记阶段：可达性分析算法</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>可达性分析算法：也可以称为 根搜索算法、追踪性垃圾收集</p>\n<p>相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生。</p>\n<p>相较于引用计数算法，这里的可达性分析就是Java、C#选择的。这种类型的垃圾收集通常也叫作追踪性垃圾收集（Tracing Garbage Collection）</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>所谓”GCRoots”根集合就是一组必须活跃的引用。</p>\n<p>基本思路：</p>\n<ul>\n<li>可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。</li>\n<li>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）</li>\n<li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</li>\n<li>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200712104149246.png\" alt=\"image-20200712104149246\"></p>\n<p>官场上的裙带关系，可达性分析在人类关系网中</p>\n<p><img src=\"/images/jvm/image-20200712104312406.png\" alt=\"image-20200712104312406\"></p>\n<h3 id=\"GC-Roots可以是哪些？\"><a href=\"#GC-Roots可以是哪些？\" class=\"headerlink\" title=\"GC Roots可以是哪些？\"></a>GC Roots可以是哪些？</h3><ul>\n<li>虚拟机栈中引用的对象<ul>\n<li>比如：各个线程被调用的方法中使用到的参数、局部变量等。</li>\n</ul>\n</li>\n<li>本地方法栈内JNI（通常说的本地方法）引用的对象方法区中类静态属性引用的对象<ul>\n<li>比如：Java类的引用类型静态变量</li>\n</ul>\n</li>\n<li>方法区中常量引用的对象<ul>\n<li>比如：字符串常量池（string Table）里的引用</li>\n</ul>\n</li>\n<li>所有被同步锁synchronized持有的对象</li>\n<li>Java虚拟机内部的引用。<ul>\n<li>基本数据类型对应的Class对象，一些常驻的异常对象（如：Nu11PointerException、outofMemoryError），系统类加载器。</li>\n</ul>\n</li>\n<li>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200712104622677.png\" alt=\"image-20200712104622677\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>总结一句话就是，除了堆空间外的一些结构，比如 虚拟机栈、本地方法栈、方法区、字符串常量池 等地方对堆空间进行引用的，都可以作为GC Roots进行可达性分析</p>\n<p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收（PartialGC）。</p>\n<p>如果只针对Java堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入GCRoots集合中去考虑，才能保证可达性分析的准确性。</p>\n<h4 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h4><p>由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个Root。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证。</p>\n<p>这点也是导致GC进行时必须“stop The World”的一个重要原因。</p>\n<p>即使是号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</p>\n<h2 id=\"对象的finalization机制\"><a href=\"#对象的finalization机制\" class=\"headerlink\" title=\"对象的finalization机制\"></a>对象的finalization机制</h2><p>Java语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。</p>\n<p>当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的finalize()方法。</p>\n<p>finalize() 方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</p>\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>永远不要主动调用某个对象的finalize（）方法I应该交给垃圾回收机制调用。理由包括下面三点：</p>\n<ul>\n<li>在finalize（）时可能会导致对象复活。</li>\n<li>finalize（）方法的执行时间是没有保障的，它完全由Gc线程决定，极端情况下，若不发生GC，则finalize（）方法将没有执行机会。<ul>\n<li>因为优先级比较低，即使主动调用该方法，也不会因此就直接进行回收</li>\n</ul>\n</li>\n<li>一个糟糕的finalize（）会严重影响Gc的性能。</li>\n</ul>\n<p>从功能上来说，finalize（）方法与c++中的析构函数比较相似，但是Java采用的是基于垃圾回收器的自动内存管理机制，所以finalize（）方法在本质上不同于C++中的析构函数。</p>\n<p>由于finalize（）方法的存在，虚拟机中的对象一般处于三种可能的状态。</p>\n<h3 id=\"生存还是死亡？\"><a href=\"#生存还是死亡？\" class=\"headerlink\" title=\"生存还是死亡？\"></a>生存还是死亡？</h3><p>如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段。<strong>一个无法触及的对象有可能在某一个条件下“复活”自己</strong>，如果这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。如下：</p>\n<ul>\n<li>可触及的：从根节点开始，可以到达这个对象。</li>\n<li>可复活的：对象的所有引用都被释放，但是对象有可能在finalize（）中复活。</li>\n<li>不可触及的：对象的finalize（）被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为<strong>finalize()只会被调用一次</strong>。</li>\n</ul>\n<p>以上3种状态中，是由于finalize（）方法的存在，进行的区分。只有在对象不可触及时才可以被回收。</p>\n<h3 id=\"具体过程\"><a href=\"#具体过程\" class=\"headerlink\" title=\"具体过程\"></a>具体过程</h3><p>判定一个对象objA是否可回收，至少要经历两次标记过程：</p>\n<ul>\n<li><p>如果对象objA到GC Roots没有引用链，则进行第一次标记。</p>\n</li>\n<li><p>进行筛选，判断此对象是否有必要执行finalize（）方法</p>\n<ul>\n<li>如果对象objA没有重写finalize（）方法，或者finalize（）方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA被判定为不可触及的。</li>\n<li>如果对象objA重写了finalize（）方法，且还未执行过，那么objA会被插入到F-Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize（）方法执行。</li>\n<li>finalize（）方法是对象逃脱死亡的最后机会，稍后GC会对F-Queue队列中的对象进行第二次标记。如果objA在finalize（）方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出“即将回收”集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的finalize方法只会被调用一次。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200712110411885.png\" alt=\"image-20200712110411885\"></p>\n<p>上图就是我们看到的Finalizer线程</p>\n<h3 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h3><p>我们使用重写 finalize()方法，然后在方法的内部，重写将其存放到GC Roots中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 测试Object类中finalize()方法</span><br><span class=\"hljs-comment\"> * 对象复活场景</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-12-11:06</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CanReliveObj</span> &#123;<br>    <span class=\"hljs-comment\">// 类变量，属于GC Roots的一部分</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> CanReliveObj canReliveObj;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">finalize</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Throwable &#123;<br>        <span class=\"hljs-built_in\">super</span>.finalize();<br>        System.out.println(<span class=\"hljs-string\">&quot;调用当前类重写的finalize()方法&quot;</span>);<br>        canReliveObj = <span class=\"hljs-built_in\">this</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        canReliveObj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CanReliveObj</span>();<br>        canReliveObj = <span class=\"hljs-literal\">null</span>;<br>        System.gc();<br>        System.out.println(<span class=\"hljs-string\">&quot;-----------------第一次gc操作------------&quot;</span>);<br>        <span class=\"hljs-comment\">// 因为Finalizer线程的优先级比较低，暂停2秒，以等待它</span><br>        Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>        <span class=\"hljs-keyword\">if</span> (canReliveObj == <span class=\"hljs-literal\">null</span>) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;obj is dead&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;obj is still alive&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class=\"hljs-string\">&quot;-----------------第二次gc操作------------&quot;</span>);<br>        canReliveObj = <span class=\"hljs-literal\">null</span>;<br>        System.gc();<br>        <span class=\"hljs-comment\">// 下面代码和上面代码是一样的，但是 canReliveObj却自救失败了</span><br>        Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>        <span class=\"hljs-keyword\">if</span> (canReliveObj == <span class=\"hljs-literal\">null</span>) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;obj is dead&quot;</span>);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;obj is still alive&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>最后运行结果</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\"><span class=\"hljs-comment\">-----------------第一次gc操作------------</span><br>调用当前类重写的finalize()方法<br>obj <span class=\"hljs-keyword\">is</span> still alive<br><span class=\"hljs-comment\">-----------------第二次gc操作------------</span><br>obj <span class=\"hljs-keyword\">is</span> dead<br></code></pre></td></tr></table></figure>\n\n<p>在进行第一次清除的时候，我们会执行finalize方法，然后 对象 进行了一次自救操作，但是因为finalize()方法只会被调用一次，因此第二次该对象将会被垃圾清除。</p>\n<h2 id=\"MAT与JProfiler的GC-Roots溯源\"><a href=\"#MAT与JProfiler的GC-Roots溯源\" class=\"headerlink\" title=\"MAT与JProfiler的GC Roots溯源\"></a>MAT与JProfiler的GC Roots溯源</h2><h3 id=\"MAT是什么？\"><a href=\"#MAT是什么？\" class=\"headerlink\" title=\"MAT是什么？\"></a>MAT是什么？</h3><p>MAT是Memory Analyzer的简称，它是一款功能强大的Java堆内存分析器。用于查找内存泄漏以及查看内存消耗情况。</p>\n<p>MAT是基于Eclipse开发的，是一款免费的性能分析工具。</p>\n<p>大家可以在<a href=\"http://www.eclipse.org/mat/%E4%B8%8B%E8%BD%BD%E5%B9%B6%E4%BD%BF%E7%94%A8MAT\">http://www.eclipse.org/mat/下载并使用MAT</a></p>\n<h3 id=\"命令行使用-jmap\"><a href=\"#命令行使用-jmap\" class=\"headerlink\" title=\"命令行使用 jmap\"></a>命令行使用 jmap</h3><p><img src=\"/images/jvm/image-20200712112026317.png\" alt=\"image-20200712112026317\"></p>\n<h3 id=\"使用JVIsualVM\"><a href=\"#使用JVIsualVM\" class=\"headerlink\" title=\"使用JVIsualVM\"></a>使用JVIsualVM</h3><p>捕获的heap dump文件是一个临时文件，关闭JVisualVM后自动删除，若要保留，需要将其另存为文件。可通过以下方法捕获heap dump：</p>\n<p>在左侧“Application”（应用程序）子窗口中右击相应的应用程序，选择Heap Dump（堆Dump）。</p>\n<p>在Monitor（监视）子标签页中点击Heap Dump（堆Dump）按钮。本地应用程序的Heap dumps作为应用程序标签页的一个子标签页打开。同时，heap dump在左侧的Application（应用程序）栏中对应一个含有时间戳的节点。</p>\n<p>右击这个节点选择save as（另存为）即可将heap dump保存到本地。</p>\n<h3 id=\"使用MAT打开Dump文件\"><a href=\"#使用MAT打开Dump文件\" class=\"headerlink\" title=\"使用MAT打开Dump文件\"></a>使用MAT打开Dump文件</h3><p>打开后，我们就可以看到有哪些可以作为GC Roots的对象</p>\n<p><img src=\"/images/jvm/image-20200712112512720.png\" alt=\"image-20200712112512720\"></p>\n<p>里面我们能够看到有一些常用的Java类，然后Thread线程。</p>\n<h3 id=\"JProfiler的GC-Roots溯源\"><a href=\"#JProfiler的GC-Roots溯源\" class=\"headerlink\" title=\"JProfiler的GC Roots溯源\"></a>JProfiler的GC Roots溯源</h3><p>我们在实际的开发中，一般不会查找全部的GC Roots，可能只是查找某个对象的整个链路，或者称为GC Roots溯源，这个时候，我们就可以使用JProfiler</p>\n<p><img src=\"/images/jvm/image-20200712113256075.png\" alt=\"image-20200712113256075\"></p>\n<h3 id=\"如何判断什么原因造成OOM\"><a href=\"#如何判断什么原因造成OOM\" class=\"headerlink\" title=\"如何判断什么原因造成OOM\"></a>如何判断什么原因造成OOM</h3><p>当我们程序出现OOM的时候，我们就需要进行排查，我们首先使用下面的例子进行说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 内存溢出排查</span><br><span class=\"hljs-comment\"> * -Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>: 陌溪</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@create</span>: 2020-07-12-14:56</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HeapOOM</span> &#123;<br>    <span class=\"hljs-comment\">// 创建1M的文件</span><br>    <span class=\"hljs-type\">byte</span> [] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[<span class=\"hljs-number\">1</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>];<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        ArrayList&lt;HeapOOM&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>                list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HeapOOM</span>());<br>                count++;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.getStackTrace();<br>            System.out.println(<span class=\"hljs-string\">&quot;count:&quot;</span> + count);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上述代码就是不断的创建一个1M小字节数组，然后让内存溢出，我们需要限制一下内存大小，同时使用HeapDumpOnOutOfMemoryError将出错时候的dump文件输出</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-deletion\">-Xms8m -Xmx8m -XX:HeapDumpOnOutOfMemoryError</span><br></code></pre></td></tr></table></figure>\n\n<p>我们将生成的dump文件打开，然后点击Biggest Objects就能够看到超大对象</p>\n<p><img src=\"/images/jvm/image-20200712150229048.png\" alt=\"image-20200712150229048\"></p>\n<p>然后我们通过线程，还能够定位到哪里出现OOM</p>\n<p><img src=\"/images/jvm/image-20200712150303710.png\" alt=\"image-20200712150303710\"></p>\n<h2 id=\"清除阶段：标记-清除算法\"><a href=\"#清除阶段：标记-清除算法\" class=\"headerlink\" title=\"清除阶段：标记-清除算法\"></a>清除阶段：标记-清除算法</h2><p>当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。目前在JVM中比较常见的三种垃圾收集算法是</p>\n<ul>\n<li>标记一清除算法（Mark-Sweep）</li>\n<li>复制算法（copying）</li>\n<li>标记-压缩算法（Mark-Compact）</li>\n</ul>\n<p>标记-清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被J.McCarthy等人在1960年提出并并应用于Lisp语言。</p>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><p>当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除</p>\n<ul>\n<li><strong>标记</strong>：Collector从引用根节点开始遍历，<strong>标记所有被引用的对象</strong>。一般是在对象的Header中记录为可达对象。<ul>\n<li><strong>标记的是引用的对象，不是垃圾！！</strong></li>\n</ul>\n</li>\n<li><strong>清除</strong>：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收</li>\n</ul>\n<p><img src=\"/images/jvm/image-20200712150935078.png\" alt=\"image-20200712150935078\"></p>\n<h3 id=\"什么是清除？\"><a href=\"#什么是清除？\" class=\"headerlink\" title=\"什么是清除？\"></a>什么是清除？</h3><p>这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放覆盖原有的地址。</p>\n<p>关于空闲列表是在为对象分配内存的时候 提过</p>\n<ul>\n<li>如果内存规整<ul>\n<li>采用指针碰撞的方式进行内存分配</li>\n</ul>\n</li>\n<li>如果内存不规整<ul>\n<li>虚拟机需要维护一个列表</li>\n<li>空闲列表分配</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>标记清除算法的效率不算高</li>\n<li>在进行GC的时候，需要停止整个应用程序，用户体验较差</li>\n<li>这种方式清理出来的空闲内存是不连续的，产生内碎片，需要维护一个空闲列表</li>\n</ul>\n<h2 id=\"清除阶段：复制算法\"><a href=\"#清除阶段：复制算法\" class=\"headerlink\" title=\"清除阶段：复制算法\"></a>清除阶段：复制算法</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky于1963年发表了著名的论文，“使用双存储区的Lisp语言垃圾收集器CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）”。M.L.Minsky在该论文中描述的算法被人们称为复制（Copying）算法，它也被M.L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。</p>\n<h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收</p>\n<p><img src=\"/images/jvm/image-20200712151916991.png\" alt=\"image-20200712151916991\"></p>\n<p>把可达的对象，直接复制到另外一个区域中复制完成后，A区就没有用了，里面的对象可以直接清除掉，其实里面的新生代里面就用到了复制算法</p>\n<p><img src=\"/images/jvm/image-20200712152029615.png\" alt=\"image-20200712152029615\"></p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>没有标记和清除过程，实现简单，运行高效</li>\n<li>复制过去以后保证空间的连续性，不会出现“碎片”问题。</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>此算法的缺点也是很明显的，就是需要两倍的内存空间。</li>\n<li>对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小</li>\n</ul>\n<h3 id=\"注意-2\"><a href=\"#注意-2\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大，或者说非常低才行（老年代大量的对象存活，那么复制的对象将会有很多，效率会很低）</p>\n<p>在新生代，对常规应用的垃圾回收，一次通常可以回收70% - 99% 的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。</p>\n<p><img src=\"/images/jvm/image-20200712152847218.png\" alt=\"image-20200712152847218\"></p>\n<h2 id=\"清除阶段：标记-整理算法\"><a href=\"#清除阶段：标记-整理算法\" class=\"headerlink\" title=\"清除阶段：标记-整理算法\"></a>清除阶段：标记-整理算法</h2><h3 id=\"背景-1\"><a href=\"#背景-1\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。</p>\n<p>标记一清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以JvM的设计者需要在此基础之上进行改进。标记-压缩（Mark-Compact）算法由此诞生。</p>\n<p>1970年前后，G.L.Steele、C.J.Chene和D.s.Wise等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。</p>\n<h3 id=\"执行过程-1\"><a href=\"#执行过程-1\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><p>第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象</p>\n<p>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。</p>\n<p><img src=\"/images/jvm/image-20200712153236508.png\" alt=\"image-20200712153236508\"></p>\n<h3 id=\"标清和标整的区别\"><a href=\"#标清和标整的区别\" class=\"headerlink\" title=\"标清和标整的区别\"></a>标清和标整的区别</h3><p>标记-压缩算法的最终效果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为标记-清除-压缩（Mark-Sweep-Compact）算法。</p>\n<p>二者的本质差异在于标记-清除算法是一种非移动式的回收算法，标记-压缩是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</p>\n<h3 id=\"标整的优缺点\"><a href=\"#标整的优缺点\" class=\"headerlink\" title=\"标整的优缺点\"></a>标整的优缺点</h3><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。</li>\n<li>消除了复制算法当中，内存减半的高额代价。</li>\n</ul>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>从效率上来说，标记-整理算法要低于复制算法。</li>\n<li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址</li>\n<li>移动过程中，需要全程暂停用户应用程序。即：STW</li>\n</ul>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。</p>\n<p>而为了尽量兼顾上面提到的三个指标，标记-整理算法相对来说更平滑一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记-清除多了一个整理内存的阶段。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>标记清除</th>\n<th>标记整理</th>\n<th>复制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>速率</strong></td>\n<td>中等</td>\n<td>最慢</td>\n<td>最快</td>\n</tr>\n<tr>\n<td><strong>空间开销</strong></td>\n<td>少（但会堆积碎片）</td>\n<td>少（不堆积碎片）</td>\n<td>通常需要活对象的2倍空间（不堆积碎片）</td>\n</tr>\n<tr>\n<td><strong>移动对象</strong></td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>综合我们可以找到，没有最好的算法，只有最合适的算法</p>\n<h3 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h3><p>前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。</p>\n<p>分代收集算法，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。</p>\n<p>在Java程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关，比如Http请求中的Session对象、线程、Socket连接，这类对象跟业务直接挂钩，因此生命周期比较长。但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：string对象，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。</p>\n<p>目前几乎所有的GC都采用分代手机算法执行垃圾回收的</p>\n<p>在HotSpot中，基于分代的概念，GC所使用的内存回收算法必须结合年轻代和老年代各自的特点。</p>\n<ul>\n<li>年轻代（Young Gen）</li>\n</ul>\n<p>年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。</p>\n<p>这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。</p>\n<ul>\n<li>老年代（Tenured Gen）</li>\n</ul>\n<p>老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。</p>\n<p>这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。</p>\n<ul>\n<li>Mark阶段的开销与存活对象的数量成正比。</li>\n<li>Sweep阶段的开销与所管理区域的大小成正相关。</li>\n<li>compact阶段的开销与存活对象的数据成正比。</li>\n</ul>\n<p>以HotSpot中的CMS回收器为例，CMS是基于Mark-Sweep实现的，对于对象的回收效率很高。而对于碎片问题，CMS采用基于Mark-Compact算法的Serial old回收器作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用serial old执行FullGC以达到对老年代内存的整理。</p>\n<p>分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代</p>\n<h2 id=\"增量收集算法\"><a href=\"#增量收集算法\" class=\"headerlink\" title=\"增量收集算法\"></a>增量收集算法</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>上述现有的算法，在垃圾回收过程中，应用软件将处于一种stop the World的状态。在stop the World状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。</p>\n<p>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。</p>\n<p>总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。<strong>增量收集算法通过对线程间冲突的妥善处理</strong>，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作</p>\n<h3 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。</p>\n<h2 id=\"分区算法\"><a href=\"#分区算法\" class=\"headerlink\" title=\"分区算法\"></a>分区算法</h2><p>一般来说，在相同条件下，堆空间越大，一次Gc时所需要的时间就越长，有关GC产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。</p>\n<p>分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。<br>每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</p>\n<p><img src=\"/images/jvm/image-20200712165318590.png\" alt=\"image-20200712165318590\"></p>\n<h2 id=\"写到最后\"><a href=\"#写到最后\" class=\"headerlink\" title=\"写到最后\"></a>写到最后</h2><p>注意，这些只是基本的算法思路，实际GC实现过程要复杂的多，目前还在发展中的前沿GC都是复合算法，并且并行和并发兼备。</p>\n"},{"title":"SSL自签名证书生成与配置(基于根证书)","date":"2023-12-09T06:05:22.000Z","_content":"\n[如何让openssl生成的SSL证书被浏览器认可](https://www.cnblogs.com/mjy2wxy/p/15705680.html)\n\n> 准备一台有openssl的服务器\n- 生成根证书\n  -  \n  - 生成命令如下，其中：/C=CN（国家缩写）/ST=（省份）/L=（城市）/O=（组织名称）：\n```\nopenssl req -x509 -nodes -days 3650 -newkey rsa:2048 -subj \n\"/C=CN/ST=ZheJiang/L=HangZhou/O=MJY\" -keyout CA-private.key \n-out CA-certificate.crt -reqexts v3_req -extensions v3_ca\n```\n这时会生成根证书文件CA-private.key、CA-certificate.crt\n\n- 生成二级证书密钥\n\t-\n```\nopenssl genrsa -out private.key 2048\n```\n- 生成签名证书请求\n\t-\n\t`openssl req -new -key private.key -subj \"/C=CN/ST=ZheJiang/L=HangZhou/O=MJY/CN=127.0.0.1\" -sha256 -out private.csr`\n\t其中ip部分根据自己实际情况修改\n\n- 创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构\n\t- \n```\n#vim private.ext\n#复制如下内容到private.ext文件中\n\n[ req ]\ndefault_bits = 1024 distinguished_name = req_distinguished_name\nreq_extensions = san\nextensions = san\n[ req_distinguished_name ]\ncountryName = CN\nstateOrProvinceName = Definesys\nlocalityName = Definesys\norganizationName = Definesys\n[SAN]\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = IP:127.0.0.1 #其中ip后内容，改成自己需要的ip地址（服务器ip或者域名）  \n#最后使用 :wq 保存退出\n```\n- 生成CA证书\n\t-\n`openssl x509 -req -days 3650 -in private.csr -CA CA-certificate.crt -CAkey CA-private.key -CAcreateserial -sha256 -out private.crt -extfile private.ext -extensions SAN`\n\n生成结果如下：\n![输入图片描述](images/cert/chrome-cert-1.png)\n\n将证书配置到nginx\n![输入图片描述](images/cert/chrome-cert-2.png)\n\n客户端将CA-certificate.crt安装到受信任的颁发机构，重启浏览器访问，就发现不安全的标识已经没了\n![输入图片描述](images/cert/chrome-cert-3.png)\n\n","source":"_posts/cert/SSL自签名证书(基于根证书)生成与配置.md","raw":"---\ntitle: SSL自签名证书生成与配置(基于根证书)\ndate: 2023-12-09 14:05:22\ntags: cert\ncategories: shell\n---\n\n[如何让openssl生成的SSL证书被浏览器认可](https://www.cnblogs.com/mjy2wxy/p/15705680.html)\n\n> 准备一台有openssl的服务器\n- 生成根证书\n  -  \n  - 生成命令如下，其中：/C=CN（国家缩写）/ST=（省份）/L=（城市）/O=（组织名称）：\n```\nopenssl req -x509 -nodes -days 3650 -newkey rsa:2048 -subj \n\"/C=CN/ST=ZheJiang/L=HangZhou/O=MJY\" -keyout CA-private.key \n-out CA-certificate.crt -reqexts v3_req -extensions v3_ca\n```\n这时会生成根证书文件CA-private.key、CA-certificate.crt\n\n- 生成二级证书密钥\n\t-\n```\nopenssl genrsa -out private.key 2048\n```\n- 生成签名证书请求\n\t-\n\t`openssl req -new -key private.key -subj \"/C=CN/ST=ZheJiang/L=HangZhou/O=MJY/CN=127.0.0.1\" -sha256 -out private.csr`\n\t其中ip部分根据自己实际情况修改\n\n- 创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构\n\t- \n```\n#vim private.ext\n#复制如下内容到private.ext文件中\n\n[ req ]\ndefault_bits = 1024 distinguished_name = req_distinguished_name\nreq_extensions = san\nextensions = san\n[ req_distinguished_name ]\ncountryName = CN\nstateOrProvinceName = Definesys\nlocalityName = Definesys\norganizationName = Definesys\n[SAN]\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = IP:127.0.0.1 #其中ip后内容，改成自己需要的ip地址（服务器ip或者域名）  \n#最后使用 :wq 保存退出\n```\n- 生成CA证书\n\t-\n`openssl x509 -req -days 3650 -in private.csr -CA CA-certificate.crt -CAkey CA-private.key -CAcreateserial -sha256 -out private.crt -extfile private.ext -extensions SAN`\n\n生成结果如下：\n![输入图片描述](images/cert/chrome-cert-1.png)\n\n将证书配置到nginx\n![输入图片描述](images/cert/chrome-cert-2.png)\n\n客户端将CA-certificate.crt安装到受信任的颁发机构，重启浏览器访问，就发现不安全的标识已经没了\n![输入图片描述](images/cert/chrome-cert-3.png)\n\n","slug":"cert/SSL自签名证书(基于根证书)生成与配置","published":1,"updated":"2023-12-09T06:12:00.527Z","_id":"clpxnjd0g0008wwwffw4pdunw","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.cnblogs.com/mjy2wxy/p/15705680.html\">如何让openssl生成的SSL证书被浏览器认可</a></p>\n<blockquote>\n<p>准备一台有openssl的服务器</p>\n</blockquote>\n<ul>\n<li><h2 id=\"生成根证书\"><a href=\"#生成根证书\" class=\"headerlink\" title=\"生成根证书\"></a>生成根证书</h2><ul>\n<li>生成命令如下，其中：&#x2F;C&#x3D;CN（国家缩写）&#x2F;ST&#x3D;（省份）&#x2F;L&#x3D;（城市）&#x2F;O&#x3D;（组织名称）：<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">openssl req -x509 -nodes -days <span class=\"hljs-number\">3650</span> -<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">key</span> rsa:<span class=\"hljs-type\">2048 -subj </span><br><span class=\"hljs-string\">&quot;/C=CN/ST=ZheJiang/L=HangZhou/O=MJY&quot;</span> -keyout CA-<span class=\"hljs-keyword\">private</span>.key <br>-out CA-certificate.crt -reqexts v3_req -extensions v3_ca<br></code></pre></td></tr></table></figure>\n这时会生成根证书文件CA-private.key、CA-certificate.crt</li>\n</ul>\n</li>\n<li><h2 id=\"生成二级证书密钥\"><a href=\"#生成二级证书密钥\" class=\"headerlink\" title=\"生成二级证书密钥\"></a>生成二级证书密钥</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">openssl genrsa -<span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">private</span>.key <span class=\"hljs-number\">2048</span><br></code></pre></td></tr></table></figure></li>\n<li><h2 id=\"生成签名证书请求\"><a href=\"#生成签名证书请求\" class=\"headerlink\" title=\"生成签名证书请求\"></a>生成签名证书请求</h2><p>  <code>openssl req -new -key private.key -subj &quot;/C=CN/ST=ZheJiang/L=HangZhou/O=MJY/CN=127.0.0.1&quot; -sha256 -out private.csr</code><br>  其中ip部分根据自己实际情况修改</p>\n</li>\n<li><h2 id=\"创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构\"><a href=\"#创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构\" class=\"headerlink\" title=\"创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构\"></a>创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\">#vim private.ext</span><br><span class=\"hljs-comment\">#复制如下内容到private.ext文件中</span><br><br><span class=\"hljs-section\">[ req ]</span><br><span class=\"hljs-attr\">default_bits</span> = <span class=\"hljs-number\">1024</span> distinguished_name = req_distinguished_name<br><span class=\"hljs-attr\">req_extensions</span> = san<br><span class=\"hljs-attr\">extensions</span> = san<br><span class=\"hljs-section\">[ req_distinguished_name ]</span><br><span class=\"hljs-attr\">countryName</span> = CN<br><span class=\"hljs-attr\">stateOrProvinceName</span> = Definesys<br><span class=\"hljs-attr\">localityName</span> = Definesys<br><span class=\"hljs-attr\">organizationName</span> = Definesys<br><span class=\"hljs-section\">[SAN]</span><br><span class=\"hljs-attr\">authorityKeyIdentifier</span>=keyid,issuer<br><span class=\"hljs-attr\">basicConstraints</span>=CA:<span class=\"hljs-literal\">FALSE</span><br><span class=\"hljs-attr\">keyUsage</span> = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment<br><span class=\"hljs-attr\">subjectAltName</span> = IP:<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-comment\">#其中ip后内容，改成自己需要的ip地址（服务器ip或者域名）  </span><br><span class=\"hljs-comment\">#最后使用 :wq 保存退出</span><br></code></pre></td></tr></table></figure></li>\n<li><h2 id=\"生成CA证书\"><a href=\"#生成CA证书\" class=\"headerlink\" title=\"生成CA证书\"></a>生成CA证书</h2><p><code>openssl x509 -req -days 3650 -in private.csr -CA CA-certificate.crt -CAkey CA-private.key -CAcreateserial -sha256 -out private.crt -extfile private.ext -extensions SAN</code></p>\n</li>\n</ul>\n<p>生成结果如下：<br><img src=\"/images/cert/chrome-cert-1.png\" alt=\"输入图片描述\"></p>\n<p>将证书配置到nginx<br><img src=\"/images/cert/chrome-cert-2.png\" alt=\"输入图片描述\"></p>\n<p>客户端将CA-certificate.crt安装到受信任的颁发机构，重启浏览器访问，就发现不安全的标识已经没了<br><img src=\"/images/cert/chrome-cert-3.png\" alt=\"输入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/mjy2wxy/p/15705680.html\">如何让openssl生成的SSL证书被浏览器认可</a></p>\n<blockquote>\n<p>准备一台有openssl的服务器</p>\n</blockquote>\n<ul>\n<li><h2 id=\"生成根证书\"><a href=\"#生成根证书\" class=\"headerlink\" title=\"生成根证书\"></a>生成根证书</h2><ul>\n<li>生成命令如下，其中：&#x2F;C&#x3D;CN（国家缩写）&#x2F;ST&#x3D;（省份）&#x2F;L&#x3D;（城市）&#x2F;O&#x3D;（组织名称）：<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">openssl req -x509 -nodes -days <span class=\"hljs-number\">3650</span> -<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">key</span> rsa:<span class=\"hljs-type\">2048 -subj </span><br><span class=\"hljs-string\">&quot;/C=CN/ST=ZheJiang/L=HangZhou/O=MJY&quot;</span> -keyout CA-<span class=\"hljs-keyword\">private</span>.key <br>-out CA-certificate.crt -reqexts v3_req -extensions v3_ca<br></code></pre></td></tr></table></figure>\n这时会生成根证书文件CA-private.key、CA-certificate.crt</li>\n</ul>\n</li>\n<li><h2 id=\"生成二级证书密钥\"><a href=\"#生成二级证书密钥\" class=\"headerlink\" title=\"生成二级证书密钥\"></a>生成二级证书密钥</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">openssl genrsa -<span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">private</span>.key <span class=\"hljs-number\">2048</span><br></code></pre></td></tr></table></figure></li>\n<li><h2 id=\"生成签名证书请求\"><a href=\"#生成签名证书请求\" class=\"headerlink\" title=\"生成签名证书请求\"></a>生成签名证书请求</h2><p>  <code>openssl req -new -key private.key -subj &quot;/C=CN/ST=ZheJiang/L=HangZhou/O=MJY/CN=127.0.0.1&quot; -sha256 -out private.csr</code><br>  其中ip部分根据自己实际情况修改</p>\n</li>\n<li><h2 id=\"创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构\"><a href=\"#创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构\" class=\"headerlink\" title=\"创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构\"></a>创建ext文件，这个是为了将根证书签发机构加入到SAN扩展中，这样chrome就会认为是可信任的签发机构</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\">#vim private.ext</span><br><span class=\"hljs-comment\">#复制如下内容到private.ext文件中</span><br><br><span class=\"hljs-section\">[ req ]</span><br><span class=\"hljs-attr\">default_bits</span> = <span class=\"hljs-number\">1024</span> distinguished_name = req_distinguished_name<br><span class=\"hljs-attr\">req_extensions</span> = san<br><span class=\"hljs-attr\">extensions</span> = san<br><span class=\"hljs-section\">[ req_distinguished_name ]</span><br><span class=\"hljs-attr\">countryName</span> = CN<br><span class=\"hljs-attr\">stateOrProvinceName</span> = Definesys<br><span class=\"hljs-attr\">localityName</span> = Definesys<br><span class=\"hljs-attr\">organizationName</span> = Definesys<br><span class=\"hljs-section\">[SAN]</span><br><span class=\"hljs-attr\">authorityKeyIdentifier</span>=keyid,issuer<br><span class=\"hljs-attr\">basicConstraints</span>=CA:<span class=\"hljs-literal\">FALSE</span><br><span class=\"hljs-attr\">keyUsage</span> = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment<br><span class=\"hljs-attr\">subjectAltName</span> = IP:<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-comment\">#其中ip后内容，改成自己需要的ip地址（服务器ip或者域名）  </span><br><span class=\"hljs-comment\">#最后使用 :wq 保存退出</span><br></code></pre></td></tr></table></figure></li>\n<li><h2 id=\"生成CA证书\"><a href=\"#生成CA证书\" class=\"headerlink\" title=\"生成CA证书\"></a>生成CA证书</h2><p><code>openssl x509 -req -days 3650 -in private.csr -CA CA-certificate.crt -CAkey CA-private.key -CAcreateserial -sha256 -out private.crt -extfile private.ext -extensions SAN</code></p>\n</li>\n</ul>\n<p>生成结果如下：<br><img src=\"/images/cert/chrome-cert-1.png\" alt=\"输入图片描述\"></p>\n<p>将证书配置到nginx<br><img src=\"/images/cert/chrome-cert-2.png\" alt=\"输入图片描述\"></p>\n<p>客户端将CA-certificate.crt安装到受信任的颁发机构，重启浏览器访问，就发现不安全的标识已经没了<br><img src=\"/images/cert/chrome-cert-3.png\" alt=\"输入图片描述\"></p>\n"},{"title":"自定义密钥生成自签名SSL证书","date":"2023-12-09T06:15:17.000Z","_content":"\n\n## 生成SSL证书\n-  生成RSA密钥：需要设置密码，后面的操作都需要使用这个密码；执行命令：\n localssl.key由自己定义\n` openssl genrsa -des3 -out D:/ssl/localssl.key 2048 `\n\n-   拷贝一个不需要密码的密钥\n`openssl rsa -in D:/ssl/localssl.key -out D:/ssl/localssl_nopass.key`\n\n- 生成一个证书请求, 填写证书信息\n`openssl rsa -in D:/ssl/localssl.key -out D:/ssl/localssl_nopass.key`\n\n- 用上面的密钥和CSR对进行证书签名,生成证书文件(days是证书有效期)\n`openssl x509 -req -days 3650 -in D:/ssl/localssl.csr -signkey D:/ssl/localssl.key -out D:/ssl/localssl.crt`\n\n## 配置nginx的ssl，支持https\n```\n server {\n        listen       80;\n        listen    443 ssl;\n        server_name  192.168.1.15;\n\t\n        ssl_certificate  D:\\ssl\\localssl.crt;\n        ssl_certificate_key  D:\\ssl\\localssl_nopass.key;\n}\n\n```","source":"_posts/cert/自定义密钥生成自签名SSL证书.md","raw":"---\ntitle: 自定义密钥生成自签名SSL证书\ndate: 2023-12-09 14:15:17\ntags: cert\ncategories: shell\n---\n\n\n## 生成SSL证书\n-  生成RSA密钥：需要设置密码，后面的操作都需要使用这个密码；执行命令：\n localssl.key由自己定义\n` openssl genrsa -des3 -out D:/ssl/localssl.key 2048 `\n\n-   拷贝一个不需要密码的密钥\n`openssl rsa -in D:/ssl/localssl.key -out D:/ssl/localssl_nopass.key`\n\n- 生成一个证书请求, 填写证书信息\n`openssl rsa -in D:/ssl/localssl.key -out D:/ssl/localssl_nopass.key`\n\n- 用上面的密钥和CSR对进行证书签名,生成证书文件(days是证书有效期)\n`openssl x509 -req -days 3650 -in D:/ssl/localssl.csr -signkey D:/ssl/localssl.key -out D:/ssl/localssl.crt`\n\n## 配置nginx的ssl，支持https\n```\n server {\n        listen       80;\n        listen    443 ssl;\n        server_name  192.168.1.15;\n\t\n        ssl_certificate  D:\\ssl\\localssl.crt;\n        ssl_certificate_key  D:\\ssl\\localssl_nopass.key;\n}\n\n```","slug":"cert/自定义密钥生成自签名SSL证书","published":1,"updated":"2023-12-09T06:18:12.315Z","_id":"clpxnw3w0000dwwwffu0ybaor","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"生成SSL证书\"><a href=\"#生成SSL证书\" class=\"headerlink\" title=\"生成SSL证书\"></a>生成SSL证书</h2><ul>\n<li><p>生成RSA密钥：需要设置密码，后面的操作都需要使用这个密码；执行命令：<br> localssl.key由自己定义<br><code>openssl genrsa -des3 -out D:/ssl/localssl.key 2048</code></p>\n</li>\n<li><p>拷贝一个不需要密码的密钥<br><code>openssl rsa -in D:/ssl/localssl.key -out D:/ssl/localssl_nopass.key</code></p>\n</li>\n<li><p>生成一个证书请求, 填写证书信息<br><code>openssl rsa -in D:/ssl/localssl.key -out D:/ssl/localssl_nopass.key</code></p>\n</li>\n<li><p>用上面的密钥和CSR对进行证书签名,生成证书文件(days是证书有效期)<br><code>openssl x509 -req -days 3650 -in D:/ssl/localssl.csr -signkey D:/ssl/localssl.key -out D:/ssl/localssl.crt</code></p>\n</li>\n</ul>\n<h2 id=\"配置nginx的ssl，支持https\"><a href=\"#配置nginx的ssl，支持https\" class=\"headerlink\" title=\"配置nginx的ssl，支持https\"></a>配置nginx的ssl，支持https</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"> <span class=\"hljs-section\">server</span> &#123;<br>        <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;<br>        <span class=\"hljs-attribute\">listen</span>    <span class=\"hljs-number\">443</span> ssl;<br>        <span class=\"hljs-attribute\">server_name</span>  <span class=\"hljs-number\">192.168.1.15</span>;<br>\t<br>        <span class=\"hljs-attribute\">ssl_certificate</span>  D:\\ssl\\localssl.crt;<br>        <span class=\"hljs-attribute\">ssl_certificate_key</span>  D:\\ssl\\localssl_nopass.key;<br>&#125;<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生成SSL证书\"><a href=\"#生成SSL证书\" class=\"headerlink\" title=\"生成SSL证书\"></a>生成SSL证书</h2><ul>\n<li><p>生成RSA密钥：需要设置密码，后面的操作都需要使用这个密码；执行命令：<br> localssl.key由自己定义<br><code>openssl genrsa -des3 -out D:/ssl/localssl.key 2048</code></p>\n</li>\n<li><p>拷贝一个不需要密码的密钥<br><code>openssl rsa -in D:/ssl/localssl.key -out D:/ssl/localssl_nopass.key</code></p>\n</li>\n<li><p>生成一个证书请求, 填写证书信息<br><code>openssl rsa -in D:/ssl/localssl.key -out D:/ssl/localssl_nopass.key</code></p>\n</li>\n<li><p>用上面的密钥和CSR对进行证书签名,生成证书文件(days是证书有效期)<br><code>openssl x509 -req -days 3650 -in D:/ssl/localssl.csr -signkey D:/ssl/localssl.key -out D:/ssl/localssl.crt</code></p>\n</li>\n</ul>\n<h2 id=\"配置nginx的ssl，支持https\"><a href=\"#配置nginx的ssl，支持https\" class=\"headerlink\" title=\"配置nginx的ssl，支持https\"></a>配置nginx的ssl，支持https</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"> <span class=\"hljs-section\">server</span> &#123;<br>        <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;<br>        <span class=\"hljs-attribute\">listen</span>    <span class=\"hljs-number\">443</span> ssl;<br>        <span class=\"hljs-attribute\">server_name</span>  <span class=\"hljs-number\">192.168.1.15</span>;<br>\t<br>        <span class=\"hljs-attribute\">ssl_certificate</span>  D:\\ssl\\localssl.crt;<br>        <span class=\"hljs-attribute\">ssl_certificate_key</span>  D:\\ssl\\localssl_nopass.key;<br>&#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"shell编程语法","date":"2023-12-09T06:21:07.000Z","_content":"\n# 1.bash文件的定义\n\n告诉计算机使用哪种解释器，解释器有以下几种\n\n#!/bin/bash\n\n#!/bin/sh\n\n#!/usr/bin/env\n\n#!/usr/bin/python\n\n```shell\n#!/bin/bash\n#/bin/bash表示使用bash解释器\n#/bin/sh表示使用sh解释器\n#脚本内容\necho $(cat /etc/profile)\n```\n\n# 2.shell文件的执行方式\n\n- 文件保存为xxx.sh\n\n- 4种执行方式\n\n  - 文件执行,有权限限制，需要先赋予执行权限，开启子进程执行\n\n    `./xxx.sh`\n\n  - bash命令执行，解释器为bash，开启子进程执行\n\n    ​\t`bash ./xxx.sh`\n\n  - sh命令执行,解释器为sh,开启子进程执行\n\n    ​\t`sh ./xxx.sh`\n\n  - source命令(点命令)执行,不开启子进程(后台执行，终端关闭)\n\n    ​\t`source ./xxx.sh` `. ./xxx.sh`\n\n# 3.输入与输出\n\n> > 输出\n\n- echo\n\n```shell\n#原始内容直接输出，输出结果为shell\necho \"shell\"\n#转义输出,输出结果为hello world\necho -e \"hello\\tworld\"\n\n```\n\n\n\n- printf\n\n```shell\n#格式化输出,输出结果为｜12｜\nprintf \"|%d|\" 12 \n```\n\n> > 输入\n\n- read\n\n  - -p显示提示信息\n  - -t设置超时时间\n  - -n允许输入的字符长度\n  - -r 支持读取\\\n  - -s不显示输入内容\n\n  ```shell\n  #输入3组字符串\n  read a b c\n  #设置提示消息\n  read -p \"请输入内容：\" a\n  #不显示输入的内容\n  read -s -p \"请输入密码：\" a\n  ```\n\n  \n\n# 4.管道命令（中竖线） ｜\n\n```shell\n#统计命令执行结果中数据的行数\nls -la | wc -l\n#查看所有服务监听的端口列表中包含sshd的\nss -nutlp | grep sshd\n#将输出的字符串作为参数，修改root的密码\necho \"123...\" | passwd --stdin root\n```\n\n# 5.输入与输出重定向（将执行结果保存到文件中）\n\n- 输出重定向\n\n```shell\n#将执行结果导出到文件，如果文件不存在，则创建，存在则覆盖内容\nls -la > aaa.txt\n#将执行结果追加到文件的末尾，不覆盖文件\nls -la >>aaa.txt\n\n\n#正确与错误信息输出的重定向\n#1.正确输出重定向\nls -la >> aaa.txt\n#2.错误输出重定向\nls -la 2>>aaa.txt\n#3.正确与错误输出重定向到不同的文件\nls -la >>aaa.txt 2>>bbb.txt\n#4.正确与错误信息同时追加重定向到同一个文件中\nls -la &>>aaa.txt\n#5.将错误输出重定向到正确输出\nls -la  >aaa.txt 2>&1\n#6.将正确输出重定向到错误输出\nls -la  >aaa.txt 1>>&2\n\n```\n\n- 输入重定向\n\n使用<。<后面跟一个文件名。将数据内容重定向传递给前面的一个命令，作为命令的输入。\n\n```shell\n#非交互的执行命令.使用脚本自动发送邮件，从文件中读取参数\nmail -s warning root@localhosts < /etc/hosts\n\n#使用<<就可以让脚本不需要依赖文件即可独立运行\n#!/bin/bash\n#语法格式\n#命令 << 分隔符\n#内容\n#分隔符\n\n#cat通过<<读取数据，再通过输出重定向将数据导出到文件中\n#!/bin/bash\ncat > aaa.txt << HERE\nthis is content\nHERE\n\n#不能屏蔽tab键，缩进作为内容的一部分被输出，并传递给程序\n#!/bin/bash\ncat > aaa.txt << HERE\n\tthis is content\nHERE\n\n#使用<<-可以忽略掉数据内容及分隔符前的tab键，不传递给程序\n#!/bin/bash\ncat > aaa.txt <<- HERE\n\tthis is content\nHERE\n\n```\n\n# 6.变量与符号的使用\n更新中...","source":"_posts/shell/shell编程语法.md","raw":"---\ntitle: shell编程语法\ndate: 2023-12-09 14:21:07\ntags: shell编程\ncategories: shell\n---\n\n# 1.bash文件的定义\n\n告诉计算机使用哪种解释器，解释器有以下几种\n\n#!/bin/bash\n\n#!/bin/sh\n\n#!/usr/bin/env\n\n#!/usr/bin/python\n\n```shell\n#!/bin/bash\n#/bin/bash表示使用bash解释器\n#/bin/sh表示使用sh解释器\n#脚本内容\necho $(cat /etc/profile)\n```\n\n# 2.shell文件的执行方式\n\n- 文件保存为xxx.sh\n\n- 4种执行方式\n\n  - 文件执行,有权限限制，需要先赋予执行权限，开启子进程执行\n\n    `./xxx.sh`\n\n  - bash命令执行，解释器为bash，开启子进程执行\n\n    ​\t`bash ./xxx.sh`\n\n  - sh命令执行,解释器为sh,开启子进程执行\n\n    ​\t`sh ./xxx.sh`\n\n  - source命令(点命令)执行,不开启子进程(后台执行，终端关闭)\n\n    ​\t`source ./xxx.sh` `. ./xxx.sh`\n\n# 3.输入与输出\n\n> > 输出\n\n- echo\n\n```shell\n#原始内容直接输出，输出结果为shell\necho \"shell\"\n#转义输出,输出结果为hello world\necho -e \"hello\\tworld\"\n\n```\n\n\n\n- printf\n\n```shell\n#格式化输出,输出结果为｜12｜\nprintf \"|%d|\" 12 \n```\n\n> > 输入\n\n- read\n\n  - -p显示提示信息\n  - -t设置超时时间\n  - -n允许输入的字符长度\n  - -r 支持读取\\\n  - -s不显示输入内容\n\n  ```shell\n  #输入3组字符串\n  read a b c\n  #设置提示消息\n  read -p \"请输入内容：\" a\n  #不显示输入的内容\n  read -s -p \"请输入密码：\" a\n  ```\n\n  \n\n# 4.管道命令（中竖线） ｜\n\n```shell\n#统计命令执行结果中数据的行数\nls -la | wc -l\n#查看所有服务监听的端口列表中包含sshd的\nss -nutlp | grep sshd\n#将输出的字符串作为参数，修改root的密码\necho \"123...\" | passwd --stdin root\n```\n\n# 5.输入与输出重定向（将执行结果保存到文件中）\n\n- 输出重定向\n\n```shell\n#将执行结果导出到文件，如果文件不存在，则创建，存在则覆盖内容\nls -la > aaa.txt\n#将执行结果追加到文件的末尾，不覆盖文件\nls -la >>aaa.txt\n\n\n#正确与错误信息输出的重定向\n#1.正确输出重定向\nls -la >> aaa.txt\n#2.错误输出重定向\nls -la 2>>aaa.txt\n#3.正确与错误输出重定向到不同的文件\nls -la >>aaa.txt 2>>bbb.txt\n#4.正确与错误信息同时追加重定向到同一个文件中\nls -la &>>aaa.txt\n#5.将错误输出重定向到正确输出\nls -la  >aaa.txt 2>&1\n#6.将正确输出重定向到错误输出\nls -la  >aaa.txt 1>>&2\n\n```\n\n- 输入重定向\n\n使用<。<后面跟一个文件名。将数据内容重定向传递给前面的一个命令，作为命令的输入。\n\n```shell\n#非交互的执行命令.使用脚本自动发送邮件，从文件中读取参数\nmail -s warning root@localhosts < /etc/hosts\n\n#使用<<就可以让脚本不需要依赖文件即可独立运行\n#!/bin/bash\n#语法格式\n#命令 << 分隔符\n#内容\n#分隔符\n\n#cat通过<<读取数据，再通过输出重定向将数据导出到文件中\n#!/bin/bash\ncat > aaa.txt << HERE\nthis is content\nHERE\n\n#不能屏蔽tab键，缩进作为内容的一部分被输出，并传递给程序\n#!/bin/bash\ncat > aaa.txt << HERE\n\tthis is content\nHERE\n\n#使用<<-可以忽略掉数据内容及分隔符前的tab键，不传递给程序\n#!/bin/bash\ncat > aaa.txt <<- HERE\n\tthis is content\nHERE\n\n```\n\n# 6.变量与符号的使用\n更新中...","slug":"shell/shell编程语法","published":1,"updated":"2023-12-09T06:22:26.696Z","_id":"clpxo3luz000gwwwf530n48we","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-bash文件的定义\"><a href=\"#1-bash文件的定义\" class=\"headerlink\" title=\"1.bash文件的定义\"></a>1.bash文件的定义</h1><p>告诉计算机使用哪种解释器，解释器有以下几种</p>\n<p>#!&#x2F;bin&#x2F;bash</p>\n<p>#!&#x2F;bin&#x2F;sh</p>\n<p>#!&#x2F;usr&#x2F;bin&#x2F;env</p>\n<p>#!&#x2F;usr&#x2F;bin&#x2F;python</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">/bin/bash表示使用bash解释器</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">/bin/sh表示使用sh解释器</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">脚本内容</span><br>echo $(cat /etc/profile)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"2-shell文件的执行方式\"><a href=\"#2-shell文件的执行方式\" class=\"headerlink\" title=\"2.shell文件的执行方式\"></a>2.shell文件的执行方式</h1><ul>\n<li><p>文件保存为xxx.sh</p>\n</li>\n<li><p>4种执行方式</p>\n<ul>\n<li><p>文件执行,有权限限制，需要先赋予执行权限，开启子进程执行</p>\n<p><code>./xxx.sh</code></p>\n</li>\n<li><p>bash命令执行，解释器为bash，开启子进程执行</p>\n<p>​\t<code>bash ./xxx.sh</code></p>\n</li>\n<li><p>sh命令执行,解释器为sh,开启子进程执行</p>\n<p>​\t<code>sh ./xxx.sh</code></p>\n</li>\n<li><p>source命令(点命令)执行,不开启子进程(后台执行，终端关闭)</p>\n<p>​\t<code>source ./xxx.sh</code> <code>. ./xxx.sh</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"3-输入与输出\"><a href=\"#3-输入与输出\" class=\"headerlink\" title=\"3.输入与输出\"></a>3.输入与输出</h1><blockquote>\n<blockquote>\n<p>输出</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>echo</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">原始内容直接输出，输出结果为shell</span><br>echo &quot;shell&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">转义输出,输出结果为hello world</span><br>echo -e &quot;hello\\tworld&quot;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>printf</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">格式化输出,输出结果为｜12｜</span><br>printf &quot;|%d|&quot; 12 <br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<blockquote>\n<p>输入</p>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>read</p>\n<ul>\n<li>-p显示提示信息</li>\n<li>-t设置超时时间</li>\n<li>-n允许输入的字符长度</li>\n<li>-r 支持读取\\</li>\n<li>-s不显示输入内容</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">输入3组字符串</span><br>read a b c<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置提示消息</span><br>read -p &quot;请输入内容：&quot; a<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">不显示输入的内容</span><br>read -s -p &quot;请输入密码：&quot; a<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"4-管道命令（中竖线）-｜\"><a href=\"#4-管道命令（中竖线）-｜\" class=\"headerlink\" title=\"4.管道命令（中竖线） ｜\"></a>4.管道命令（中竖线） ｜</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">统计命令执行结果中数据的行数</span><br>ls -la | wc -l<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看所有服务监听的端口列表中包含sshd的</span><br>ss -nutlp | grep sshd<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">将输出的字符串作为参数，修改root的密码</span><br>echo &quot;123...&quot; | passwd --stdin root<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"5-输入与输出重定向（将执行结果保存到文件中）\"><a href=\"#5-输入与输出重定向（将执行结果保存到文件中）\" class=\"headerlink\" title=\"5.输入与输出重定向（将执行结果保存到文件中）\"></a>5.输入与输出重定向（将执行结果保存到文件中）</h1><ul>\n<li>输出重定向</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">将执行结果导出到文件，如果文件不存在，则创建，存在则覆盖内容</span><br>ls -la &gt; aaa.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">将执行结果追加到文件的末尾，不覆盖文件</span><br>ls -la &gt;&gt;aaa.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">正确与错误信息输出的重定向</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">1.正确输出重定向</span><br>ls -la &gt;&gt; aaa.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">2.错误输出重定向</span><br>ls -la 2&gt;&gt;aaa.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">3.正确与错误输出重定向到不同的文件</span><br>ls -la &gt;&gt;aaa.txt 2&gt;&gt;bbb.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">4.正确与错误信息同时追加重定向到同一个文件中</span><br>ls -la &amp;&gt;&gt;aaa.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">5.将错误输出重定向到正确输出</span><br>ls -la  &gt;aaa.txt 2&gt;&amp;1<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">6.将正确输出重定向到错误输出</span><br>ls -la  &gt;aaa.txt 1&gt;&gt;&amp;2<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>输入重定向</li>\n</ul>\n<p>使用&lt;。&lt;后面跟一个文件名。将数据内容重定向传递给前面的一个命令，作为命令的输入。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">非交互的执行命令.使用脚本自动发送邮件，从文件中读取参数</span><br>mail -s warning root@localhosts &lt; /etc/hosts<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">使用&lt;&lt;就可以让脚本不需要依赖文件即可独立运行</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">语法格式</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">命令 &lt;&lt; 分隔符</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">内容</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">分隔符</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">cat</span>通过&lt;&lt;读取数据，再通过输出重定向将数据导出到文件中</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>cat &gt; aaa.txt &lt;&lt; HERE<br>this is content<br>HERE<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">不能屏蔽tab键，缩进作为内容的一部分被输出，并传递给程序</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>cat &gt; aaa.txt &lt;&lt; HERE<br>\tthis is content<br>HERE<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">使用&lt;&lt;-可以忽略掉数据内容及分隔符前的tab键，不传递给程序</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>cat &gt; aaa.txt &lt;&lt;- HERE<br>\tthis is content<br>HERE<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"6-变量与符号的使用\"><a href=\"#6-变量与符号的使用\" class=\"headerlink\" title=\"6.变量与符号的使用\"></a>6.变量与符号的使用</h1><p>更新中…</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-bash文件的定义\"><a href=\"#1-bash文件的定义\" class=\"headerlink\" title=\"1.bash文件的定义\"></a>1.bash文件的定义</h1><p>告诉计算机使用哪种解释器，解释器有以下几种</p>\n<p>#!&#x2F;bin&#x2F;bash</p>\n<p>#!&#x2F;bin&#x2F;sh</p>\n<p>#!&#x2F;usr&#x2F;bin&#x2F;env</p>\n<p>#!&#x2F;usr&#x2F;bin&#x2F;python</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">/bin/bash表示使用bash解释器</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">/bin/sh表示使用sh解释器</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">脚本内容</span><br>echo $(cat /etc/profile)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"2-shell文件的执行方式\"><a href=\"#2-shell文件的执行方式\" class=\"headerlink\" title=\"2.shell文件的执行方式\"></a>2.shell文件的执行方式</h1><ul>\n<li><p>文件保存为xxx.sh</p>\n</li>\n<li><p>4种执行方式</p>\n<ul>\n<li><p>文件执行,有权限限制，需要先赋予执行权限，开启子进程执行</p>\n<p><code>./xxx.sh</code></p>\n</li>\n<li><p>bash命令执行，解释器为bash，开启子进程执行</p>\n<p>​\t<code>bash ./xxx.sh</code></p>\n</li>\n<li><p>sh命令执行,解释器为sh,开启子进程执行</p>\n<p>​\t<code>sh ./xxx.sh</code></p>\n</li>\n<li><p>source命令(点命令)执行,不开启子进程(后台执行，终端关闭)</p>\n<p>​\t<code>source ./xxx.sh</code> <code>. ./xxx.sh</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"3-输入与输出\"><a href=\"#3-输入与输出\" class=\"headerlink\" title=\"3.输入与输出\"></a>3.输入与输出</h1><blockquote>\n<blockquote>\n<p>输出</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>echo</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">原始内容直接输出，输出结果为shell</span><br>echo &quot;shell&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">转义输出,输出结果为hello world</span><br>echo -e &quot;hello\\tworld&quot;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>printf</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">格式化输出,输出结果为｜12｜</span><br>printf &quot;|%d|&quot; 12 <br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<blockquote>\n<p>输入</p>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>read</p>\n<ul>\n<li>-p显示提示信息</li>\n<li>-t设置超时时间</li>\n<li>-n允许输入的字符长度</li>\n<li>-r 支持读取\\</li>\n<li>-s不显示输入内容</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">输入3组字符串</span><br>read a b c<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置提示消息</span><br>read -p &quot;请输入内容：&quot; a<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">不显示输入的内容</span><br>read -s -p &quot;请输入密码：&quot; a<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"4-管道命令（中竖线）-｜\"><a href=\"#4-管道命令（中竖线）-｜\" class=\"headerlink\" title=\"4.管道命令（中竖线） ｜\"></a>4.管道命令（中竖线） ｜</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">统计命令执行结果中数据的行数</span><br>ls -la | wc -l<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看所有服务监听的端口列表中包含sshd的</span><br>ss -nutlp | grep sshd<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">将输出的字符串作为参数，修改root的密码</span><br>echo &quot;123...&quot; | passwd --stdin root<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"5-输入与输出重定向（将执行结果保存到文件中）\"><a href=\"#5-输入与输出重定向（将执行结果保存到文件中）\" class=\"headerlink\" title=\"5.输入与输出重定向（将执行结果保存到文件中）\"></a>5.输入与输出重定向（将执行结果保存到文件中）</h1><ul>\n<li>输出重定向</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">将执行结果导出到文件，如果文件不存在，则创建，存在则覆盖内容</span><br>ls -la &gt; aaa.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">将执行结果追加到文件的末尾，不覆盖文件</span><br>ls -la &gt;&gt;aaa.txt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">正确与错误信息输出的重定向</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">1.正确输出重定向</span><br>ls -la &gt;&gt; aaa.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">2.错误输出重定向</span><br>ls -la 2&gt;&gt;aaa.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">3.正确与错误输出重定向到不同的文件</span><br>ls -la &gt;&gt;aaa.txt 2&gt;&gt;bbb.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">4.正确与错误信息同时追加重定向到同一个文件中</span><br>ls -la &amp;&gt;&gt;aaa.txt<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">5.将错误输出重定向到正确输出</span><br>ls -la  &gt;aaa.txt 2&gt;&amp;1<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">6.将正确输出重定向到错误输出</span><br>ls -la  &gt;aaa.txt 1&gt;&gt;&amp;2<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>输入重定向</li>\n</ul>\n<p>使用&lt;。&lt;后面跟一个文件名。将数据内容重定向传递给前面的一个命令，作为命令的输入。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">非交互的执行命令.使用脚本自动发送邮件，从文件中读取参数</span><br>mail -s warning root@localhosts &lt; /etc/hosts<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">使用&lt;&lt;就可以让脚本不需要依赖文件即可独立运行</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">语法格式</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">命令 &lt;&lt; 分隔符</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">内容</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">分隔符</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"><span class=\"hljs-built_in\">cat</span>通过&lt;&lt;读取数据，再通过输出重定向将数据导出到文件中</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>cat &gt; aaa.txt &lt;&lt; HERE<br>this is content<br>HERE<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">不能屏蔽tab键，缩进作为内容的一部分被输出，并传递给程序</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>cat &gt; aaa.txt &lt;&lt; HERE<br>\tthis is content<br>HERE<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">使用&lt;&lt;-可以忽略掉数据内容及分隔符前的tab键，不传递给程序</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>cat &gt; aaa.txt &lt;&lt;- HERE<br>\tthis is content<br>HERE<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"6-变量与符号的使用\"><a href=\"#6-变量与符号的使用\" class=\"headerlink\" title=\"6.变量与符号的使用\"></a>6.变量与符号的使用</h1><p>更新中…</p>\n"},{"title":"shell常用脚本","date":"2023-12-09T06:32:11.000Z","_content":"\n# 1. 安装java环境\n\n## 1. 准备jdk安装包，environment.txt 环境变量配置文件\n\n```shell\n\n\nexport JAVA_HOME=/usr/local/software/jdk1.8.0_231\nexport PATH=$PATH:$JAVA_HOME/bin\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JRE_HOME=$JAVA_HOME/jre\n\n\n```\n\n## 2. 准备脚本jdk-install.sh\n\n```shell\n\n#!/bin/bash\n\necho \"解压jdk\"\ntar -zxvf jdk-8u231-linux-x64.tar.gz\n\ncat environment.txt >> ~/.bash_profile\nsource ~/.bash_profile\njava -version\n\n\n```\n\n## 3. 执行脚本\n\n```shell\nsh jdk-install.sh\n\n```\n\n# 2. 安装nginx\n\n## 1. 准备脚本nginx-install.sh\n\n```shell\n\n#!/bin/bash\n\nsoftware_dir=/usr/local/software\nnginx_dir=$software_dir/nginx\nmkdir -p $nginx_dir\nchmod -R 755 $nginx_dir\n\ncd $nginx_dir \n\necho \"安装依赖包\"\nyum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel wget\nwget http://nginx.org/download/nginx-1.23.2.tar.gz\n\ntar -xvf nginx-1.23.2.tar.gz\n\ncd $nginx_dir/nginx-1.23.2\n\necho \"安装SSL模块\"\n./configure --prefix=$nginx_dir --with-http_stub_status_module --with-http_ssl_module\n\nmake\nmake install\n\n\necho \"创建启动脚本\"\n\ntee $nginx_dir/startup.sh <<-'EOF'\n\nsoftware_dir=/usr/local/software\nnginx_dir=$software_dir/nginx\n\n$nginx_dir/sbin/nginx -c $nginx_dir/conf/nginx.conf\n\nEOF\n\nchmod 755 $nginx_dir/startup.sh\n\necho \"创建停止脚本\"\ntee $nginx_dir/stop.sh <<-'EOF'\n\nsoftware_dir=/usr/local/software\nnginx_dir=$software_dir/nginx\n\n$nginx_dir/sbin/nginx -s stop\n\nEOF\n   \nchmod 755 $nginx_dir/stop.sh\n\n\necho \"创建重启脚本\"\ntee $nginx_dir/restart.sh <<-'EOF'\n\nsh stop.sh\nsh startup.sh\n\nEOF\n\nchmod 755 $nginx_dir/restart.sh\n#在文件首行插入内容\nsed -i '1i\\#!/bin/bash' $nginx_dir/*.sh\n\nmv $software_dir/nginx-install.sh $nginx_dir\n\necho \"开放tcp/ip端口80-25535\"\nfirewall-cmd --zone=public --add-port=80-25535/tcp --permanent\nfirewall-cmd --reload\n\n```\n\n## 2 . 执行脚本\n\n```shell\nsh nginx-install.sh\n\n```\n\n\n# 3. 安装docker\n\n## 1.  准备脚本docker-install.sh\n\n```shell\n\n#!/bin/bash\nsudo yum remove docker*\necho \"安装必要软件包\"\n\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\necho \"Step 2: 添加软件源信息\"\nsudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nsudo sed -i 's+download.docker.com+mirrors.aliyun.com/docker-ce+' /etc/yum.repos.d/docker-ce.repo\necho \"更新并安装Docker-CE-20.10.17\"\nsudo yum makecache fast\nsudo yum -y install docker-ce-20.10.12-3.el7\necho \"设置开机启动\"\nsystemctl enable docker --now\necho \"配置镜像加速器\"\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n \"registry-mirrors\": [\"https://y96pbacg.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n#更新系统时间\necho \"同步系统时间\"\nyum install ntpdate -y\nntpdate cn.pool.ntp.org\n\n\n```\n\n## 2. 执行脚本\n\n```shell\nsh docker-install.sh\n\n```\n\n# 4. 安装k8s集群\n\n## 1 . 安装docker\n略\n\n## 2. 规划集群节点\n\n主节点master：172.20.10.2\n从节点slave：172.20.10.4\n\n\n## 3. 准备脚本k8s-install.sh\n\n```shell\n\n#!/bin/bash\necho \"--------------------step-1 初始化环境-------------------------\"\necho \"设置节点的hostname\"\nnode_hostname=$1\nhostnamectl set-hostname $node_hostname\n\necho \"将 SELinux 设置为 permissive 模式（相当于将其禁用）\"\n# 将 SELinux 设置为 permissive 模式（相当于将其禁用）\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\necho \"关闭swap\"\n#关闭swap\nswapoff -a  \nsed -ri 's/.*swap.*/#&/' /etc/fstab\n\necho \"允许 iptables 检查桥接流量\"\n#允许 iptables 检查桥接流量\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\nbr_netfilter\nEOF\n\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsudo sysctl --system\n\n#放行端口\nsudo tee ./turnon-port.sh <<-'EOF'\n#打开端口\n#!/bin/bash\necho \"Open firewall port $1\"\nfirewall-cmd --zone=public --add-port=$1/tcp --permanent\nfirewall-cmd --reload\nfirewall-cmd --zone=public --list-ports\nEOF\nchmod 755 ./turnon-port.sh\nsh ./turnon-port.sh 30000-32796\niptables -P INPUT ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT ACCEPT\niptables -F\nsystemctl restart docker\n#更新系统时间\necho \"同步系统时间\"\nyum install ntpdate -y\nntpdate cn.pool.ntp.org\n\nrm -rf /etc/containerd/config.toml\nsystemctl restart containerd\n\necho \"--------------------step-2 安装kubelet、kubeadm、kubectl-------------------------\"\n\ncat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nexclude=kubelet kubeadm kubectl\nEOF\n\n\nsudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes\necho \"设置kubelet开机启动\"\nsudo systemctl enable --now kubelet\n\n\necho \"--------------------step-3 使用kubeadmin引导集群， 下载各个机器需要的镜像-------------------------\"\nsudo tee ./images.sh <<-'EOF'\n#!/bin/bash\nimages=(\nkube-apiserver:v1.20.9\nkube-proxy:v1.20.9\nkube-controller-manager:v1.20.9\nkube-scheduler:v1.20.9\ncoredns:1.7.0\netcd:3.4.13-0\npause:3.2\n)\nfor imageName in ${images[@]} ; do\ndocker pull registry.aliyuncs.com/google_containers/$imageName\ndone\nEOF\n   \nchmod +x ./images.sh && ./images.sh\n\necho \"所有机器添加master域名映射\"\necho \"172.20.10.2  cluster-endpoint\" >> /etc/hosts\necho \"172.20.10.2  master\" >> /etc/hosts\necho \"172.20.10.4  slave\" >> /etc/hosts\n\n\ncurrent_hostname=$(hostname)\n\nif [ \"${current_hostname}\"x = \"master\"x ];then\n\techo \"主节点初始化\"\n\tkubeadm init \\\n\t--apiserver-advertise-address=172.20.10.2 \\\n\t--control-plane-endpoint=cluster-endpoint \\\n\t--image-repository registry.aliyuncs.com/google_containers \\\n\t--kubernetes-version v1.20.9 \\\n\t--service-cidr=10.96.0.0/16 \\\n\t--pod-network-cidr=192.168.0.0/16\n\t\n\techo \"设置kube config\"\n\tmkdir -p $HOME/.kube\n\tsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n\tsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\t\n\techo \"安装网络插件\"\n\tcurl https://docs.projectcalico.org/v3.20/manifests/calico.yaml -O\n\tkubectl apply -f calico.yaml\n\t\n\techo \"请在work节点执行kubeadmin join命令加入节点\"\t\nfi\n\n\n```\n\n## 4.  主节点执行脚本进行初始化集群\n\n` sh k8s-install.sh master `\n\n## 5.  从节点执行脚本初始化集群，并加入主节点的集群(执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行)\n\n` sh k8s-install.sh slave `\n\n# 5. 安装nfs\n\n## 1.  规划nfs节点\n\nserver节点: 172.20.10.2\n\nclient节点: 172.20.10.4\n\n## 2.  准备安装脚本nfs-install.sh, 可同时用于server端和client端\n\n```shell\n#/bin/bash\n\necho \"安装依赖nfs-utils nfs-common：\"\nyum install -y nfs-utils nfs-common\n\nFILE_PATH=/nfs/data\nSERVER_TYPE=$1\n\nif [ \"${SERVER_TYPE}\"x = \"server\"x ];then\n\t#nfs服务节点\n\techo \"$FILE_PATH *(insecure,rw,sync,no_root_squash)\" > /etc/exports\n\tmkdir -p /nfs/data\n\tsystemctl enable rpcbind --now\n\tsystemctl enable nfs-server --now\n\tsystemctl start rpcbind\n\tsystemctl start nfs-server\n\t#配置生效\n\texportfs -r\nfi\n\nif [ \"${SERVER_TYPE}\"x = \"client\"x ];then\n    SERVER_IP=$2\n\t#nfs客户端节点\n\tshowmount -e $SERVER_IP\n\n\t#执行以下命令挂载 nfs 服务器上的共享目录到本机路径 /root/nfsmount\n\tmkdir -p $FILE_PATH\n\tmount -t nfs $SERVER_IP:$FILE_PATH $FILE_PATH\n\t#验证挂载生效\n\t# 写入一个测试文件\n\techo \"hello nfs server\" > $FILE_PATH/example.txt\n\techo \"please to the nfs server of $SERVER_IP read $FILE_PATH/example.txt\"\nfi\n\n```\n\n## 3. 安装server端，执行脚本\n```shell\n\nsh nfs-install.sh server\n\n```\n\n## 4. 安装client端，指定server的ip地址，执行脚本\n```shell\n\nsh nfs-install.sh client 172.20.10.2\n\n```","source":"_posts/shell/shell常用脚本.md","raw":"---\ntitle: shell常用脚本\ndate: 2023-12-09 14:32:11\ntags: shell\ncategories: shell\n---\n\n# 1. 安装java环境\n\n## 1. 准备jdk安装包，environment.txt 环境变量配置文件\n\n```shell\n\n\nexport JAVA_HOME=/usr/local/software/jdk1.8.0_231\nexport PATH=$PATH:$JAVA_HOME/bin\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JRE_HOME=$JAVA_HOME/jre\n\n\n```\n\n## 2. 准备脚本jdk-install.sh\n\n```shell\n\n#!/bin/bash\n\necho \"解压jdk\"\ntar -zxvf jdk-8u231-linux-x64.tar.gz\n\ncat environment.txt >> ~/.bash_profile\nsource ~/.bash_profile\njava -version\n\n\n```\n\n## 3. 执行脚本\n\n```shell\nsh jdk-install.sh\n\n```\n\n# 2. 安装nginx\n\n## 1. 准备脚本nginx-install.sh\n\n```shell\n\n#!/bin/bash\n\nsoftware_dir=/usr/local/software\nnginx_dir=$software_dir/nginx\nmkdir -p $nginx_dir\nchmod -R 755 $nginx_dir\n\ncd $nginx_dir \n\necho \"安装依赖包\"\nyum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel wget\nwget http://nginx.org/download/nginx-1.23.2.tar.gz\n\ntar -xvf nginx-1.23.2.tar.gz\n\ncd $nginx_dir/nginx-1.23.2\n\necho \"安装SSL模块\"\n./configure --prefix=$nginx_dir --with-http_stub_status_module --with-http_ssl_module\n\nmake\nmake install\n\n\necho \"创建启动脚本\"\n\ntee $nginx_dir/startup.sh <<-'EOF'\n\nsoftware_dir=/usr/local/software\nnginx_dir=$software_dir/nginx\n\n$nginx_dir/sbin/nginx -c $nginx_dir/conf/nginx.conf\n\nEOF\n\nchmod 755 $nginx_dir/startup.sh\n\necho \"创建停止脚本\"\ntee $nginx_dir/stop.sh <<-'EOF'\n\nsoftware_dir=/usr/local/software\nnginx_dir=$software_dir/nginx\n\n$nginx_dir/sbin/nginx -s stop\n\nEOF\n   \nchmod 755 $nginx_dir/stop.sh\n\n\necho \"创建重启脚本\"\ntee $nginx_dir/restart.sh <<-'EOF'\n\nsh stop.sh\nsh startup.sh\n\nEOF\n\nchmod 755 $nginx_dir/restart.sh\n#在文件首行插入内容\nsed -i '1i\\#!/bin/bash' $nginx_dir/*.sh\n\nmv $software_dir/nginx-install.sh $nginx_dir\n\necho \"开放tcp/ip端口80-25535\"\nfirewall-cmd --zone=public --add-port=80-25535/tcp --permanent\nfirewall-cmd --reload\n\n```\n\n## 2 . 执行脚本\n\n```shell\nsh nginx-install.sh\n\n```\n\n\n# 3. 安装docker\n\n## 1.  准备脚本docker-install.sh\n\n```shell\n\n#!/bin/bash\nsudo yum remove docker*\necho \"安装必要软件包\"\n\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\necho \"Step 2: 添加软件源信息\"\nsudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nsudo sed -i 's+download.docker.com+mirrors.aliyun.com/docker-ce+' /etc/yum.repos.d/docker-ce.repo\necho \"更新并安装Docker-CE-20.10.17\"\nsudo yum makecache fast\nsudo yum -y install docker-ce-20.10.12-3.el7\necho \"设置开机启动\"\nsystemctl enable docker --now\necho \"配置镜像加速器\"\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n \"registry-mirrors\": [\"https://y96pbacg.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n#更新系统时间\necho \"同步系统时间\"\nyum install ntpdate -y\nntpdate cn.pool.ntp.org\n\n\n```\n\n## 2. 执行脚本\n\n```shell\nsh docker-install.sh\n\n```\n\n# 4. 安装k8s集群\n\n## 1 . 安装docker\n略\n\n## 2. 规划集群节点\n\n主节点master：172.20.10.2\n从节点slave：172.20.10.4\n\n\n## 3. 准备脚本k8s-install.sh\n\n```shell\n\n#!/bin/bash\necho \"--------------------step-1 初始化环境-------------------------\"\necho \"设置节点的hostname\"\nnode_hostname=$1\nhostnamectl set-hostname $node_hostname\n\necho \"将 SELinux 设置为 permissive 模式（相当于将其禁用）\"\n# 将 SELinux 设置为 permissive 模式（相当于将其禁用）\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\necho \"关闭swap\"\n#关闭swap\nswapoff -a  \nsed -ri 's/.*swap.*/#&/' /etc/fstab\n\necho \"允许 iptables 检查桥接流量\"\n#允许 iptables 检查桥接流量\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\nbr_netfilter\nEOF\n\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsudo sysctl --system\n\n#放行端口\nsudo tee ./turnon-port.sh <<-'EOF'\n#打开端口\n#!/bin/bash\necho \"Open firewall port $1\"\nfirewall-cmd --zone=public --add-port=$1/tcp --permanent\nfirewall-cmd --reload\nfirewall-cmd --zone=public --list-ports\nEOF\nchmod 755 ./turnon-port.sh\nsh ./turnon-port.sh 30000-32796\niptables -P INPUT ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT ACCEPT\niptables -F\nsystemctl restart docker\n#更新系统时间\necho \"同步系统时间\"\nyum install ntpdate -y\nntpdate cn.pool.ntp.org\n\nrm -rf /etc/containerd/config.toml\nsystemctl restart containerd\n\necho \"--------------------step-2 安装kubelet、kubeadm、kubectl-------------------------\"\n\ncat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nexclude=kubelet kubeadm kubectl\nEOF\n\n\nsudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes\necho \"设置kubelet开机启动\"\nsudo systemctl enable --now kubelet\n\n\necho \"--------------------step-3 使用kubeadmin引导集群， 下载各个机器需要的镜像-------------------------\"\nsudo tee ./images.sh <<-'EOF'\n#!/bin/bash\nimages=(\nkube-apiserver:v1.20.9\nkube-proxy:v1.20.9\nkube-controller-manager:v1.20.9\nkube-scheduler:v1.20.9\ncoredns:1.7.0\netcd:3.4.13-0\npause:3.2\n)\nfor imageName in ${images[@]} ; do\ndocker pull registry.aliyuncs.com/google_containers/$imageName\ndone\nEOF\n   \nchmod +x ./images.sh && ./images.sh\n\necho \"所有机器添加master域名映射\"\necho \"172.20.10.2  cluster-endpoint\" >> /etc/hosts\necho \"172.20.10.2  master\" >> /etc/hosts\necho \"172.20.10.4  slave\" >> /etc/hosts\n\n\ncurrent_hostname=$(hostname)\n\nif [ \"${current_hostname}\"x = \"master\"x ];then\n\techo \"主节点初始化\"\n\tkubeadm init \\\n\t--apiserver-advertise-address=172.20.10.2 \\\n\t--control-plane-endpoint=cluster-endpoint \\\n\t--image-repository registry.aliyuncs.com/google_containers \\\n\t--kubernetes-version v1.20.9 \\\n\t--service-cidr=10.96.0.0/16 \\\n\t--pod-network-cidr=192.168.0.0/16\n\t\n\techo \"设置kube config\"\n\tmkdir -p $HOME/.kube\n\tsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n\tsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\t\n\techo \"安装网络插件\"\n\tcurl https://docs.projectcalico.org/v3.20/manifests/calico.yaml -O\n\tkubectl apply -f calico.yaml\n\t\n\techo \"请在work节点执行kubeadmin join命令加入节点\"\t\nfi\n\n\n```\n\n## 4.  主节点执行脚本进行初始化集群\n\n` sh k8s-install.sh master `\n\n## 5.  从节点执行脚本初始化集群，并加入主节点的集群(执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行)\n\n` sh k8s-install.sh slave `\n\n# 5. 安装nfs\n\n## 1.  规划nfs节点\n\nserver节点: 172.20.10.2\n\nclient节点: 172.20.10.4\n\n## 2.  准备安装脚本nfs-install.sh, 可同时用于server端和client端\n\n```shell\n#/bin/bash\n\necho \"安装依赖nfs-utils nfs-common：\"\nyum install -y nfs-utils nfs-common\n\nFILE_PATH=/nfs/data\nSERVER_TYPE=$1\n\nif [ \"${SERVER_TYPE}\"x = \"server\"x ];then\n\t#nfs服务节点\n\techo \"$FILE_PATH *(insecure,rw,sync,no_root_squash)\" > /etc/exports\n\tmkdir -p /nfs/data\n\tsystemctl enable rpcbind --now\n\tsystemctl enable nfs-server --now\n\tsystemctl start rpcbind\n\tsystemctl start nfs-server\n\t#配置生效\n\texportfs -r\nfi\n\nif [ \"${SERVER_TYPE}\"x = \"client\"x ];then\n    SERVER_IP=$2\n\t#nfs客户端节点\n\tshowmount -e $SERVER_IP\n\n\t#执行以下命令挂载 nfs 服务器上的共享目录到本机路径 /root/nfsmount\n\tmkdir -p $FILE_PATH\n\tmount -t nfs $SERVER_IP:$FILE_PATH $FILE_PATH\n\t#验证挂载生效\n\t# 写入一个测试文件\n\techo \"hello nfs server\" > $FILE_PATH/example.txt\n\techo \"please to the nfs server of $SERVER_IP read $FILE_PATH/example.txt\"\nfi\n\n```\n\n## 3. 安装server端，执行脚本\n```shell\n\nsh nfs-install.sh server\n\n```\n\n## 4. 安装client端，指定server的ip地址，执行脚本\n```shell\n\nsh nfs-install.sh client 172.20.10.2\n\n```","slug":"shell/shell常用脚本","published":1,"updated":"2023-12-09T07:06:12.801Z","_id":"clpxohu9q000kwwwfhn09h9cl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-安装java环境\"><a href=\"#1-安装java环境\" class=\"headerlink\" title=\"1. 安装java环境\"></a>1. 安装java环境</h1><h2 id=\"1-准备jdk安装包，environment-txt-环境变量配置文件\"><a href=\"#1-准备jdk安装包，environment-txt-环境变量配置文件\" class=\"headerlink\" title=\"1. 准备jdk安装包，environment.txt 环境变量配置文件\"></a>1. 准备jdk安装包，environment.txt 环境变量配置文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br><br>export JAVA_HOME=/usr/local/software/jdk1.8.0_231<br>export PATH=$PATH:$JAVA_HOME/bin<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export JRE_HOME=$JAVA_HOME/jre<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-准备脚本jdk-install-sh\"><a href=\"#2-准备脚本jdk-install-sh\" class=\"headerlink\" title=\"2. 准备脚本jdk-install.sh\"></a>2. 准备脚本jdk-install.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>echo &quot;解压jdk&quot;<br>tar -zxvf jdk-8u231-linux-x64.tar.gz<br><br>cat environment.txt &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br>java -version<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-执行脚本\"><a href=\"#3-执行脚本\" class=\"headerlink\" title=\"3. 执行脚本\"></a>3. 执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh jdk-install.sh<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"2-安装nginx\"><a href=\"#2-安装nginx\" class=\"headerlink\" title=\"2. 安装nginx\"></a>2. 安装nginx</h1><h2 id=\"1-准备脚本nginx-install-sh\"><a href=\"#1-准备脚本nginx-install-sh\" class=\"headerlink\" title=\"1. 准备脚本nginx-install.sh\"></a>1. 准备脚本nginx-install.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>software_dir=/usr/local/software<br>nginx_dir=$software_dir/nginx<br>mkdir -p $nginx_dir<br>chmod -R 755 $nginx_dir<br><br>cd $nginx_dir <br><br>echo &quot;安装依赖包&quot;<br>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel wget<br>wget http://nginx.org/download/nginx-1.23.2.tar.gz<br><br>tar -xvf nginx-1.23.2.tar.gz<br><br>cd $nginx_dir/nginx-1.23.2<br><br>echo &quot;安装SSL模块&quot;<br>./configure --prefix=$nginx_dir --with-http_stub_status_module --with-http_ssl_module<br><br>make<br>make install<br><br><br>echo &quot;创建启动脚本&quot;<br><br>tee $nginx_dir/startup.sh &lt;&lt;-&#x27;EOF&#x27;<br><br>software_dir=/usr/local/software<br>nginx_dir=$software_dir/nginx<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$</span><span class=\"language-bash\">nginx_dir/sbin/nginx -c <span class=\"hljs-variable\">$nginx_dir</span>/conf/nginx.conf</span><br><br>EOF<br><br>chmod 755 $nginx_dir/startup.sh<br><br>echo &quot;创建停止脚本&quot;<br>tee $nginx_dir/stop.sh &lt;&lt;-&#x27;EOF&#x27;<br><br>software_dir=/usr/local/software<br>nginx_dir=$software_dir/nginx<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$</span><span class=\"language-bash\">nginx_dir/sbin/nginx -s stop</span><br><br>EOF<br>   <br>chmod 755 $nginx_dir/stop.sh<br><br><br>echo &quot;创建重启脚本&quot;<br>tee $nginx_dir/restart.sh &lt;&lt;-&#x27;EOF&#x27;<br><br>sh stop.sh<br>sh startup.sh<br><br>EOF<br><br>chmod 755 $nginx_dir/restart.sh<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">在文件首行插入内容</span><br>sed -i &#x27;1i\\#!/bin/bash&#x27; $nginx_dir/*.sh<br><br>mv $software_dir/nginx-install.sh $nginx_dir<br><br>echo &quot;开放tcp/ip端口80-25535&quot;<br>firewall-cmd --zone=public --add-port=80-25535/tcp --permanent<br>firewall-cmd --reload<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-执行脚本\"><a href=\"#2-执行脚本\" class=\"headerlink\" title=\"2 . 执行脚本\"></a>2 . 执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh nginx-install.sh<br><br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"3-安装docker\"><a href=\"#3-安装docker\" class=\"headerlink\" title=\"3. 安装docker\"></a>3. 安装docker</h1><h2 id=\"1-准备脚本docker-install-sh\"><a href=\"#1-准备脚本docker-install-sh\" class=\"headerlink\" title=\"1.  准备脚本docker-install.sh\"></a>1.  准备脚本docker-install.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>sudo yum remove docker*<br>echo &quot;安装必要软件包&quot;<br><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><br>echo &quot;Step 2: 添加软件源信息&quot;<br>sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>sudo sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo<br>echo &quot;更新并安装Docker-CE-20.10.17&quot;<br>sudo yum makecache fast<br>sudo yum -y install docker-ce-20.10.12-3.el7<br>echo &quot;设置开机启动&quot;<br>systemctl enable docker --now<br>echo &quot;配置镜像加速器&quot;<br>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br> &quot;registry-mirrors&quot;: [&quot;https://y96pbacg.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新系统时间</span><br>echo &quot;同步系统时间&quot;<br>yum install ntpdate -y<br>ntpdate cn.pool.ntp.org<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-执行脚本-1\"><a href=\"#2-执行脚本-1\" class=\"headerlink\" title=\"2. 执行脚本\"></a>2. 执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh docker-install.sh<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"4-安装k8s集群\"><a href=\"#4-安装k8s集群\" class=\"headerlink\" title=\"4. 安装k8s集群\"></a>4. 安装k8s集群</h1><h2 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1 . 安装docker\"></a>1 . 安装docker</h2><p>略</p>\n<h2 id=\"2-规划集群节点\"><a href=\"#2-规划集群节点\" class=\"headerlink\" title=\"2. 规划集群节点\"></a>2. 规划集群节点</h2><p>主节点master：172.20.10.2<br>从节点slave：172.20.10.4</p>\n<h2 id=\"3-准备脚本k8s-install-sh\"><a href=\"#3-准备脚本k8s-install-sh\" class=\"headerlink\" title=\"3. 准备脚本k8s-install.sh\"></a>3. 准备脚本k8s-install.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>echo &quot;--------------------step-1 初始化环境-------------------------&quot;<br>echo &quot;设置节点的hostname&quot;<br>node_hostname=$1<br>hostnamectl set-hostname $node_hostname<br><br>echo &quot;将 SELinux 设置为 permissive 模式（相当于将其禁用）&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将 SELinux 设置为 permissive 模式（相当于将其禁用）</span><br>sudo setenforce 0<br>sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config<br><br>echo &quot;关闭swap&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭swap</span><br>swapoff -a  <br>sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<br><br>echo &quot;允许 iptables 检查桥接流量&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">允许 iptables 检查桥接流量</span><br>cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf<br>br_netfilter<br>EOF<br><br>cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>EOF<br>sudo sysctl --system<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">放行端口</span><br>sudo tee ./turnon-port.sh &lt;&lt;-&#x27;EOF&#x27;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">打开端口</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>echo &quot;Open firewall port $1&quot;<br>firewall-cmd --zone=public --add-port=$1/tcp --permanent<br>firewall-cmd --reload<br>firewall-cmd --zone=public --list-ports<br>EOF<br>chmod 755 ./turnon-port.sh<br>sh ./turnon-port.sh 30000-32796<br>iptables -P INPUT ACCEPT<br>iptables -P FORWARD ACCEPT<br>iptables -P OUTPUT ACCEPT<br>iptables -F<br>systemctl restart docker<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新系统时间</span><br>echo &quot;同步系统时间&quot;<br>yum install ntpdate -y<br>ntpdate cn.pool.ntp.org<br><br>rm -rf /etc/containerd/config.toml<br>systemctl restart containerd<br><br>echo &quot;--------------------step-2 安装kubelet、kubeadm、kubectl-------------------------&quot;<br><br>cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64<br>enabled=1<br>gpgcheck=0<br>repo_gpgcheck=0<br>gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg<br>   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>exclude=kubelet kubeadm kubectl<br>EOF<br><br><br>sudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes<br>echo &quot;设置kubelet开机启动&quot;<br>sudo systemctl enable --now kubelet<br><br><br>echo &quot;--------------------step-3 使用kubeadmin引导集群， 下载各个机器需要的镜像-------------------------&quot;<br>sudo tee ./images.sh &lt;&lt;-&#x27;EOF&#x27;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>images=(<br>kube-apiserver:v1.20.9<br>kube-proxy:v1.20.9<br>kube-controller-manager:v1.20.9<br>kube-scheduler:v1.20.9<br>coredns:1.7.0<br>etcd:3.4.13-0<br>pause:3.2<br>)<br>for imageName in $&#123;images[@]&#125; ; do<br>docker pull registry.aliyuncs.com/google_containers/$imageName<br>done<br>EOF<br>   <br>chmod +x ./images.sh &amp;&amp; ./images.sh<br><br>echo &quot;所有机器添加master域名映射&quot;<br>echo &quot;172.20.10.2  cluster-endpoint&quot; &gt;&gt; /etc/hosts<br>echo &quot;172.20.10.2  master&quot; &gt;&gt; /etc/hosts<br>echo &quot;172.20.10.4  slave&quot; &gt;&gt; /etc/hosts<br><br><br>current_hostname=$(hostname)<br><br>if [ &quot;$&#123;current_hostname&#125;&quot;x = &quot;master&quot;x ];then<br>\techo &quot;主节点初始化&quot;<br>\tkubeadm init \\<br>\t--apiserver-advertise-address=172.20.10.2 \\<br>\t--control-plane-endpoint=cluster-endpoint \\<br>\t--image-repository registry.aliyuncs.com/google_containers \\<br>\t--kubernetes-version v1.20.9 \\<br>\t--service-cidr=10.96.0.0/16 \\<br>\t--pod-network-cidr=192.168.0.0/16<br>\t<br>\techo &quot;设置kube config&quot;<br>\tmkdir -p $HOME/.kube<br>\tsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>\tsudo chown $(id -u):$(id -g) $HOME/.kube/config<br>\t<br>\techo &quot;安装网络插件&quot;<br>\tcurl https://docs.projectcalico.org/v3.20/manifests/calico.yaml -O<br>\tkubectl apply -f calico.yaml<br>\t<br>\techo &quot;请在work节点执行kubeadmin join命令加入节点&quot;\t<br>fi<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-主节点执行脚本进行初始化集群\"><a href=\"#4-主节点执行脚本进行初始化集群\" class=\"headerlink\" title=\"4.  主节点执行脚本进行初始化集群\"></a>4.  主节点执行脚本进行初始化集群</h2><p><code>sh k8s-install.sh master</code></p>\n<h2 id=\"5-从节点执行脚本初始化集群，并加入主节点的集群-执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行\"><a href=\"#5-从节点执行脚本初始化集群，并加入主节点的集群-执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行\" class=\"headerlink\" title=\"5.  从节点执行脚本初始化集群，并加入主节点的集群(执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行)\"></a>5.  从节点执行脚本初始化集群，并加入主节点的集群(执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行)</h2><p><code>sh k8s-install.sh slave</code></p>\n<h1 id=\"5-安装nfs\"><a href=\"#5-安装nfs\" class=\"headerlink\" title=\"5. 安装nfs\"></a>5. 安装nfs</h1><h2 id=\"1-规划nfs节点\"><a href=\"#1-规划nfs节点\" class=\"headerlink\" title=\"1.  规划nfs节点\"></a>1.  规划nfs节点</h2><p>server节点: 172.20.10.2</p>\n<p>client节点: 172.20.10.4</p>\n<h2 id=\"2-准备安装脚本nfs-install-sh-可同时用于server端和client端\"><a href=\"#2-准备安装脚本nfs-install-sh-可同时用于server端和client端\" class=\"headerlink\" title=\"2.  准备安装脚本nfs-install.sh, 可同时用于server端和client端\"></a>2.  准备安装脚本nfs-install.sh, 可同时用于server端和client端</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">/bin/bash</span><br><br>echo &quot;安装依赖nfs-utils nfs-common：&quot;<br>yum install -y nfs-utils nfs-common<br><br>FILE_PATH=/nfs/data<br>SERVER_TYPE=$1<br><br>if [ &quot;$&#123;SERVER_TYPE&#125;&quot;x = &quot;server&quot;x ];then<br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">nfs服务节点</span><br>\techo &quot;$FILE_PATH *(insecure,rw,sync,no_root_squash)&quot; &gt; /etc/exports<br>\tmkdir -p /nfs/data<br>\tsystemctl enable rpcbind --now<br>\tsystemctl enable nfs-server --now<br>\tsystemctl start rpcbind<br>\tsystemctl start nfs-server<br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">配置生效</span><br>\texportfs -r<br>fi<br><br>if [ &quot;$&#123;SERVER_TYPE&#125;&quot;x = &quot;client&quot;x ];then<br>    SERVER_IP=$2<br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">nfs客户端节点</span><br>\tshowmount -e $SERVER_IP<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">执行以下命令挂载 nfs 服务器上的共享目录到本机路径 /root/nfsmount</span><br>\tmkdir -p $FILE_PATH<br>\tmount -t nfs $SERVER_IP:$FILE_PATH $FILE_PATH<br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">验证挂载生效</span><br><span class=\"hljs-meta prompt_\">\t# </span><span class=\"language-bash\">写入一个测试文件</span><br>\techo &quot;hello nfs server&quot; &gt; $FILE_PATH/example.txt<br>\techo &quot;please to the nfs server of $SERVER_IP read $FILE_PATH/example.txt&quot;<br>fi<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装server端，执行脚本\"><a href=\"#3-安装server端，执行脚本\" class=\"headerlink\" title=\"3. 安装server端，执行脚本\"></a>3. 安装server端，执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br>sh nfs-install.sh server<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-安装client端，指定server的ip地址，执行脚本\"><a href=\"#4-安装client端，指定server的ip地址，执行脚本\" class=\"headerlink\" title=\"4. 安装client端，指定server的ip地址，执行脚本\"></a>4. 安装client端，指定server的ip地址，执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br>sh nfs-install.sh client 172.20.10.2<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-安装java环境\"><a href=\"#1-安装java环境\" class=\"headerlink\" title=\"1. 安装java环境\"></a>1. 安装java环境</h1><h2 id=\"1-准备jdk安装包，environment-txt-环境变量配置文件\"><a href=\"#1-准备jdk安装包，environment-txt-环境变量配置文件\" class=\"headerlink\" title=\"1. 准备jdk安装包，environment.txt 环境变量配置文件\"></a>1. 准备jdk安装包，environment.txt 环境变量配置文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br><br>export JAVA_HOME=/usr/local/software/jdk1.8.0_231<br>export PATH=$PATH:$JAVA_HOME/bin<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export JRE_HOME=$JAVA_HOME/jre<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-准备脚本jdk-install-sh\"><a href=\"#2-准备脚本jdk-install-sh\" class=\"headerlink\" title=\"2. 准备脚本jdk-install.sh\"></a>2. 准备脚本jdk-install.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>echo &quot;解压jdk&quot;<br>tar -zxvf jdk-8u231-linux-x64.tar.gz<br><br>cat environment.txt &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br>java -version<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-执行脚本\"><a href=\"#3-执行脚本\" class=\"headerlink\" title=\"3. 执行脚本\"></a>3. 执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh jdk-install.sh<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"2-安装nginx\"><a href=\"#2-安装nginx\" class=\"headerlink\" title=\"2. 安装nginx\"></a>2. 安装nginx</h1><h2 id=\"1-准备脚本nginx-install-sh\"><a href=\"#1-准备脚本nginx-install-sh\" class=\"headerlink\" title=\"1. 准备脚本nginx-install.sh\"></a>1. 准备脚本nginx-install.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>software_dir=/usr/local/software<br>nginx_dir=$software_dir/nginx<br>mkdir -p $nginx_dir<br>chmod -R 755 $nginx_dir<br><br>cd $nginx_dir <br><br>echo &quot;安装依赖包&quot;<br>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel wget<br>wget http://nginx.org/download/nginx-1.23.2.tar.gz<br><br>tar -xvf nginx-1.23.2.tar.gz<br><br>cd $nginx_dir/nginx-1.23.2<br><br>echo &quot;安装SSL模块&quot;<br>./configure --prefix=$nginx_dir --with-http_stub_status_module --with-http_ssl_module<br><br>make<br>make install<br><br><br>echo &quot;创建启动脚本&quot;<br><br>tee $nginx_dir/startup.sh &lt;&lt;-&#x27;EOF&#x27;<br><br>software_dir=/usr/local/software<br>nginx_dir=$software_dir/nginx<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$</span><span class=\"language-bash\">nginx_dir/sbin/nginx -c <span class=\"hljs-variable\">$nginx_dir</span>/conf/nginx.conf</span><br><br>EOF<br><br>chmod 755 $nginx_dir/startup.sh<br><br>echo &quot;创建停止脚本&quot;<br>tee $nginx_dir/stop.sh &lt;&lt;-&#x27;EOF&#x27;<br><br>software_dir=/usr/local/software<br>nginx_dir=$software_dir/nginx<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$</span><span class=\"language-bash\">nginx_dir/sbin/nginx -s stop</span><br><br>EOF<br>   <br>chmod 755 $nginx_dir/stop.sh<br><br><br>echo &quot;创建重启脚本&quot;<br>tee $nginx_dir/restart.sh &lt;&lt;-&#x27;EOF&#x27;<br><br>sh stop.sh<br>sh startup.sh<br><br>EOF<br><br>chmod 755 $nginx_dir/restart.sh<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">在文件首行插入内容</span><br>sed -i &#x27;1i\\#!/bin/bash&#x27; $nginx_dir/*.sh<br><br>mv $software_dir/nginx-install.sh $nginx_dir<br><br>echo &quot;开放tcp/ip端口80-25535&quot;<br>firewall-cmd --zone=public --add-port=80-25535/tcp --permanent<br>firewall-cmd --reload<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-执行脚本\"><a href=\"#2-执行脚本\" class=\"headerlink\" title=\"2 . 执行脚本\"></a>2 . 执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh nginx-install.sh<br><br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"3-安装docker\"><a href=\"#3-安装docker\" class=\"headerlink\" title=\"3. 安装docker\"></a>3. 安装docker</h1><h2 id=\"1-准备脚本docker-install-sh\"><a href=\"#1-准备脚本docker-install-sh\" class=\"headerlink\" title=\"1.  准备脚本docker-install.sh\"></a>1.  准备脚本docker-install.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>sudo yum remove docker*<br>echo &quot;安装必要软件包&quot;<br><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><br>echo &quot;Step 2: 添加软件源信息&quot;<br>sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>sudo sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo<br>echo &quot;更新并安装Docker-CE-20.10.17&quot;<br>sudo yum makecache fast<br>sudo yum -y install docker-ce-20.10.12-3.el7<br>echo &quot;设置开机启动&quot;<br>systemctl enable docker --now<br>echo &quot;配置镜像加速器&quot;<br>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br> &quot;registry-mirrors&quot;: [&quot;https://y96pbacg.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新系统时间</span><br>echo &quot;同步系统时间&quot;<br>yum install ntpdate -y<br>ntpdate cn.pool.ntp.org<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-执行脚本-1\"><a href=\"#2-执行脚本-1\" class=\"headerlink\" title=\"2. 执行脚本\"></a>2. 执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh docker-install.sh<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"4-安装k8s集群\"><a href=\"#4-安装k8s集群\" class=\"headerlink\" title=\"4. 安装k8s集群\"></a>4. 安装k8s集群</h1><h2 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1 . 安装docker\"></a>1 . 安装docker</h2><p>略</p>\n<h2 id=\"2-规划集群节点\"><a href=\"#2-规划集群节点\" class=\"headerlink\" title=\"2. 规划集群节点\"></a>2. 规划集群节点</h2><p>主节点master：172.20.10.2<br>从节点slave：172.20.10.4</p>\n<h2 id=\"3-准备脚本k8s-install-sh\"><a href=\"#3-准备脚本k8s-install-sh\" class=\"headerlink\" title=\"3. 准备脚本k8s-install.sh\"></a>3. 准备脚本k8s-install.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>echo &quot;--------------------step-1 初始化环境-------------------------&quot;<br>echo &quot;设置节点的hostname&quot;<br>node_hostname=$1<br>hostnamectl set-hostname $node_hostname<br><br>echo &quot;将 SELinux 设置为 permissive 模式（相当于将其禁用）&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将 SELinux 设置为 permissive 模式（相当于将其禁用）</span><br>sudo setenforce 0<br>sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config<br><br>echo &quot;关闭swap&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭swap</span><br>swapoff -a  <br>sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<br><br>echo &quot;允许 iptables 检查桥接流量&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">允许 iptables 检查桥接流量</span><br>cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf<br>br_netfilter<br>EOF<br><br>cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>EOF<br>sudo sysctl --system<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">放行端口</span><br>sudo tee ./turnon-port.sh &lt;&lt;-&#x27;EOF&#x27;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">打开端口</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>echo &quot;Open firewall port $1&quot;<br>firewall-cmd --zone=public --add-port=$1/tcp --permanent<br>firewall-cmd --reload<br>firewall-cmd --zone=public --list-ports<br>EOF<br>chmod 755 ./turnon-port.sh<br>sh ./turnon-port.sh 30000-32796<br>iptables -P INPUT ACCEPT<br>iptables -P FORWARD ACCEPT<br>iptables -P OUTPUT ACCEPT<br>iptables -F<br>systemctl restart docker<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新系统时间</span><br>echo &quot;同步系统时间&quot;<br>yum install ntpdate -y<br>ntpdate cn.pool.ntp.org<br><br>rm -rf /etc/containerd/config.toml<br>systemctl restart containerd<br><br>echo &quot;--------------------step-2 安装kubelet、kubeadm、kubectl-------------------------&quot;<br><br>cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64<br>enabled=1<br>gpgcheck=0<br>repo_gpgcheck=0<br>gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg<br>   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>exclude=kubelet kubeadm kubectl<br>EOF<br><br><br>sudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes<br>echo &quot;设置kubelet开机启动&quot;<br>sudo systemctl enable --now kubelet<br><br><br>echo &quot;--------------------step-3 使用kubeadmin引导集群， 下载各个机器需要的镜像-------------------------&quot;<br>sudo tee ./images.sh &lt;&lt;-&#x27;EOF&#x27;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>images=(<br>kube-apiserver:v1.20.9<br>kube-proxy:v1.20.9<br>kube-controller-manager:v1.20.9<br>kube-scheduler:v1.20.9<br>coredns:1.7.0<br>etcd:3.4.13-0<br>pause:3.2<br>)<br>for imageName in $&#123;images[@]&#125; ; do<br>docker pull registry.aliyuncs.com/google_containers/$imageName<br>done<br>EOF<br>   <br>chmod +x ./images.sh &amp;&amp; ./images.sh<br><br>echo &quot;所有机器添加master域名映射&quot;<br>echo &quot;172.20.10.2  cluster-endpoint&quot; &gt;&gt; /etc/hosts<br>echo &quot;172.20.10.2  master&quot; &gt;&gt; /etc/hosts<br>echo &quot;172.20.10.4  slave&quot; &gt;&gt; /etc/hosts<br><br><br>current_hostname=$(hostname)<br><br>if [ &quot;$&#123;current_hostname&#125;&quot;x = &quot;master&quot;x ];then<br>\techo &quot;主节点初始化&quot;<br>\tkubeadm init \\<br>\t--apiserver-advertise-address=172.20.10.2 \\<br>\t--control-plane-endpoint=cluster-endpoint \\<br>\t--image-repository registry.aliyuncs.com/google_containers \\<br>\t--kubernetes-version v1.20.9 \\<br>\t--service-cidr=10.96.0.0/16 \\<br>\t--pod-network-cidr=192.168.0.0/16<br>\t<br>\techo &quot;设置kube config&quot;<br>\tmkdir -p $HOME/.kube<br>\tsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>\tsudo chown $(id -u):$(id -g) $HOME/.kube/config<br>\t<br>\techo &quot;安装网络插件&quot;<br>\tcurl https://docs.projectcalico.org/v3.20/manifests/calico.yaml -O<br>\tkubectl apply -f calico.yaml<br>\t<br>\techo &quot;请在work节点执行kubeadmin join命令加入节点&quot;\t<br>fi<br><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-主节点执行脚本进行初始化集群\"><a href=\"#4-主节点执行脚本进行初始化集群\" class=\"headerlink\" title=\"4.  主节点执行脚本进行初始化集群\"></a>4.  主节点执行脚本进行初始化集群</h2><p><code>sh k8s-install.sh master</code></p>\n<h2 id=\"5-从节点执行脚本初始化集群，并加入主节点的集群-执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行\"><a href=\"#5-从节点执行脚本初始化集群，并加入主节点的集群-执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行\" class=\"headerlink\" title=\"5.  从节点执行脚本初始化集群，并加入主节点的集群(执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行)\"></a>5.  从节点执行脚本初始化集群，并加入主节点的集群(执行主节点初始化结果，有个命令，拷贝过来，在从节点初始化后执行)</h2><p><code>sh k8s-install.sh slave</code></p>\n<h1 id=\"5-安装nfs\"><a href=\"#5-安装nfs\" class=\"headerlink\" title=\"5. 安装nfs\"></a>5. 安装nfs</h1><h2 id=\"1-规划nfs节点\"><a href=\"#1-规划nfs节点\" class=\"headerlink\" title=\"1.  规划nfs节点\"></a>1.  规划nfs节点</h2><p>server节点: 172.20.10.2</p>\n<p>client节点: 172.20.10.4</p>\n<h2 id=\"2-准备安装脚本nfs-install-sh-可同时用于server端和client端\"><a href=\"#2-准备安装脚本nfs-install-sh-可同时用于server端和client端\" class=\"headerlink\" title=\"2.  准备安装脚本nfs-install.sh, 可同时用于server端和client端\"></a>2.  准备安装脚本nfs-install.sh, 可同时用于server端和client端</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">/bin/bash</span><br><br>echo &quot;安装依赖nfs-utils nfs-common：&quot;<br>yum install -y nfs-utils nfs-common<br><br>FILE_PATH=/nfs/data<br>SERVER_TYPE=$1<br><br>if [ &quot;$&#123;SERVER_TYPE&#125;&quot;x = &quot;server&quot;x ];then<br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">nfs服务节点</span><br>\techo &quot;$FILE_PATH *(insecure,rw,sync,no_root_squash)&quot; &gt; /etc/exports<br>\tmkdir -p /nfs/data<br>\tsystemctl enable rpcbind --now<br>\tsystemctl enable nfs-server --now<br>\tsystemctl start rpcbind<br>\tsystemctl start nfs-server<br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">配置生效</span><br>\texportfs -r<br>fi<br><br>if [ &quot;$&#123;SERVER_TYPE&#125;&quot;x = &quot;client&quot;x ];then<br>    SERVER_IP=$2<br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">nfs客户端节点</span><br>\tshowmount -e $SERVER_IP<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">执行以下命令挂载 nfs 服务器上的共享目录到本机路径 /root/nfsmount</span><br>\tmkdir -p $FILE_PATH<br>\tmount -t nfs $SERVER_IP:$FILE_PATH $FILE_PATH<br><span class=\"hljs-meta prompt_\">\t#</span><span class=\"language-bash\">验证挂载生效</span><br><span class=\"hljs-meta prompt_\">\t# </span><span class=\"language-bash\">写入一个测试文件</span><br>\techo &quot;hello nfs server&quot; &gt; $FILE_PATH/example.txt<br>\techo &quot;please to the nfs server of $SERVER_IP read $FILE_PATH/example.txt&quot;<br>fi<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装server端，执行脚本\"><a href=\"#3-安装server端，执行脚本\" class=\"headerlink\" title=\"3. 安装server端，执行脚本\"></a>3. 安装server端，执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br>sh nfs-install.sh server<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-安装client端，指定server的ip地址，执行脚本\"><a href=\"#4-安装client端，指定server的ip地址，执行脚本\" class=\"headerlink\" title=\"4. 安装client端，指定server的ip地址，执行脚本\"></a>4. 安装client端，指定server的ip地址，执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><br>sh nfs-install.sh client 172.20.10.2<br><br></code></pre></td></tr></table></figure>"},{"title":"docker常用容器创建","date":"2023-12-09T07:09:56.000Z","_content":"\n# 1. MySQL\n\n\n## 1. 准备mysql配置文件my.cnf\n```shell\n[client]\ndefault-character-set = utf8mb4\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqld]\ncharacter-set-client-handshake = FALSE\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\ninit_connect='SET NAMES utf8mb4'\n\n#默认时区配置\ndefault-time_zone = '+8:00' \n\n#设置数据库支持分组\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n#表名不区分大小写\nlower_case_table_names=1\n\n```\n\n## 2. 准备容器创建脚本mysql-install-docker.sh\n\n```shell\n\n#!/bin/bash\n\ndocker_root=/usr/local/software/docker\nmysql_dir=$docker_root/mysql\nconfig_dir=$mysql_dir/config\ndata_dir=$mysql_dir/data\nlogs_dir=$mysql_dir/logs\n\necho \"创建数据目录\"\nmkdir -p $config_dir\nmkdir -p $data_dir\n\nmv ./my.cnf $config_dir\nchmod -R 755 $docker_root\n\necho \"开始拉取MySQL5.7镜像\"\ndocker pull mysql:5.7\n\necho \"创建容器\"\n\ndocker run -d -p 3306:3306 --privileged=true \\\n-v $config_dir/my.cnf:/etc/mysql/my.cnf \\\n-v $data_dir:/var/lib/mysql \\\n-v $logs_dir:/logs \\\n-e MYSQL_ROOT_PASSWORD=root \\\n--name mysql mysql:5.7\n\necho \"容器创建完成\"\ndocker ps | grep \"mysql\"\n\nmv ./mysql-install-docker.sh $mysql_dir\n\n```\n\n## 3. 执行脚本\n\n```shell\nsh mysql-install-docker.sh\n\n```\n\n","source":"_posts/docker/docker常用容器创建.md","raw":"---\ntitle: docker常用容器创建\ndate: 2023-12-09 15:09:56\ntags: docker\ncategories: docker\n---\n\n# 1. MySQL\n\n\n## 1. 准备mysql配置文件my.cnf\n```shell\n[client]\ndefault-character-set = utf8mb4\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqld]\ncharacter-set-client-handshake = FALSE\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\ninit_connect='SET NAMES utf8mb4'\n\n#默认时区配置\ndefault-time_zone = '+8:00' \n\n#设置数据库支持分组\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n#表名不区分大小写\nlower_case_table_names=1\n\n```\n\n## 2. 准备容器创建脚本mysql-install-docker.sh\n\n```shell\n\n#!/bin/bash\n\ndocker_root=/usr/local/software/docker\nmysql_dir=$docker_root/mysql\nconfig_dir=$mysql_dir/config\ndata_dir=$mysql_dir/data\nlogs_dir=$mysql_dir/logs\n\necho \"创建数据目录\"\nmkdir -p $config_dir\nmkdir -p $data_dir\n\nmv ./my.cnf $config_dir\nchmod -R 755 $docker_root\n\necho \"开始拉取MySQL5.7镜像\"\ndocker pull mysql:5.7\n\necho \"创建容器\"\n\ndocker run -d -p 3306:3306 --privileged=true \\\n-v $config_dir/my.cnf:/etc/mysql/my.cnf \\\n-v $data_dir:/var/lib/mysql \\\n-v $logs_dir:/logs \\\n-e MYSQL_ROOT_PASSWORD=root \\\n--name mysql mysql:5.7\n\necho \"容器创建完成\"\ndocker ps | grep \"mysql\"\n\nmv ./mysql-install-docker.sh $mysql_dir\n\n```\n\n## 3. 执行脚本\n\n```shell\nsh mysql-install-docker.sh\n\n```\n\n","slug":"docker/docker常用容器创建","published":1,"updated":"2023-12-09T08:15:09.417Z","_id":"clpxpue6o000owwwfdlnb4wd4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-MySQL\"><a href=\"#1-MySQL\" class=\"headerlink\" title=\"1. MySQL\"></a>1. MySQL</h1><h2 id=\"1-准备mysql配置文件my-cnf\"><a href=\"#1-准备mysql配置文件my-cnf\" class=\"headerlink\" title=\"1. 准备mysql配置文件my.cnf\"></a>1. 准备mysql配置文件my.cnf</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[client]<br>default-character-set = utf8mb4<br><br>[mysql]<br>default-character-set = utf8mb4<br><br>[mysqld]<br>character-set-client-handshake = FALSE<br>character-set-server = utf8mb4<br>collation-server = utf8mb4_unicode_ci<br>init_connect=&#x27;SET NAMES utf8mb4&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">默认时区配置</span><br>default-time_zone = &#x27;+8:00&#x27; <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置数据库支持分组</span><br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">表名不区分大小写</span><br>lower_case_table_names=1<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-准备容器创建脚本mysql-install-docker-sh\"><a href=\"#2-准备容器创建脚本mysql-install-docker-sh\" class=\"headerlink\" title=\"2. 准备容器创建脚本mysql-install-docker.sh\"></a>2. 准备容器创建脚本mysql-install-docker.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>docker_root=/usr/local/software/docker<br>mysql_dir=$docker_root/mysql<br>config_dir=$mysql_dir/config<br>data_dir=$mysql_dir/data<br>logs_dir=$mysql_dir/logs<br><br>echo &quot;创建数据目录&quot;<br>mkdir -p $config_dir<br>mkdir -p $data_dir<br><br>mv ./my.cnf $config_dir<br>chmod -R 755 $docker_root<br><br>echo &quot;开始拉取MySQL5.7镜像&quot;<br>docker pull mysql:5.7<br><br>echo &quot;创建容器&quot;<br><br>docker run -d -p 3306:3306 --privileged=true \\<br>-v $config_dir/my.cnf:/etc/mysql/my.cnf \\<br>-v $data_dir:/var/lib/mysql \\<br>-v $logs_dir:/logs \\<br>-e MYSQL_ROOT_PASSWORD=root \\<br>--name mysql mysql:5.7<br><br>echo &quot;容器创建完成&quot;<br>docker ps | grep &quot;mysql&quot;<br><br>mv ./mysql-install-docker.sh $mysql_dir<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-执行脚本\"><a href=\"#3-执行脚本\" class=\"headerlink\" title=\"3. 执行脚本\"></a>3. 执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh mysql-install-docker.sh<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-MySQL\"><a href=\"#1-MySQL\" class=\"headerlink\" title=\"1. MySQL\"></a>1. MySQL</h1><h2 id=\"1-准备mysql配置文件my-cnf\"><a href=\"#1-准备mysql配置文件my-cnf\" class=\"headerlink\" title=\"1. 准备mysql配置文件my.cnf\"></a>1. 准备mysql配置文件my.cnf</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[client]<br>default-character-set = utf8mb4<br><br>[mysql]<br>default-character-set = utf8mb4<br><br>[mysqld]<br>character-set-client-handshake = FALSE<br>character-set-server = utf8mb4<br>collation-server = utf8mb4_unicode_ci<br>init_connect=&#x27;SET NAMES utf8mb4&#x27;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">默认时区配置</span><br>default-time_zone = &#x27;+8:00&#x27; <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">设置数据库支持分组</span><br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">表名不区分大小写</span><br>lower_case_table_names=1<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-准备容器创建脚本mysql-install-docker-sh\"><a href=\"#2-准备容器创建脚本mysql-install-docker-sh\" class=\"headerlink\" title=\"2. 准备容器创建脚本mysql-install-docker.sh\"></a>2. 准备容器创建脚本mysql-install-docker.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>docker_root=/usr/local/software/docker<br>mysql_dir=$docker_root/mysql<br>config_dir=$mysql_dir/config<br>data_dir=$mysql_dir/data<br>logs_dir=$mysql_dir/logs<br><br>echo &quot;创建数据目录&quot;<br>mkdir -p $config_dir<br>mkdir -p $data_dir<br><br>mv ./my.cnf $config_dir<br>chmod -R 755 $docker_root<br><br>echo &quot;开始拉取MySQL5.7镜像&quot;<br>docker pull mysql:5.7<br><br>echo &quot;创建容器&quot;<br><br>docker run -d -p 3306:3306 --privileged=true \\<br>-v $config_dir/my.cnf:/etc/mysql/my.cnf \\<br>-v $data_dir:/var/lib/mysql \\<br>-v $logs_dir:/logs \\<br>-e MYSQL_ROOT_PASSWORD=root \\<br>--name mysql mysql:5.7<br><br>echo &quot;容器创建完成&quot;<br>docker ps | grep &quot;mysql&quot;<br><br>mv ./mysql-install-docker.sh $mysql_dir<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-执行脚本\"><a href=\"#3-执行脚本\" class=\"headerlink\" title=\"3. 执行脚本\"></a>3. 执行脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sh mysql-install-docker.sh<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"kubesphere环境安装","date":"2023-12-09T07:20:04.000Z","_content":"> 集群规划\nmaster: 172.20.10.2  root/root\nslave: 172.20.10.3   root/root\n\n\n# 1. kubesphere环境初始化\n\n## 1. 准备初始化脚本initial_kube.sh\n```shell\n#!/bin/bash\necho \"--------------------step-1 初始化环境-------------------------\"\necho \"设置节点的hostname\"\nnode_hostname=$1\nhostnamectl set-hostname $node_hostname\n\necho \"将 SELinux 设置为 permissive 模式（相当于将其禁用）\"\n# 将 SELinux 设置为 permissive 模式（相当于将其禁用）\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\necho \"关闭swap\"\n#关闭swap\nswapoff -a  \nsed -ri 's/.*swap.*/#&/' /etc/fstab\n\necho \"允许 iptables 检查桥接流量\"\n#允许 iptables 检查桥接流量\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\nbr_netfilter\nEOF\n\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsudo sysctl --system\n\n#放行端口\nsudo tee ./turnon-port.sh <<-'EOF'\n#打开端口\n#!/bin/bash\necho \"Open firewall port $1\"\nfirewall-cmd --zone=public --add-port=$1/tcp --permanent\nfirewall-cmd --reload\nfirewall-cmd --zone=public --list-ports\nEOF\nchmod 755 ./turnon-port.sh\nsh ./turnon-port.sh 80-32796\niptables -P INPUT ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT ACCEPT\niptables -F\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\nsystemctl restart docker\n#更新系统时间\necho \"同步系统时间\"\nyum install ntpdate -y\nntpdate ntp1.aliyun.com\n\n```\n\n## 2. 集群的每个节点执行脚本\n` sh initial_kube.sh master`\n` sh initial_kube.sh slave`\n\n\n# 2. kubesphere.yaml配置文件\n\n\n## 1. 方式1：直接使用以下配置文件\n\n```yaml\n\n\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  hosts:\n  - {name: master, address: 172.20.10.2, internalAddress: 172.20.10.2, user: root, password: \"root\"}\n  - {name: slave, address: 172.20.10.3, internalAddress: 172.20.10.3, user: root, password: \"root\"}\n  roleGroups:\n    etcd:\n    - master\n    control-plane: \n    - master\n    worker:\n    - slave\n  controlPlaneEndpoint:\n    ## Internal loadbalancer for apiservers \n    # internalLoadbalancer: haproxy\n\n    domain: lb.kubesphere.local\n    address: \"\"\n    port: 6443\n  kubernetes:\n    version: 1.22.10\n    clusterName: cluster.local\n    autoRenewCerts: true\n    containerManager: docker\n  etcd:\n    type: kubekey\n  network:\n    plugin: calico\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni\n    multusCNI:\n      enabled: false\n  registry:\n    privateRegistry: \"\"\n    namespaceOverride: \"\"\n    registryMirrors: []\n    insecureRegistries: []\n  addons: []\n\n\n\n---\napiVersion: installer.kubesphere.io/v1alpha1\nkind: ClusterConfiguration\nmetadata:\n  name: ks-installer\n  namespace: kubesphere-system\n  labels:\n    version: 3.3.0\nspec:\n  persistence:\n    storageClass: \"\"\n  authentication:\n    jwtSecret: \"\"\n  zone: \"\"\n  local_registry: \"\"\n  namespace_override: \"\"\n  # dev_tag: \"\"\n  etcd:\n    monitoring: false\n    endpointIps: localhost\n    port: 2379\n    tlsEnable: true\n  common:\n    core:\n      console:\n        enableMultiLogin: true\n        port: 30880\n        type: NodePort\n    # apiserver:\n    #  resources: {}\n    # controllerManager:\n    #  resources: {}\n    redis:\n      enabled: false\n      volumeSize: 2Gi\n    openldap:\n      enabled: false\n      volumeSize: 2Gi\n    minio:\n      volumeSize: 20Gi\n    monitoring:\n      # type: external\n      endpoint: http://prometheus-operated.kubesphere-monitoring-system.svc:9090\n      GPUMonitoring:\n        enabled: false\n    gpu:\n      kinds:\n      - resourceName: \"nvidia.com/gpu\"\n        resourceType: \"GPU\"\n        default: true\n    es:\n      # master:\n      #   volumeSize: 4Gi\n      #   replicas: 1\n      #   resources: {}\n      # data:\n      #   volumeSize: 20Gi\n      #   replicas: 1\n      #   resources: {}\n      logMaxAge: 7\n      elkPrefix: logstash\n      basicAuth:\n        enabled: false\n        username: \"\"\n        password: \"\"\n      externalElasticsearchHost: \"\"\n      externalElasticsearchPort: \"\"\n  alerting:\n    enabled: false\n    # thanosruler:\n    #   replicas: 1\n    #   resources: {}\n  auditing:\n    enabled: false\n    # operator:\n    #   resources: {}\n    # webhook:\n    #   resources: {}\n  devops:\n    enabled: false\n    # resources: {}\n    jenkinsMemoryLim: 2Gi\n    jenkinsMemoryReq: 1500Mi\n    jenkinsVolumeSize: 8Gi\n    jenkinsJavaOpts_Xms: 1200m\n    jenkinsJavaOpts_Xmx: 1600m\n    jenkinsJavaOpts_MaxRAM: 2g\n  events:\n    enabled: false\n    # operator:\n    #   resources: {}\n    # exporter:\n    #   resources: {}\n    # ruler:\n    #   enabled: true\n    #   replicas: 2\n    #   resources: {}\n  logging:\n    enabled: false\n    logsidecar:\n      enabled: true\n      replicas: 2\n      # resources: {}\n  metrics_server:\n    enabled: false\n  monitoring:\n    storageClass: \"\"\n    node_exporter:\n      port: 9100\n      # resources: {}\n    # kube_rbac_proxy:\n    #   resources: {}\n    # kube_state_metrics:\n    #   resources: {}\n    # prometheus:\n    #   replicas: 1\n    #   volumeSize: 20Gi\n    #   resources: {}\n    #   operator:\n    #     resources: {}\n    # alertmanager:\n    #   replicas: 1\n    #   resources: {}\n    # notification_manager:\n    #   resources: {}\n    #   operator:\n    #     resources: {}\n    #   proxy:\n    #     resources: {}\n    gpu:\n      nvidia_dcgm_exporter:\n        enabled: false\n        # resources: {}\n  multicluster:\n    clusterRole: none\n  network:\n    networkpolicy:\n      enabled: false\n    ippool:\n      type: none\n    topology:\n      type: none\n  openpitrix:\n    store:\n      enabled: false\n  servicemesh:\n    enabled: false\n    istio:\n      components:\n        ingressGateways:\n        - name: istio-ingressgateway\n          enabled: false\n        cni:\n          enabled: false\n  edgeruntime:\n    enabled: false\n    kubeedge:\n      enabled: false\n      cloudCore:\n        cloudHub:\n          advertiseAddress:\n            - \"\"\n        service:\n          cloudhubNodePort: \"30000\"\n          cloudhubQuicNodePort: \"30001\"\n          cloudhubHttpsNodePort: \"30002\"\n          cloudstreamNodePort: \"30003\"\n          tunnelNodePort: \"30004\"\n        # resources: {}\n        # hostNetWork: false\n      iptables-manager:\n        enabled: true\n        mode: \"external\"\n        # resources: {}\n      # edgeService:\n      #   resources: {}\n  terminal:\n    timeout: 600\n\n```\n\n## 2. 方式2：使用kubekey生成kubesphere.yaml\n\n### 1. 准备脚本install-kk-config.sh\n```shell\n#!/bin/bash\n\nexport KKZONE=cn\ncurl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.2 sh -\nchmod 777 ./kk\necho \"安装kubesphare运行时依赖...\"\nyum install -y openssl openssl-devel socat epel-release conntrack-tools \n\n./kk create config --with-kubernetes v1.20.4 --with-kubesphere v3.1.1\n\nmv config-sample.yaml kubesphere.yaml\n\n```\n### 2. 执行脚本install-kk-config.sh\n` sh install-kk-config.sh `\n\n\n> 注意： 生成kubesphere.yaml后，要编辑此文件，将host属性部分改为自己集群的节点ip\n\n# 3. 安装kubesphere集群\n\n## 1. 如果没有kubekey，先安装kubekey\n\n(1). 准备脚本install-kk.sh\n```shell\n#!/bin/bash\n\nexport KKZONE=cn\ncurl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.2 sh -\nchmod 777 ./kk\necho \"安装kubesphare运行时依赖...\"\nyum install -y openssl openssl-devel socat epel-release conntrack-tools \n```\n(2). 执行脚本install-kk.sh\n` sh install-kk.sh `\n\n\n## 2. 安装kubesphere\n\n./kk create cluster -f kubesphere.yaml\n\n## 3. 查看安装进度\n\n```shell\nkubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath='{.items[0].metadata.name}') -f\n\n```\n","source":"_posts/k8s/kubesphere环境安装.md","raw":"---\ntitle: kubesphere环境安装\ndate: 2023-12-09 15:20:04\ntags: k8s\ncategories: k8s\n---\n> 集群规划\nmaster: 172.20.10.2  root/root\nslave: 172.20.10.3   root/root\n\n\n# 1. kubesphere环境初始化\n\n## 1. 准备初始化脚本initial_kube.sh\n```shell\n#!/bin/bash\necho \"--------------------step-1 初始化环境-------------------------\"\necho \"设置节点的hostname\"\nnode_hostname=$1\nhostnamectl set-hostname $node_hostname\n\necho \"将 SELinux 设置为 permissive 模式（相当于将其禁用）\"\n# 将 SELinux 设置为 permissive 模式（相当于将其禁用）\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\necho \"关闭swap\"\n#关闭swap\nswapoff -a  \nsed -ri 's/.*swap.*/#&/' /etc/fstab\n\necho \"允许 iptables 检查桥接流量\"\n#允许 iptables 检查桥接流量\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\nbr_netfilter\nEOF\n\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsudo sysctl --system\n\n#放行端口\nsudo tee ./turnon-port.sh <<-'EOF'\n#打开端口\n#!/bin/bash\necho \"Open firewall port $1\"\nfirewall-cmd --zone=public --add-port=$1/tcp --permanent\nfirewall-cmd --reload\nfirewall-cmd --zone=public --list-ports\nEOF\nchmod 755 ./turnon-port.sh\nsh ./turnon-port.sh 80-32796\niptables -P INPUT ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT ACCEPT\niptables -F\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\nsystemctl restart docker\n#更新系统时间\necho \"同步系统时间\"\nyum install ntpdate -y\nntpdate ntp1.aliyun.com\n\n```\n\n## 2. 集群的每个节点执行脚本\n` sh initial_kube.sh master`\n` sh initial_kube.sh slave`\n\n\n# 2. kubesphere.yaml配置文件\n\n\n## 1. 方式1：直接使用以下配置文件\n\n```yaml\n\n\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  hosts:\n  - {name: master, address: 172.20.10.2, internalAddress: 172.20.10.2, user: root, password: \"root\"}\n  - {name: slave, address: 172.20.10.3, internalAddress: 172.20.10.3, user: root, password: \"root\"}\n  roleGroups:\n    etcd:\n    - master\n    control-plane: \n    - master\n    worker:\n    - slave\n  controlPlaneEndpoint:\n    ## Internal loadbalancer for apiservers \n    # internalLoadbalancer: haproxy\n\n    domain: lb.kubesphere.local\n    address: \"\"\n    port: 6443\n  kubernetes:\n    version: 1.22.10\n    clusterName: cluster.local\n    autoRenewCerts: true\n    containerManager: docker\n  etcd:\n    type: kubekey\n  network:\n    plugin: calico\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni\n    multusCNI:\n      enabled: false\n  registry:\n    privateRegistry: \"\"\n    namespaceOverride: \"\"\n    registryMirrors: []\n    insecureRegistries: []\n  addons: []\n\n\n\n---\napiVersion: installer.kubesphere.io/v1alpha1\nkind: ClusterConfiguration\nmetadata:\n  name: ks-installer\n  namespace: kubesphere-system\n  labels:\n    version: 3.3.0\nspec:\n  persistence:\n    storageClass: \"\"\n  authentication:\n    jwtSecret: \"\"\n  zone: \"\"\n  local_registry: \"\"\n  namespace_override: \"\"\n  # dev_tag: \"\"\n  etcd:\n    monitoring: false\n    endpointIps: localhost\n    port: 2379\n    tlsEnable: true\n  common:\n    core:\n      console:\n        enableMultiLogin: true\n        port: 30880\n        type: NodePort\n    # apiserver:\n    #  resources: {}\n    # controllerManager:\n    #  resources: {}\n    redis:\n      enabled: false\n      volumeSize: 2Gi\n    openldap:\n      enabled: false\n      volumeSize: 2Gi\n    minio:\n      volumeSize: 20Gi\n    monitoring:\n      # type: external\n      endpoint: http://prometheus-operated.kubesphere-monitoring-system.svc:9090\n      GPUMonitoring:\n        enabled: false\n    gpu:\n      kinds:\n      - resourceName: \"nvidia.com/gpu\"\n        resourceType: \"GPU\"\n        default: true\n    es:\n      # master:\n      #   volumeSize: 4Gi\n      #   replicas: 1\n      #   resources: {}\n      # data:\n      #   volumeSize: 20Gi\n      #   replicas: 1\n      #   resources: {}\n      logMaxAge: 7\n      elkPrefix: logstash\n      basicAuth:\n        enabled: false\n        username: \"\"\n        password: \"\"\n      externalElasticsearchHost: \"\"\n      externalElasticsearchPort: \"\"\n  alerting:\n    enabled: false\n    # thanosruler:\n    #   replicas: 1\n    #   resources: {}\n  auditing:\n    enabled: false\n    # operator:\n    #   resources: {}\n    # webhook:\n    #   resources: {}\n  devops:\n    enabled: false\n    # resources: {}\n    jenkinsMemoryLim: 2Gi\n    jenkinsMemoryReq: 1500Mi\n    jenkinsVolumeSize: 8Gi\n    jenkinsJavaOpts_Xms: 1200m\n    jenkinsJavaOpts_Xmx: 1600m\n    jenkinsJavaOpts_MaxRAM: 2g\n  events:\n    enabled: false\n    # operator:\n    #   resources: {}\n    # exporter:\n    #   resources: {}\n    # ruler:\n    #   enabled: true\n    #   replicas: 2\n    #   resources: {}\n  logging:\n    enabled: false\n    logsidecar:\n      enabled: true\n      replicas: 2\n      # resources: {}\n  metrics_server:\n    enabled: false\n  monitoring:\n    storageClass: \"\"\n    node_exporter:\n      port: 9100\n      # resources: {}\n    # kube_rbac_proxy:\n    #   resources: {}\n    # kube_state_metrics:\n    #   resources: {}\n    # prometheus:\n    #   replicas: 1\n    #   volumeSize: 20Gi\n    #   resources: {}\n    #   operator:\n    #     resources: {}\n    # alertmanager:\n    #   replicas: 1\n    #   resources: {}\n    # notification_manager:\n    #   resources: {}\n    #   operator:\n    #     resources: {}\n    #   proxy:\n    #     resources: {}\n    gpu:\n      nvidia_dcgm_exporter:\n        enabled: false\n        # resources: {}\n  multicluster:\n    clusterRole: none\n  network:\n    networkpolicy:\n      enabled: false\n    ippool:\n      type: none\n    topology:\n      type: none\n  openpitrix:\n    store:\n      enabled: false\n  servicemesh:\n    enabled: false\n    istio:\n      components:\n        ingressGateways:\n        - name: istio-ingressgateway\n          enabled: false\n        cni:\n          enabled: false\n  edgeruntime:\n    enabled: false\n    kubeedge:\n      enabled: false\n      cloudCore:\n        cloudHub:\n          advertiseAddress:\n            - \"\"\n        service:\n          cloudhubNodePort: \"30000\"\n          cloudhubQuicNodePort: \"30001\"\n          cloudhubHttpsNodePort: \"30002\"\n          cloudstreamNodePort: \"30003\"\n          tunnelNodePort: \"30004\"\n        # resources: {}\n        # hostNetWork: false\n      iptables-manager:\n        enabled: true\n        mode: \"external\"\n        # resources: {}\n      # edgeService:\n      #   resources: {}\n  terminal:\n    timeout: 600\n\n```\n\n## 2. 方式2：使用kubekey生成kubesphere.yaml\n\n### 1. 准备脚本install-kk-config.sh\n```shell\n#!/bin/bash\n\nexport KKZONE=cn\ncurl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.2 sh -\nchmod 777 ./kk\necho \"安装kubesphare运行时依赖...\"\nyum install -y openssl openssl-devel socat epel-release conntrack-tools \n\n./kk create config --with-kubernetes v1.20.4 --with-kubesphere v3.1.1\n\nmv config-sample.yaml kubesphere.yaml\n\n```\n### 2. 执行脚本install-kk-config.sh\n` sh install-kk-config.sh `\n\n\n> 注意： 生成kubesphere.yaml后，要编辑此文件，将host属性部分改为自己集群的节点ip\n\n# 3. 安装kubesphere集群\n\n## 1. 如果没有kubekey，先安装kubekey\n\n(1). 准备脚本install-kk.sh\n```shell\n#!/bin/bash\n\nexport KKZONE=cn\ncurl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.2 sh -\nchmod 777 ./kk\necho \"安装kubesphare运行时依赖...\"\nyum install -y openssl openssl-devel socat epel-release conntrack-tools \n```\n(2). 执行脚本install-kk.sh\n` sh install-kk.sh `\n\n\n## 2. 安装kubesphere\n\n./kk create cluster -f kubesphere.yaml\n\n## 3. 查看安装进度\n\n```shell\nkubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath='{.items[0].metadata.name}') -f\n\n```\n","slug":"k8s/kubesphere环境安装","published":1,"updated":"2023-12-09T08:09:05.518Z","_id":"clpxq7f3v000pwwwfbh490ozv","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>集群规划<br>master: 172.20.10.2  root&#x2F;root<br>slave: 172.20.10.3   root&#x2F;root</p>\n</blockquote>\n<h1 id=\"1-kubesphere环境初始化\"><a href=\"#1-kubesphere环境初始化\" class=\"headerlink\" title=\"1. kubesphere环境初始化\"></a>1. kubesphere环境初始化</h1><h2 id=\"1-准备初始化脚本initial-kube-sh\"><a href=\"#1-准备初始化脚本initial-kube-sh\" class=\"headerlink\" title=\"1. 准备初始化脚本initial_kube.sh\"></a>1. 准备初始化脚本initial_kube.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>echo &quot;--------------------step-1 初始化环境-------------------------&quot;<br>echo &quot;设置节点的hostname&quot;<br>node_hostname=$1<br>hostnamectl set-hostname $node_hostname<br><br>echo &quot;将 SELinux 设置为 permissive 模式（相当于将其禁用）&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将 SELinux 设置为 permissive 模式（相当于将其禁用）</span><br>sudo setenforce 0<br>sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config<br><br>echo &quot;关闭swap&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭swap</span><br>swapoff -a  <br>sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<br><br>echo &quot;允许 iptables 检查桥接流量&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">允许 iptables 检查桥接流量</span><br>cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf<br>br_netfilter<br>EOF<br><br>cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>EOF<br>sudo sysctl --system<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">放行端口</span><br>sudo tee ./turnon-port.sh &lt;&lt;-&#x27;EOF&#x27;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">打开端口</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>echo &quot;Open firewall port $1&quot;<br>firewall-cmd --zone=public --add-port=$1/tcp --permanent<br>firewall-cmd --reload<br>firewall-cmd --zone=public --list-ports<br>EOF<br>chmod 755 ./turnon-port.sh<br>sh ./turnon-port.sh 80-32796<br>iptables -P INPUT ACCEPT<br>iptables -P FORWARD ACCEPT<br>iptables -P OUTPUT ACCEPT<br>iptables -F<br>systemctl stop firewalld.service<br>systemctl disable firewalld.service<br>systemctl restart docker<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新系统时间</span><br>echo &quot;同步系统时间&quot;<br>yum install ntpdate -y<br>ntpdate ntp1.aliyun.com<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-集群的每个节点执行脚本\"><a href=\"#2-集群的每个节点执行脚本\" class=\"headerlink\" title=\"2. 集群的每个节点执行脚本\"></a>2. 集群的每个节点执行脚本</h2><p><code> sh initial_kube.sh master</code><br><code> sh initial_kube.sh slave</code></p>\n<h1 id=\"2-kubesphere-yaml配置文件\"><a href=\"#2-kubesphere-yaml配置文件\" class=\"headerlink\" title=\"2. kubesphere.yaml配置文件\"></a>2. kubesphere.yaml配置文件</h1><h2 id=\"1-方式1：直接使用以下配置文件\"><a href=\"#1-方式1：直接使用以下配置文件\" class=\"headerlink\" title=\"1. 方式1：直接使用以下配置文件\"></a>1. 方式1：直接使用以下配置文件</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><br><br><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubekey.kubesphere.io/v1alpha2</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Cluster</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sample</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">hosts:</span><br>  <span class=\"hljs-bullet\">-</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">master</span>, <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">172.20</span><span class=\"hljs-number\">.10</span><span class=\"hljs-number\">.2</span>, <span class=\"hljs-attr\">internalAddress:</span> <span class=\"hljs-number\">172.20</span><span class=\"hljs-number\">.10</span><span class=\"hljs-number\">.2</span>, <span class=\"hljs-attr\">user:</span> <span class=\"hljs-string\">root</span>, <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;root&quot;</span>&#125;<br>  <span class=\"hljs-bullet\">-</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">slave</span>, <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">172.20</span><span class=\"hljs-number\">.10</span><span class=\"hljs-number\">.3</span>, <span class=\"hljs-attr\">internalAddress:</span> <span class=\"hljs-number\">172.20</span><span class=\"hljs-number\">.10</span><span class=\"hljs-number\">.3</span>, <span class=\"hljs-attr\">user:</span> <span class=\"hljs-string\">root</span>, <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;root&quot;</span>&#125;<br>  <span class=\"hljs-attr\">roleGroups:</span><br>    <span class=\"hljs-attr\">etcd:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span><br>    <span class=\"hljs-attr\">control-plane:</span> <br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span><br>    <span class=\"hljs-attr\">worker:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">slave</span><br>  <span class=\"hljs-attr\">controlPlaneEndpoint:</span><br>    <span class=\"hljs-comment\">## Internal loadbalancer for apiservers </span><br>    <span class=\"hljs-comment\"># internalLoadbalancer: haproxy</span><br><br>    <span class=\"hljs-attr\">domain:</span> <span class=\"hljs-string\">lb.kubesphere.local</span><br>    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6443</span><br>  <span class=\"hljs-attr\">kubernetes:</span><br>    <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.22</span><span class=\"hljs-number\">.10</span><br>    <span class=\"hljs-attr\">clusterName:</span> <span class=\"hljs-string\">cluster.local</span><br>    <span class=\"hljs-attr\">autoRenewCerts:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">containerManager:</span> <span class=\"hljs-string\">docker</span><br>  <span class=\"hljs-attr\">etcd:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">kubekey</span><br>  <span class=\"hljs-attr\">network:</span><br>    <span class=\"hljs-attr\">plugin:</span> <span class=\"hljs-string\">calico</span><br>    <span class=\"hljs-attr\">kubePodsCIDR:</span> <span class=\"hljs-number\">10.233</span><span class=\"hljs-number\">.64</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/18</span><br>    <span class=\"hljs-attr\">kubeServiceCIDR:</span> <span class=\"hljs-number\">10.233</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/18</span><br>    <span class=\"hljs-comment\">## multus support. https://github.com/k8snetworkplumbingwg/multus-cni</span><br>    <span class=\"hljs-attr\">multusCNI:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">registry:</span><br>    <span class=\"hljs-attr\">privateRegistry:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">namespaceOverride:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">registryMirrors:</span> []<br>    <span class=\"hljs-attr\">insecureRegistries:</span> []<br>  <span class=\"hljs-attr\">addons:</span> []<br><br><br><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">installer.kubesphere.io/v1alpha1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterConfiguration</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">ks-installer</span><br>  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kubesphere-system</span><br>  <span class=\"hljs-attr\">labels:</span><br>    <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">3.3</span><span class=\"hljs-number\">.0</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">persistence:</span><br>    <span class=\"hljs-attr\">storageClass:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">authentication:</span><br>    <span class=\"hljs-attr\">jwtSecret:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">zone:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">local_registry:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">namespace_override:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-comment\"># dev_tag: &quot;&quot;</span><br>  <span class=\"hljs-attr\">etcd:</span><br>    <span class=\"hljs-attr\">monitoring:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">endpointIps:</span> <span class=\"hljs-string\">localhost</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">2379</span><br>    <span class=\"hljs-attr\">tlsEnable:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">common:</span><br>    <span class=\"hljs-attr\">core:</span><br>      <span class=\"hljs-attr\">console:</span><br>        <span class=\"hljs-attr\">enableMultiLogin:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">30880</span><br>        <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span><br>    <span class=\"hljs-comment\"># apiserver:</span><br>    <span class=\"hljs-comment\">#  resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># controllerManager:</span><br>    <span class=\"hljs-comment\">#  resources: &#123;&#125;</span><br>    <span class=\"hljs-attr\">redis:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>      <span class=\"hljs-attr\">volumeSize:</span> <span class=\"hljs-string\">2Gi</span><br>    <span class=\"hljs-attr\">openldap:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>      <span class=\"hljs-attr\">volumeSize:</span> <span class=\"hljs-string\">2Gi</span><br>    <span class=\"hljs-attr\">minio:</span><br>      <span class=\"hljs-attr\">volumeSize:</span> <span class=\"hljs-string\">20Gi</span><br>    <span class=\"hljs-attr\">monitoring:</span><br>      <span class=\"hljs-comment\"># type: external</span><br>      <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://prometheus-operated.kubesphere-monitoring-system.svc:9090</span><br>      <span class=\"hljs-attr\">GPUMonitoring:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">gpu:</span><br>      <span class=\"hljs-attr\">kinds:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">resourceName:</span> <span class=\"hljs-string\">&quot;nvidia.com/gpu&quot;</span><br>        <span class=\"hljs-attr\">resourceType:</span> <span class=\"hljs-string\">&quot;GPU&quot;</span><br>        <span class=\"hljs-attr\">default:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">es:</span><br>      <span class=\"hljs-comment\"># master:</span><br>      <span class=\"hljs-comment\">#   volumeSize: 4Gi</span><br>      <span class=\"hljs-comment\">#   replicas: 1</span><br>      <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>      <span class=\"hljs-comment\"># data:</span><br>      <span class=\"hljs-comment\">#   volumeSize: 20Gi</span><br>      <span class=\"hljs-comment\">#   replicas: 1</span><br>      <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>      <span class=\"hljs-attr\">logMaxAge:</span> <span class=\"hljs-number\">7</span><br>      <span class=\"hljs-attr\">elkPrefix:</span> <span class=\"hljs-string\">logstash</span><br>      <span class=\"hljs-attr\">basicAuth:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>        <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>      <span class=\"hljs-attr\">externalElasticsearchHost:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>      <span class=\"hljs-attr\">externalElasticsearchPort:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">alerting:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\"># thanosruler:</span><br>    <span class=\"hljs-comment\">#   replicas: 1</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">auditing:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\"># operator:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># webhook:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">devops:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>    <span class=\"hljs-attr\">jenkinsMemoryLim:</span> <span class=\"hljs-string\">2Gi</span><br>    <span class=\"hljs-attr\">jenkinsMemoryReq:</span> <span class=\"hljs-string\">1500Mi</span><br>    <span class=\"hljs-attr\">jenkinsVolumeSize:</span> <span class=\"hljs-string\">8Gi</span><br>    <span class=\"hljs-attr\">jenkinsJavaOpts_Xms:</span> <span class=\"hljs-string\">1200m</span><br>    <span class=\"hljs-attr\">jenkinsJavaOpts_Xmx:</span> <span class=\"hljs-string\">1600m</span><br>    <span class=\"hljs-attr\">jenkinsJavaOpts_MaxRAM:</span> <span class=\"hljs-string\">2g</span><br>  <span class=\"hljs-attr\">events:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\"># operator:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># exporter:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># ruler:</span><br>    <span class=\"hljs-comment\">#   enabled: true</span><br>    <span class=\"hljs-comment\">#   replicas: 2</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">logging:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">logsidecar:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">2</span><br>      <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">metrics_server:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">monitoring:</span><br>    <span class=\"hljs-attr\">storageClass:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">node_exporter:</span><br>      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9100</span><br>      <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># kube_rbac_proxy:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># kube_state_metrics:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># prometheus:</span><br>    <span class=\"hljs-comment\">#   replicas: 1</span><br>    <span class=\"hljs-comment\">#   volumeSize: 20Gi</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\">#   operator:</span><br>    <span class=\"hljs-comment\">#     resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># alertmanager:</span><br>    <span class=\"hljs-comment\">#   replicas: 1</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># notification_manager:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\">#   operator:</span><br>    <span class=\"hljs-comment\">#     resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\">#   proxy:</span><br>    <span class=\"hljs-comment\">#     resources: &#123;&#125;</span><br>    <span class=\"hljs-attr\">gpu:</span><br>      <span class=\"hljs-attr\">nvidia_dcgm_exporter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">multicluster:</span><br>    <span class=\"hljs-attr\">clusterRole:</span> <span class=\"hljs-string\">none</span><br>  <span class=\"hljs-attr\">network:</span><br>    <span class=\"hljs-attr\">networkpolicy:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">ippool:</span><br>      <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">none</span><br>    <span class=\"hljs-attr\">topology:</span><br>      <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">none</span><br>  <span class=\"hljs-attr\">openpitrix:</span><br>    <span class=\"hljs-attr\">store:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">servicemesh:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">istio:</span><br>      <span class=\"hljs-attr\">components:</span><br>        <span class=\"hljs-attr\">ingressGateways:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">istio-ingressgateway</span><br>          <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">cni:</span><br>          <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">edgeruntime:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">kubeedge:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>      <span class=\"hljs-attr\">cloudCore:</span><br>        <span class=\"hljs-attr\">cloudHub:</span><br>          <span class=\"hljs-attr\">advertiseAddress:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;&quot;</span><br>        <span class=\"hljs-attr\">service:</span><br>          <span class=\"hljs-attr\">cloudhubNodePort:</span> <span class=\"hljs-string\">&quot;30000&quot;</span><br>          <span class=\"hljs-attr\">cloudhubQuicNodePort:</span> <span class=\"hljs-string\">&quot;30001&quot;</span><br>          <span class=\"hljs-attr\">cloudhubHttpsNodePort:</span> <span class=\"hljs-string\">&quot;30002&quot;</span><br>          <span class=\"hljs-attr\">cloudstreamNodePort:</span> <span class=\"hljs-string\">&quot;30003&quot;</span><br>          <span class=\"hljs-attr\">tunnelNodePort:</span> <span class=\"hljs-string\">&quot;30004&quot;</span><br>        <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>        <span class=\"hljs-comment\"># hostNetWork: false</span><br>      <span class=\"hljs-attr\">iptables-manager:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;external&quot;</span><br>        <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>      <span class=\"hljs-comment\"># edgeService:</span><br>      <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">terminal:</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">600</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-方式2：使用kubekey生成kubesphere-yaml\"><a href=\"#2-方式2：使用kubekey生成kubesphere-yaml\" class=\"headerlink\" title=\"2. 方式2：使用kubekey生成kubesphere.yaml\"></a>2. 方式2：使用kubekey生成kubesphere.yaml</h2><h3 id=\"1-准备脚本install-kk-config-sh\"><a href=\"#1-准备脚本install-kk-config-sh\" class=\"headerlink\" title=\"1. 准备脚本install-kk-config.sh\"></a>1. 准备脚本install-kk-config.sh</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>export KKZONE=cn<br>curl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.2 sh -<br>chmod 777 ./kk<br>echo &quot;安装kubesphare运行时依赖...&quot;<br>yum install -y openssl openssl-devel socat epel-release conntrack-tools <br><br>./kk create config --with-kubernetes v1.20.4 --with-kubesphere v3.1.1<br><br>mv config-sample.yaml kubesphere.yaml<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-执行脚本install-kk-config-sh\"><a href=\"#2-执行脚本install-kk-config-sh\" class=\"headerlink\" title=\"2. 执行脚本install-kk-config.sh\"></a>2. 执行脚本install-kk-config.sh</h3><p><code>sh install-kk-config.sh</code></p>\n<blockquote>\n<p>注意： 生成kubesphere.yaml后，要编辑此文件，将host属性部分改为自己集群的节点ip</p>\n</blockquote>\n<h1 id=\"3-安装kubesphere集群\"><a href=\"#3-安装kubesphere集群\" class=\"headerlink\" title=\"3. 安装kubesphere集群\"></a>3. 安装kubesphere集群</h1><h2 id=\"1-如果没有kubekey，先安装kubekey\"><a href=\"#1-如果没有kubekey，先安装kubekey\" class=\"headerlink\" title=\"1. 如果没有kubekey，先安装kubekey\"></a>1. 如果没有kubekey，先安装kubekey</h2><p>(1). 准备脚本install-kk.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>export KKZONE=cn<br>curl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.2 sh -<br>chmod 777 ./kk<br>echo &quot;安装kubesphare运行时依赖...&quot;<br>yum install -y openssl openssl-devel socat epel-release conntrack-tools <br></code></pre></td></tr></table></figure>\n<p>(2). 执行脚本install-kk.sh<br><code>sh install-kk.sh</code></p>\n<h2 id=\"2-安装kubesphere\"><a href=\"#2-安装kubesphere\" class=\"headerlink\" title=\"2. 安装kubesphere\"></a>2. 安装kubesphere</h2><p>.&#x2F;kk create cluster -f kubesphere.yaml</p>\n<h2 id=\"3-查看安装进度\"><a href=\"#3-查看安装进度\" class=\"headerlink\" title=\"3. 查看安装进度\"></a>3. 查看安装进度</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=&#x27;&#123;.items[0].metadata.name&#125;&#x27;) -f<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>集群规划<br>master: 172.20.10.2  root&#x2F;root<br>slave: 172.20.10.3   root&#x2F;root</p>\n</blockquote>\n<h1 id=\"1-kubesphere环境初始化\"><a href=\"#1-kubesphere环境初始化\" class=\"headerlink\" title=\"1. kubesphere环境初始化\"></a>1. kubesphere环境初始化</h1><h2 id=\"1-准备初始化脚本initial-kube-sh\"><a href=\"#1-准备初始化脚本initial-kube-sh\" class=\"headerlink\" title=\"1. 准备初始化脚本initial_kube.sh\"></a>1. 准备初始化脚本initial_kube.sh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>echo &quot;--------------------step-1 初始化环境-------------------------&quot;<br>echo &quot;设置节点的hostname&quot;<br>node_hostname=$1<br>hostnamectl set-hostname $node_hostname<br><br>echo &quot;将 SELinux 设置为 permissive 模式（相当于将其禁用）&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">将 SELinux 设置为 permissive 模式（相当于将其禁用）</span><br>sudo setenforce 0<br>sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config<br><br>echo &quot;关闭swap&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">关闭swap</span><br>swapoff -a  <br>sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<br><br>echo &quot;允许 iptables 检查桥接流量&quot;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">允许 iptables 检查桥接流量</span><br>cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf<br>br_netfilter<br>EOF<br><br>cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>EOF<br>sudo sysctl --system<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">放行端口</span><br>sudo tee ./turnon-port.sh &lt;&lt;-&#x27;EOF&#x27;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">打开端口</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>echo &quot;Open firewall port $1&quot;<br>firewall-cmd --zone=public --add-port=$1/tcp --permanent<br>firewall-cmd --reload<br>firewall-cmd --zone=public --list-ports<br>EOF<br>chmod 755 ./turnon-port.sh<br>sh ./turnon-port.sh 80-32796<br>iptables -P INPUT ACCEPT<br>iptables -P FORWARD ACCEPT<br>iptables -P OUTPUT ACCEPT<br>iptables -F<br>systemctl stop firewalld.service<br>systemctl disable firewalld.service<br>systemctl restart docker<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">更新系统时间</span><br>echo &quot;同步系统时间&quot;<br>yum install ntpdate -y<br>ntpdate ntp1.aliyun.com<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-集群的每个节点执行脚本\"><a href=\"#2-集群的每个节点执行脚本\" class=\"headerlink\" title=\"2. 集群的每个节点执行脚本\"></a>2. 集群的每个节点执行脚本</h2><p><code> sh initial_kube.sh master</code><br><code> sh initial_kube.sh slave</code></p>\n<h1 id=\"2-kubesphere-yaml配置文件\"><a href=\"#2-kubesphere-yaml配置文件\" class=\"headerlink\" title=\"2. kubesphere.yaml配置文件\"></a>2. kubesphere.yaml配置文件</h1><h2 id=\"1-方式1：直接使用以下配置文件\"><a href=\"#1-方式1：直接使用以下配置文件\" class=\"headerlink\" title=\"1. 方式1：直接使用以下配置文件\"></a>1. 方式1：直接使用以下配置文件</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><br><br><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">kubekey.kubesphere.io/v1alpha2</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Cluster</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sample</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">hosts:</span><br>  <span class=\"hljs-bullet\">-</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">master</span>, <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">172.20</span><span class=\"hljs-number\">.10</span><span class=\"hljs-number\">.2</span>, <span class=\"hljs-attr\">internalAddress:</span> <span class=\"hljs-number\">172.20</span><span class=\"hljs-number\">.10</span><span class=\"hljs-number\">.2</span>, <span class=\"hljs-attr\">user:</span> <span class=\"hljs-string\">root</span>, <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;root&quot;</span>&#125;<br>  <span class=\"hljs-bullet\">-</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">slave</span>, <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">172.20</span><span class=\"hljs-number\">.10</span><span class=\"hljs-number\">.3</span>, <span class=\"hljs-attr\">internalAddress:</span> <span class=\"hljs-number\">172.20</span><span class=\"hljs-number\">.10</span><span class=\"hljs-number\">.3</span>, <span class=\"hljs-attr\">user:</span> <span class=\"hljs-string\">root</span>, <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;root&quot;</span>&#125;<br>  <span class=\"hljs-attr\">roleGroups:</span><br>    <span class=\"hljs-attr\">etcd:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span><br>    <span class=\"hljs-attr\">control-plane:</span> <br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span><br>    <span class=\"hljs-attr\">worker:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">slave</span><br>  <span class=\"hljs-attr\">controlPlaneEndpoint:</span><br>    <span class=\"hljs-comment\">## Internal loadbalancer for apiservers </span><br>    <span class=\"hljs-comment\"># internalLoadbalancer: haproxy</span><br><br>    <span class=\"hljs-attr\">domain:</span> <span class=\"hljs-string\">lb.kubesphere.local</span><br>    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6443</span><br>  <span class=\"hljs-attr\">kubernetes:</span><br>    <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.22</span><span class=\"hljs-number\">.10</span><br>    <span class=\"hljs-attr\">clusterName:</span> <span class=\"hljs-string\">cluster.local</span><br>    <span class=\"hljs-attr\">autoRenewCerts:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">containerManager:</span> <span class=\"hljs-string\">docker</span><br>  <span class=\"hljs-attr\">etcd:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">kubekey</span><br>  <span class=\"hljs-attr\">network:</span><br>    <span class=\"hljs-attr\">plugin:</span> <span class=\"hljs-string\">calico</span><br>    <span class=\"hljs-attr\">kubePodsCIDR:</span> <span class=\"hljs-number\">10.233</span><span class=\"hljs-number\">.64</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/18</span><br>    <span class=\"hljs-attr\">kubeServiceCIDR:</span> <span class=\"hljs-number\">10.233</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">/18</span><br>    <span class=\"hljs-comment\">## multus support. https://github.com/k8snetworkplumbingwg/multus-cni</span><br>    <span class=\"hljs-attr\">multusCNI:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">registry:</span><br>    <span class=\"hljs-attr\">privateRegistry:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">namespaceOverride:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">registryMirrors:</span> []<br>    <span class=\"hljs-attr\">insecureRegistries:</span> []<br>  <span class=\"hljs-attr\">addons:</span> []<br><br><br><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">installer.kubesphere.io/v1alpha1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterConfiguration</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">ks-installer</span><br>  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kubesphere-system</span><br>  <span class=\"hljs-attr\">labels:</span><br>    <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">3.3</span><span class=\"hljs-number\">.0</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">persistence:</span><br>    <span class=\"hljs-attr\">storageClass:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">authentication:</span><br>    <span class=\"hljs-attr\">jwtSecret:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">zone:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">local_registry:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">namespace_override:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-comment\"># dev_tag: &quot;&quot;</span><br>  <span class=\"hljs-attr\">etcd:</span><br>    <span class=\"hljs-attr\">monitoring:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">endpointIps:</span> <span class=\"hljs-string\">localhost</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">2379</span><br>    <span class=\"hljs-attr\">tlsEnable:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">common:</span><br>    <span class=\"hljs-attr\">core:</span><br>      <span class=\"hljs-attr\">console:</span><br>        <span class=\"hljs-attr\">enableMultiLogin:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">30880</span><br>        <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span><br>    <span class=\"hljs-comment\"># apiserver:</span><br>    <span class=\"hljs-comment\">#  resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># controllerManager:</span><br>    <span class=\"hljs-comment\">#  resources: &#123;&#125;</span><br>    <span class=\"hljs-attr\">redis:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>      <span class=\"hljs-attr\">volumeSize:</span> <span class=\"hljs-string\">2Gi</span><br>    <span class=\"hljs-attr\">openldap:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>      <span class=\"hljs-attr\">volumeSize:</span> <span class=\"hljs-string\">2Gi</span><br>    <span class=\"hljs-attr\">minio:</span><br>      <span class=\"hljs-attr\">volumeSize:</span> <span class=\"hljs-string\">20Gi</span><br>    <span class=\"hljs-attr\">monitoring:</span><br>      <span class=\"hljs-comment\"># type: external</span><br>      <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://prometheus-operated.kubesphere-monitoring-system.svc:9090</span><br>      <span class=\"hljs-attr\">GPUMonitoring:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">gpu:</span><br>      <span class=\"hljs-attr\">kinds:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">resourceName:</span> <span class=\"hljs-string\">&quot;nvidia.com/gpu&quot;</span><br>        <span class=\"hljs-attr\">resourceType:</span> <span class=\"hljs-string\">&quot;GPU&quot;</span><br>        <span class=\"hljs-attr\">default:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">es:</span><br>      <span class=\"hljs-comment\"># master:</span><br>      <span class=\"hljs-comment\">#   volumeSize: 4Gi</span><br>      <span class=\"hljs-comment\">#   replicas: 1</span><br>      <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>      <span class=\"hljs-comment\"># data:</span><br>      <span class=\"hljs-comment\">#   volumeSize: 20Gi</span><br>      <span class=\"hljs-comment\">#   replicas: 1</span><br>      <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>      <span class=\"hljs-attr\">logMaxAge:</span> <span class=\"hljs-number\">7</span><br>      <span class=\"hljs-attr\">elkPrefix:</span> <span class=\"hljs-string\">logstash</span><br>      <span class=\"hljs-attr\">basicAuth:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>        <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>      <span class=\"hljs-attr\">externalElasticsearchHost:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>      <span class=\"hljs-attr\">externalElasticsearchPort:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>  <span class=\"hljs-attr\">alerting:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\"># thanosruler:</span><br>    <span class=\"hljs-comment\">#   replicas: 1</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">auditing:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\"># operator:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># webhook:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">devops:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>    <span class=\"hljs-attr\">jenkinsMemoryLim:</span> <span class=\"hljs-string\">2Gi</span><br>    <span class=\"hljs-attr\">jenkinsMemoryReq:</span> <span class=\"hljs-string\">1500Mi</span><br>    <span class=\"hljs-attr\">jenkinsVolumeSize:</span> <span class=\"hljs-string\">8Gi</span><br>    <span class=\"hljs-attr\">jenkinsJavaOpts_Xms:</span> <span class=\"hljs-string\">1200m</span><br>    <span class=\"hljs-attr\">jenkinsJavaOpts_Xmx:</span> <span class=\"hljs-string\">1600m</span><br>    <span class=\"hljs-attr\">jenkinsJavaOpts_MaxRAM:</span> <span class=\"hljs-string\">2g</span><br>  <span class=\"hljs-attr\">events:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-comment\"># operator:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># exporter:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># ruler:</span><br>    <span class=\"hljs-comment\">#   enabled: true</span><br>    <span class=\"hljs-comment\">#   replicas: 2</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">logging:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">logsidecar:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">2</span><br>      <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">metrics_server:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">monitoring:</span><br>    <span class=\"hljs-attr\">storageClass:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>    <span class=\"hljs-attr\">node_exporter:</span><br>      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9100</span><br>      <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># kube_rbac_proxy:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># kube_state_metrics:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># prometheus:</span><br>    <span class=\"hljs-comment\">#   replicas: 1</span><br>    <span class=\"hljs-comment\">#   volumeSize: 20Gi</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\">#   operator:</span><br>    <span class=\"hljs-comment\">#     resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># alertmanager:</span><br>    <span class=\"hljs-comment\">#   replicas: 1</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\"># notification_manager:</span><br>    <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\">#   operator:</span><br>    <span class=\"hljs-comment\">#     resources: &#123;&#125;</span><br>    <span class=\"hljs-comment\">#   proxy:</span><br>    <span class=\"hljs-comment\">#     resources: &#123;&#125;</span><br>    <span class=\"hljs-attr\">gpu:</span><br>      <span class=\"hljs-attr\">nvidia_dcgm_exporter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">multicluster:</span><br>    <span class=\"hljs-attr\">clusterRole:</span> <span class=\"hljs-string\">none</span><br>  <span class=\"hljs-attr\">network:</span><br>    <span class=\"hljs-attr\">networkpolicy:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">ippool:</span><br>      <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">none</span><br>    <span class=\"hljs-attr\">topology:</span><br>      <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">none</span><br>  <span class=\"hljs-attr\">openpitrix:</span><br>    <span class=\"hljs-attr\">store:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">servicemesh:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">istio:</span><br>      <span class=\"hljs-attr\">components:</span><br>        <span class=\"hljs-attr\">ingressGateways:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">istio-ingressgateway</span><br>          <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">cni:</span><br>          <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">edgeruntime:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">kubeedge:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br>      <span class=\"hljs-attr\">cloudCore:</span><br>        <span class=\"hljs-attr\">cloudHub:</span><br>          <span class=\"hljs-attr\">advertiseAddress:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;&quot;</span><br>        <span class=\"hljs-attr\">service:</span><br>          <span class=\"hljs-attr\">cloudhubNodePort:</span> <span class=\"hljs-string\">&quot;30000&quot;</span><br>          <span class=\"hljs-attr\">cloudhubQuicNodePort:</span> <span class=\"hljs-string\">&quot;30001&quot;</span><br>          <span class=\"hljs-attr\">cloudhubHttpsNodePort:</span> <span class=\"hljs-string\">&quot;30002&quot;</span><br>          <span class=\"hljs-attr\">cloudstreamNodePort:</span> <span class=\"hljs-string\">&quot;30003&quot;</span><br>          <span class=\"hljs-attr\">tunnelNodePort:</span> <span class=\"hljs-string\">&quot;30004&quot;</span><br>        <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>        <span class=\"hljs-comment\"># hostNetWork: false</span><br>      <span class=\"hljs-attr\">iptables-manager:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;external&quot;</span><br>        <span class=\"hljs-comment\"># resources: &#123;&#125;</span><br>      <span class=\"hljs-comment\"># edgeService:</span><br>      <span class=\"hljs-comment\">#   resources: &#123;&#125;</span><br>  <span class=\"hljs-attr\">terminal:</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">600</span><br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-方式2：使用kubekey生成kubesphere-yaml\"><a href=\"#2-方式2：使用kubekey生成kubesphere-yaml\" class=\"headerlink\" title=\"2. 方式2：使用kubekey生成kubesphere.yaml\"></a>2. 方式2：使用kubekey生成kubesphere.yaml</h2><h3 id=\"1-准备脚本install-kk-config-sh\"><a href=\"#1-准备脚本install-kk-config-sh\" class=\"headerlink\" title=\"1. 准备脚本install-kk-config.sh\"></a>1. 准备脚本install-kk-config.sh</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>export KKZONE=cn<br>curl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.2 sh -<br>chmod 777 ./kk<br>echo &quot;安装kubesphare运行时依赖...&quot;<br>yum install -y openssl openssl-devel socat epel-release conntrack-tools <br><br>./kk create config --with-kubernetes v1.20.4 --with-kubesphere v3.1.1<br><br>mv config-sample.yaml kubesphere.yaml<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-执行脚本install-kk-config-sh\"><a href=\"#2-执行脚本install-kk-config-sh\" class=\"headerlink\" title=\"2. 执行脚本install-kk-config.sh\"></a>2. 执行脚本install-kk-config.sh</h3><p><code>sh install-kk-config.sh</code></p>\n<blockquote>\n<p>注意： 生成kubesphere.yaml后，要编辑此文件，将host属性部分改为自己集群的节点ip</p>\n</blockquote>\n<h1 id=\"3-安装kubesphere集群\"><a href=\"#3-安装kubesphere集群\" class=\"headerlink\" title=\"3. 安装kubesphere集群\"></a>3. 安装kubesphere集群</h1><h2 id=\"1-如果没有kubekey，先安装kubekey\"><a href=\"#1-如果没有kubekey，先安装kubekey\" class=\"headerlink\" title=\"1. 如果没有kubekey，先安装kubekey\"></a>1. 如果没有kubekey，先安装kubekey</h2><p>(1). 准备脚本install-kk.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br><br>export KKZONE=cn<br>curl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.2 sh -<br>chmod 777 ./kk<br>echo &quot;安装kubesphare运行时依赖...&quot;<br>yum install -y openssl openssl-devel socat epel-release conntrack-tools <br></code></pre></td></tr></table></figure>\n<p>(2). 执行脚本install-kk.sh<br><code>sh install-kk.sh</code></p>\n<h2 id=\"2-安装kubesphere\"><a href=\"#2-安装kubesphere\" class=\"headerlink\" title=\"2. 安装kubesphere\"></a>2. 安装kubesphere</h2><p>.&#x2F;kk create cluster -f kubesphere.yaml</p>\n<h2 id=\"3-查看安装进度\"><a href=\"#3-查看安装进度\" class=\"headerlink\" title=\"3. 查看安装进度\"></a>3. 查看安装进度</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=&#x27;&#123;.items[0].metadata.name&#125;&#x27;) -f<br><br></code></pre></td></tr></table></figure>\n"},{"title":"java面试宝典","date":"2023-12-09T09:46:46.000Z","_content":"\n\n\n<embed src=\"/books/Java面试宝典.pdf\" type=\"application/pdf\" width=\"100%\" height=\"900\">","source":"_posts/books/java面试宝典.md","raw":"---\ntitle: java面试宝典\ndate: 2023-12-09 17:46:46\ntags: 书单\ncategories: 书单\n---\n\n\n\n<embed src=\"/books/Java面试宝典.pdf\" type=\"application/pdf\" width=\"100%\" height=\"900\">","slug":"books/java面试宝典","published":1,"updated":"2023-12-09T10:29:08.478Z","_id":"clpxvg38y0002q0wf0txe17un","comments":1,"layout":"post","photos":[],"link":"","content":"<embed src=\"/books/Java面试宝典.pdf\" type=\"application/pdf\" width=\"100%\" height=\"900\">","site":{"data":{}},"excerpt":"","more":"<embed src=\"/books/Java面试宝典.pdf\" type=\"application/pdf\" width=\"100%\" height=\"900\">"},{"title":"2020最新Java面试题及答案","date":"2023-12-09T10:27:32.000Z","_content":"\n<embed src=\"/books/2020最新Java面试题及答案.pdf\" type=\"application/pdf\" width=\"100%\" height=\"900\">","source":"_posts/books/2020最新Java面试题及答案.md","raw":"---\ntitle: 2020最新Java面试题及答案\ndate: 2023-12-09 18:27:32\ntags: 书单\ncategories: 书单\n---\n\n<embed src=\"/books/2020最新Java面试题及答案.pdf\" type=\"application/pdf\" width=\"100%\" height=\"900\">","slug":"books/2020最新Java面试题及答案","published":1,"updated":"2023-12-09T10:28:57.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpxwysee00009wwf9ithepqc","content":"<embed src=\"/books/2020最新Java面试题及答案.pdf\" type=\"application/pdf\" width=\"100%\" height=\"900\">","site":{"data":{}},"excerpt":"","more":"<embed src=\"/books/2020最新Java面试题及答案.pdf\" type=\"application/pdf\" width=\"100%\" height=\"900\">"},{"title":"Bean的生命周期","date":"2023-12-09T11:17:43.000Z","_content":"\n# Bean的生命周期\n\n## 前言\n\n在我们没有使用Spring框架之前，创建对象一般都是使用new关键字进行创建，当然除了new关键字外，还有\n\n- 运用反射手段，使用Class类的newInstance方法 或者 Constructor类中的newInstance方法\n- 使用clone方法\n- 使用反序列化（ObjectInputStream）\n\n一旦对象不再被使用的时候，将有可能被JVM垃圾回收器进行回收。\n\n但是在Spring通过IOC容器进行管理之后，Bean 的生命周期就变得更加复杂了，下图展示了Bean的构造过程\n\n![image-20200614155732584](images/spring/image-20200614155732584.png)\n\n## Bean的生命周期\n\n我们对上图的每个步骤进行文字说明\n\n- Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化\n- Bean实例化后对将Bean的引入和值注入到Bean的属性中\n- 如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法\n- 如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入\n- 如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。\n- 如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。\n- 如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用\n- 如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。\n- 此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。\n- 如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。\n\n## 接口方法的分类\n\n Bean的完整生命周期经历了各种方法的调用，这些方法可以分类一下三类\n\n### Bean自身的方法：\n\n这个包括了Bean本身调用的方法和通过配置文件中<bean>的init-method和destroy-method指定的方法\n\n### Bean级生命周期的方法\n\n这个包括了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这些接口的方法\n\n### 容器级生命周期的方法\n\n这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。\n\n### 工程后处理器接口方法\n\n这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器　　接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。\n\n## DEMO举例\n\n我们用一个简单的Spring Bean来演示一下Spring Bean的生命周期。\n\n首先是一个简单的Spring Bean，调用Bean自身的方法和Bean级生命周期接口方法，为了方便演示，它实现了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这4个接口，同时有2个方法，对应配置文件中<bean>的init-method和destroy-method。如下：\n\n```\npackage springBeanTest;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.BeanNameAware;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\n\npublic class Person implements BeanFactoryAware, BeanNameAware,\n        InitializingBean, DisposableBean {\n\n    private String name;\n    private String address;\n    private int phone;\n\n    private BeanFactory beanFactory;\n    private String beanName;\n\n    public Person() {\n        System.out.println(\"【构造器】调用Person的构造器实例化\");\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        System.out.println(\"【注入属性】注入属性name\");\n        this.name = name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        System.out.println(\"【注入属性】注入属性address\");\n        this.address = address;\n    }\n\n    public int getPhone() {\n        return phone;\n    }\n\n    public void setPhone(int phone) {\n        System.out.println(\"【注入属性】注入属性phone\");\n        this.phone = phone;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person [address=\" + address + \", name=\" + name + \", phone=\"\n                + phone + \"]\";\n    }\n\n    // 这是BeanFactoryAware接口方法\n    @Override\n    public void setBeanFactory(BeanFactory arg0) throws BeansException {\n        System.out\n                .println(\"【BeanFactoryAware接口】调用BeanFactoryAware.setBeanFactory()\");\n        this.beanFactory = arg0;\n    }\n\n    // 这是BeanNameAware接口方法\n    @Override\n    public void setBeanName(String arg0) {\n        System.out.println(\"【BeanNameAware接口】调用BeanNameAware.setBeanName()\");\n        this.beanName = arg0;\n    }\n\n    // 这是InitializingBean接口方法\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        System.out\n                .println(\"【InitializingBean接口】调用InitializingBean.afterPropertiesSet()\");\n    }\n\n    // 这是DiposibleBean接口方法\n    @Override\n    public void destroy() throws Exception {\n        System.out.println(\"【DiposibleBean接口】调用DiposibleBean.destory()\");\n    }\n\n    // 通过<bean>的init-method属性指定的初始化方法\n    public void myInit() {\n        System.out.println(\"【init-method】调用<bean>的init-method属性指定的初始化方法\");\n    }\n\n    // 通过<bean>的destroy-method属性指定的初始化方法\n    public void myDestory() {\n        System.out.println(\"【destroy-method】调用<bean>的destroy-method属性指定的初始化方法\");\n    }\n}\n```\n\n接下来是演示BeanPostProcessor接口的方法，如下：\n\n```\npackage springBeanTest;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\npublic class MyBeanPostProcessor implements BeanPostProcessor {\n\n    public MyBeanPostProcessor() {\n        super();\n        System.out.println(\"这是BeanPostProcessor实现类构造器！！\");\n        // TODO Auto-generated constructor stub\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object arg0, String arg1)\n            throws BeansException {\n        System.out\n        .println(\"BeanPostProcessor接口方法postProcessAfterInitialization对属性进行更改！\");\n        return arg0;\n    }\n\n    @Override\n    public Object postProcessBeforeInitialization(Object arg0, String arg1)\n            throws BeansException {\n        System.out\n        .println(\"BeanPostProcessor接口方法postProcessBeforeInitialization对属性进行更改！\");\n        return arg0;\n    }\n}\n```\n\n如上，BeanPostProcessor接口包括2个方法postProcessAfterInitialization和postProcessBeforeInitialization，这两个方法的第一个参数都是要处理的Bean对象，第二个参数都是Bean的name。返回值也都是要处理的Bean对象。这里要注意。\n\nInstantiationAwareBeanPostProcessor 接口本质是BeanPostProcessor的子接口，一般我们继承Spring为其提供的适配器类InstantiationAwareBeanPostProcessor Adapter来使用它，如下：\n\n```\npackage springBeanTest;\n\nimport java.beans.PropertyDescriptor;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.PropertyValues;\nimport org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;\n\npublic class MyInstantiationAwareBeanPostProcessor extends\n        InstantiationAwareBeanPostProcessorAdapter {\n\n    public MyInstantiationAwareBeanPostProcessor() {\n        super();\n        System.out\n                .println(\"这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！\");\n    }\n\n    // 接口方法、实例化Bean之前调用\n    @Override\n    public Object postProcessBeforeInstantiation(Class beanClass,\n            String beanName) throws BeansException {\n        System.out\n                .println(\"InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法\");\n        return null;\n    }\n\n    // 接口方法、实例化Bean之后调用\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName)\n            throws BeansException {\n        System.out\n                .println(\"InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法\");\n        return bean;\n    }\n\n    // 接口方法、设置某个属性时调用\n    @Override\n    public PropertyValues postProcessPropertyValues(PropertyValues pvs,\n            PropertyDescriptor[] pds, Object bean, String beanName)\n            throws BeansException {\n        System.out\n                .println(\"InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法\");\n        return pvs;\n    }\n}\n```\n\n\n\n## 参考\n\nhttps://www.cnblogs.com/zrtqsk/p/3735273.html\n\nhttps://www.cnblogs.com/javazhiyin/p/10905294.html","source":"_posts/spring/Bean的生命周期.md","raw":"---\ntitle: Bean的生命周期\ndate: 2023-12-09 19:17:43\ntags: \n  - spring\n  - java\ncategories: java\n---\n\n# Bean的生命周期\n\n## 前言\n\n在我们没有使用Spring框架之前，创建对象一般都是使用new关键字进行创建，当然除了new关键字外，还有\n\n- 运用反射手段，使用Class类的newInstance方法 或者 Constructor类中的newInstance方法\n- 使用clone方法\n- 使用反序列化（ObjectInputStream）\n\n一旦对象不再被使用的时候，将有可能被JVM垃圾回收器进行回收。\n\n但是在Spring通过IOC容器进行管理之后，Bean 的生命周期就变得更加复杂了，下图展示了Bean的构造过程\n\n![image-20200614155732584](images/spring/image-20200614155732584.png)\n\n## Bean的生命周期\n\n我们对上图的每个步骤进行文字说明\n\n- Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化\n- Bean实例化后对将Bean的引入和值注入到Bean的属性中\n- 如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法\n- 如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入\n- 如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。\n- 如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。\n- 如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用\n- 如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。\n- 此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。\n- 如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。\n\n## 接口方法的分类\n\n Bean的完整生命周期经历了各种方法的调用，这些方法可以分类一下三类\n\n### Bean自身的方法：\n\n这个包括了Bean本身调用的方法和通过配置文件中<bean>的init-method和destroy-method指定的方法\n\n### Bean级生命周期的方法\n\n这个包括了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这些接口的方法\n\n### 容器级生命周期的方法\n\n这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。\n\n### 工程后处理器接口方法\n\n这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器　　接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。\n\n## DEMO举例\n\n我们用一个简单的Spring Bean来演示一下Spring Bean的生命周期。\n\n首先是一个简单的Spring Bean，调用Bean自身的方法和Bean级生命周期接口方法，为了方便演示，它实现了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这4个接口，同时有2个方法，对应配置文件中<bean>的init-method和destroy-method。如下：\n\n```\npackage springBeanTest;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.BeanNameAware;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\n\npublic class Person implements BeanFactoryAware, BeanNameAware,\n        InitializingBean, DisposableBean {\n\n    private String name;\n    private String address;\n    private int phone;\n\n    private BeanFactory beanFactory;\n    private String beanName;\n\n    public Person() {\n        System.out.println(\"【构造器】调用Person的构造器实例化\");\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        System.out.println(\"【注入属性】注入属性name\");\n        this.name = name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        System.out.println(\"【注入属性】注入属性address\");\n        this.address = address;\n    }\n\n    public int getPhone() {\n        return phone;\n    }\n\n    public void setPhone(int phone) {\n        System.out.println(\"【注入属性】注入属性phone\");\n        this.phone = phone;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person [address=\" + address + \", name=\" + name + \", phone=\"\n                + phone + \"]\";\n    }\n\n    // 这是BeanFactoryAware接口方法\n    @Override\n    public void setBeanFactory(BeanFactory arg0) throws BeansException {\n        System.out\n                .println(\"【BeanFactoryAware接口】调用BeanFactoryAware.setBeanFactory()\");\n        this.beanFactory = arg0;\n    }\n\n    // 这是BeanNameAware接口方法\n    @Override\n    public void setBeanName(String arg0) {\n        System.out.println(\"【BeanNameAware接口】调用BeanNameAware.setBeanName()\");\n        this.beanName = arg0;\n    }\n\n    // 这是InitializingBean接口方法\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        System.out\n                .println(\"【InitializingBean接口】调用InitializingBean.afterPropertiesSet()\");\n    }\n\n    // 这是DiposibleBean接口方法\n    @Override\n    public void destroy() throws Exception {\n        System.out.println(\"【DiposibleBean接口】调用DiposibleBean.destory()\");\n    }\n\n    // 通过<bean>的init-method属性指定的初始化方法\n    public void myInit() {\n        System.out.println(\"【init-method】调用<bean>的init-method属性指定的初始化方法\");\n    }\n\n    // 通过<bean>的destroy-method属性指定的初始化方法\n    public void myDestory() {\n        System.out.println(\"【destroy-method】调用<bean>的destroy-method属性指定的初始化方法\");\n    }\n}\n```\n\n接下来是演示BeanPostProcessor接口的方法，如下：\n\n```\npackage springBeanTest;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\npublic class MyBeanPostProcessor implements BeanPostProcessor {\n\n    public MyBeanPostProcessor() {\n        super();\n        System.out.println(\"这是BeanPostProcessor实现类构造器！！\");\n        // TODO Auto-generated constructor stub\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object arg0, String arg1)\n            throws BeansException {\n        System.out\n        .println(\"BeanPostProcessor接口方法postProcessAfterInitialization对属性进行更改！\");\n        return arg0;\n    }\n\n    @Override\n    public Object postProcessBeforeInitialization(Object arg0, String arg1)\n            throws BeansException {\n        System.out\n        .println(\"BeanPostProcessor接口方法postProcessBeforeInitialization对属性进行更改！\");\n        return arg0;\n    }\n}\n```\n\n如上，BeanPostProcessor接口包括2个方法postProcessAfterInitialization和postProcessBeforeInitialization，这两个方法的第一个参数都是要处理的Bean对象，第二个参数都是Bean的name。返回值也都是要处理的Bean对象。这里要注意。\n\nInstantiationAwareBeanPostProcessor 接口本质是BeanPostProcessor的子接口，一般我们继承Spring为其提供的适配器类InstantiationAwareBeanPostProcessor Adapter来使用它，如下：\n\n```\npackage springBeanTest;\n\nimport java.beans.PropertyDescriptor;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.PropertyValues;\nimport org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;\n\npublic class MyInstantiationAwareBeanPostProcessor extends\n        InstantiationAwareBeanPostProcessorAdapter {\n\n    public MyInstantiationAwareBeanPostProcessor() {\n        super();\n        System.out\n                .println(\"这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！\");\n    }\n\n    // 接口方法、实例化Bean之前调用\n    @Override\n    public Object postProcessBeforeInstantiation(Class beanClass,\n            String beanName) throws BeansException {\n        System.out\n                .println(\"InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法\");\n        return null;\n    }\n\n    // 接口方法、实例化Bean之后调用\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName)\n            throws BeansException {\n        System.out\n                .println(\"InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法\");\n        return bean;\n    }\n\n    // 接口方法、设置某个属性时调用\n    @Override\n    public PropertyValues postProcessPropertyValues(PropertyValues pvs,\n            PropertyDescriptor[] pds, Object bean, String beanName)\n            throws BeansException {\n        System.out\n                .println(\"InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法\");\n        return pvs;\n    }\n}\n```\n\n\n\n## 参考\n\nhttps://www.cnblogs.com/zrtqsk/p/3735273.html\n\nhttps://www.cnblogs.com/javazhiyin/p/10905294.html","slug":"spring/Bean的生命周期","published":1,"updated":"2023-12-09T11:22:15.040Z","_id":"clpxyp1n10000lcwf34yu5ptm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Bean的生命周期\"><a href=\"#Bean的生命周期\" class=\"headerlink\" title=\"Bean的生命周期\"></a>Bean的生命周期</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在我们没有使用Spring框架之前，创建对象一般都是使用new关键字进行创建，当然除了new关键字外，还有</p>\n<ul>\n<li>运用反射手段，使用Class类的newInstance方法 或者 Constructor类中的newInstance方法</li>\n<li>使用clone方法</li>\n<li>使用反序列化（ObjectInputStream）</li>\n</ul>\n<p>一旦对象不再被使用的时候，将有可能被JVM垃圾回收器进行回收。</p>\n<p>但是在Spring通过IOC容器进行管理之后，Bean 的生命周期就变得更加复杂了，下图展示了Bean的构造过程</p>\n<p><img src=\"/images/spring/image-20200614155732584.png\" alt=\"image-20200614155732584\"></p>\n<h2 id=\"Bean的生命周期-1\"><a href=\"#Bean的生命周期-1\" class=\"headerlink\" title=\"Bean的生命周期\"></a>Bean的生命周期</h2><p>我们对上图的每个步骤进行文字说明</p>\n<ul>\n<li>Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化</li>\n<li>Bean实例化后对将Bean的引入和值注入到Bean的属性中</li>\n<li>如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法</li>\n<li>如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入</li>\n<li>如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。</li>\n<li>如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。</li>\n<li>如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用</li>\n<li>如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。</li>\n<li>此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。</li>\n<li>如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。</li>\n</ul>\n<h2 id=\"接口方法的分类\"><a href=\"#接口方法的分类\" class=\"headerlink\" title=\"接口方法的分类\"></a>接口方法的分类</h2><p> Bean的完整生命周期经历了各种方法的调用，这些方法可以分类一下三类</p>\n<h3 id=\"Bean自身的方法：\"><a href=\"#Bean自身的方法：\" class=\"headerlink\" title=\"Bean自身的方法：\"></a>Bean自身的方法：</h3><p>这个包括了Bean本身调用的方法和通过配置文件中<bean>的init-method和destroy-method指定的方法</p>\n<h3 id=\"Bean级生命周期的方法\"><a href=\"#Bean级生命周期的方法\" class=\"headerlink\" title=\"Bean级生命周期的方法\"></a>Bean级生命周期的方法</h3><p>这个包括了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这些接口的方法</p>\n<h3 id=\"容器级生命周期的方法\"><a href=\"#容器级生命周期的方法\" class=\"headerlink\" title=\"容器级生命周期的方法\"></a>容器级生命周期的方法</h3><p>这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。</p>\n<h3 id=\"工程后处理器接口方法\"><a href=\"#工程后处理器接口方法\" class=\"headerlink\" title=\"工程后处理器接口方法\"></a>工程后处理器接口方法</h3><p>这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器　　接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。</p>\n<h2 id=\"DEMO举例\"><a href=\"#DEMO举例\" class=\"headerlink\" title=\"DEMO举例\"></a>DEMO举例</h2><p>我们用一个简单的Spring Bean来演示一下Spring Bean的生命周期。</p>\n<p>首先是一个简单的Spring Bean，调用Bean自身的方法和Bean级生命周期接口方法，为了方便演示，它实现了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这4个接口，同时有2个方法，对应配置文件中<bean>的init-method和destroy-method。如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">package springBeanTest;<br><br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">BeansException</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">BeanFactory</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">BeanFactoryAware</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">BeanNameAware</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">DisposableBean</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">InitializingBean</span>;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BeanFactoryAware</span>, <span class=\"hljs-title class_\">BeanNameAware</span>,<br>        <span class=\"hljs-title class_\">InitializingBean</span>, <span class=\"hljs-title class_\">DisposableBean</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> address;<br>    <span class=\"hljs-keyword\">private</span> int phone;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">BeanFactory</span> beanFactory;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> beanName;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">Person</span>() &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【构造器】调用Person的构造器实例化&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setName</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> name</span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【注入属性】注入属性name&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getAddress</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> address;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setAddress</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> address</span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【注入属性】注入属性address&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">address</span> = address;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> int <span class=\"hljs-title function_\">getPhone</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> phone;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setPhone</span>(<span class=\"hljs-params\">int phone</span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【注入属性】注入属性phone&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">phone</span> = phone;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person [address=&quot;</span> + address + <span class=\"hljs-string\">&quot;, name=&quot;</span> + name + <span class=\"hljs-string\">&quot;, phone=&quot;</span><br>                + phone + <span class=\"hljs-string\">&quot;]&quot;</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 这是BeanFactoryAware接口方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setBeanFactory</span>(<span class=\"hljs-title class_\">BeanFactory</span> arg0) throws <span class=\"hljs-title class_\">BeansException</span> &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span><br>                .<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【BeanFactoryAware接口】调用BeanFactoryAware.setBeanFactory()&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">beanFactory</span> = arg0;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 这是BeanNameAware接口方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setBeanName</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> arg0</span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【BeanNameAware接口】调用BeanNameAware.setBeanName()&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">beanName</span> = arg0;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 这是InitializingBean接口方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">afterPropertiesSet</span>() throws <span class=\"hljs-title class_\">Exception</span> &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span><br>                .<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【InitializingBean接口】调用InitializingBean.afterPropertiesSet()&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 这是DiposibleBean接口方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">destroy</span>() throws <span class=\"hljs-title class_\">Exception</span> &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【DiposibleBean接口】调用DiposibleBean.destory()&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 通过&lt;bean&gt;的init-method属性指定的初始化方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">myInit</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【init-method】调用&lt;bean&gt;的init-method属性指定的初始化方法&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 通过&lt;bean&gt;的destroy-method属性指定的初始化方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">myDestory</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【destroy-method】调用&lt;bean&gt;的destroy-method属性指定的初始化方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来是演示BeanPostProcessor接口的方法，如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">package</span> springBeanTest;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeansException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyBeanPostProcessor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">BeanPostProcessor</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MyBeanPostProcessor</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;这是BeanPostProcessor实现类构造器！！&quot;</span>);<br>        <span class=\"hljs-comment\">// TODO Auto-generated constructor stub</span><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">Object <span class=\"hljs-title\">postProcessAfterInitialization</span><span class=\"hljs-params\">(Object arg0, String arg1)</span></span><br><span class=\"hljs-function\">            <span class=\"hljs-keyword\">throws</span> BeansException </span>&#123;<br>        System.out<br>        .println(<span class=\"hljs-string\">&quot;BeanPostProcessor接口方法postProcessAfterInitialization对属性进行更改！&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> arg0;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">Object <span class=\"hljs-title\">postProcessBeforeInitialization</span><span class=\"hljs-params\">(Object arg0, String arg1)</span></span><br><span class=\"hljs-function\">            <span class=\"hljs-keyword\">throws</span> BeansException </span>&#123;<br>        System.out<br>        .println(<span class=\"hljs-string\">&quot;BeanPostProcessor接口方法postProcessBeforeInitialization对属性进行更改！&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> arg0;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如上，BeanPostProcessor接口包括2个方法postProcessAfterInitialization和postProcessBeforeInitialization，这两个方法的第一个参数都是要处理的Bean对象，第二个参数都是Bean的name。返回值也都是要处理的Bean对象。这里要注意。</p>\n<p>InstantiationAwareBeanPostProcessor 接口本质是BeanPostProcessor的子接口，一般我们继承Spring为其提供的适配器类InstantiationAwareBeanPostProcessor Adapter来使用它，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> springBeanTest;<br><br><span class=\"hljs-keyword\">import</span> java.beans.PropertyDescriptor;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeansException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.PropertyValues;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyInstantiationAwareBeanPostProcessor</span> <span class=\"hljs-keyword\">extends</span><br>        <span class=\"hljs-title class_\">InstantiationAwareBeanPostProcessorAdapter</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyInstantiationAwareBeanPostProcessor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>();<br>        System.out<br>                .println(<span class=\"hljs-string\">&quot;这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 接口方法、实例化Bean之前调用</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessBeforeInstantiation</span><span class=\"hljs-params\">(Class beanClass,</span><br><span class=\"hljs-params\">            String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out<br>                .println(<span class=\"hljs-string\">&quot;InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 接口方法、实例化Bean之后调用</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessAfterInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span><br>            <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out<br>                .println(<span class=\"hljs-string\">&quot;InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 接口方法、设置某个属性时调用</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> PropertyValues <span class=\"hljs-title function_\">postProcessPropertyValues</span><span class=\"hljs-params\">(PropertyValues pvs,</span><br><span class=\"hljs-params\">            PropertyDescriptor[] pds, Object bean, String beanName)</span><br>            <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out<br>                .println(<span class=\"hljs-string\">&quot;InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> pvs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/zrtqsk/p/3735273.html\">https://www.cnblogs.com/zrtqsk/p/3735273.html</a></p>\n<p><a href=\"https://www.cnblogs.com/javazhiyin/p/10905294.html\">https://www.cnblogs.com/javazhiyin/p/10905294.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Bean的生命周期\"><a href=\"#Bean的生命周期\" class=\"headerlink\" title=\"Bean的生命周期\"></a>Bean的生命周期</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在我们没有使用Spring框架之前，创建对象一般都是使用new关键字进行创建，当然除了new关键字外，还有</p>\n<ul>\n<li>运用反射手段，使用Class类的newInstance方法 或者 Constructor类中的newInstance方法</li>\n<li>使用clone方法</li>\n<li>使用反序列化（ObjectInputStream）</li>\n</ul>\n<p>一旦对象不再被使用的时候，将有可能被JVM垃圾回收器进行回收。</p>\n<p>但是在Spring通过IOC容器进行管理之后，Bean 的生命周期就变得更加复杂了，下图展示了Bean的构造过程</p>\n<p><img src=\"/images/spring/image-20200614155732584.png\" alt=\"image-20200614155732584\"></p>\n<h2 id=\"Bean的生命周期-1\"><a href=\"#Bean的生命周期-1\" class=\"headerlink\" title=\"Bean的生命周期\"></a>Bean的生命周期</h2><p>我们对上图的每个步骤进行文字说明</p>\n<ul>\n<li>Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化</li>\n<li>Bean实例化后对将Bean的引入和值注入到Bean的属性中</li>\n<li>如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法</li>\n<li>如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入</li>\n<li>如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。</li>\n<li>如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。</li>\n<li>如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用</li>\n<li>如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。</li>\n<li>此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。</li>\n<li>如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。</li>\n</ul>\n<h2 id=\"接口方法的分类\"><a href=\"#接口方法的分类\" class=\"headerlink\" title=\"接口方法的分类\"></a>接口方法的分类</h2><p> Bean的完整生命周期经历了各种方法的调用，这些方法可以分类一下三类</p>\n<h3 id=\"Bean自身的方法：\"><a href=\"#Bean自身的方法：\" class=\"headerlink\" title=\"Bean自身的方法：\"></a>Bean自身的方法：</h3><p>这个包括了Bean本身调用的方法和通过配置文件中<bean>的init-method和destroy-method指定的方法</p>\n<h3 id=\"Bean级生命周期的方法\"><a href=\"#Bean级生命周期的方法\" class=\"headerlink\" title=\"Bean级生命周期的方法\"></a>Bean级生命周期的方法</h3><p>这个包括了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这些接口的方法</p>\n<h3 id=\"容器级生命周期的方法\"><a href=\"#容器级生命周期的方法\" class=\"headerlink\" title=\"容器级生命周期的方法\"></a>容器级生命周期的方法</h3><p>这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。</p>\n<h3 id=\"工程后处理器接口方法\"><a href=\"#工程后处理器接口方法\" class=\"headerlink\" title=\"工程后处理器接口方法\"></a>工程后处理器接口方法</h3><p>这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器　　接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。</p>\n<h2 id=\"DEMO举例\"><a href=\"#DEMO举例\" class=\"headerlink\" title=\"DEMO举例\"></a>DEMO举例</h2><p>我们用一个简单的Spring Bean来演示一下Spring Bean的生命周期。</p>\n<p>首先是一个简单的Spring Bean，调用Bean自身的方法和Bean级生命周期接口方法，为了方便演示，它实现了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这4个接口，同时有2个方法，对应配置文件中<bean>的init-method和destroy-method。如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">package springBeanTest;<br><br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">BeansException</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">BeanFactory</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">BeanFactoryAware</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">BeanNameAware</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">DisposableBean</span>;<br><span class=\"hljs-keyword\">import</span> org.<span class=\"hljs-property\">springframework</span>.<span class=\"hljs-property\">beans</span>.<span class=\"hljs-property\">factory</span>.<span class=\"hljs-property\">InitializingBean</span>;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BeanFactoryAware</span>, <span class=\"hljs-title class_\">BeanNameAware</span>,<br>        <span class=\"hljs-title class_\">InitializingBean</span>, <span class=\"hljs-title class_\">DisposableBean</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> address;<br>    <span class=\"hljs-keyword\">private</span> int phone;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">BeanFactory</span> beanFactory;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> beanName;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">Person</span>() &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【构造器】调用Person的构造器实例化&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setName</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> name</span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【注入属性】注入属性name&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getAddress</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> address;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setAddress</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> address</span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【注入属性】注入属性address&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">address</span> = address;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> int <span class=\"hljs-title function_\">getPhone</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> phone;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setPhone</span>(<span class=\"hljs-params\">int phone</span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【注入属性】注入属性phone&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">phone</span> = phone;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person [address=&quot;</span> + address + <span class=\"hljs-string\">&quot;, name=&quot;</span> + name + <span class=\"hljs-string\">&quot;, phone=&quot;</span><br>                + phone + <span class=\"hljs-string\">&quot;]&quot;</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 这是BeanFactoryAware接口方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setBeanFactory</span>(<span class=\"hljs-title class_\">BeanFactory</span> arg0) throws <span class=\"hljs-title class_\">BeansException</span> &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span><br>                .<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【BeanFactoryAware接口】调用BeanFactoryAware.setBeanFactory()&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">beanFactory</span> = arg0;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 这是BeanNameAware接口方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setBeanName</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> arg0</span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【BeanNameAware接口】调用BeanNameAware.setBeanName()&quot;</span>);<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">beanName</span> = arg0;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 这是InitializingBean接口方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">afterPropertiesSet</span>() throws <span class=\"hljs-title class_\">Exception</span> &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span><br>                .<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【InitializingBean接口】调用InitializingBean.afterPropertiesSet()&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 这是DiposibleBean接口方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">destroy</span>() throws <span class=\"hljs-title class_\">Exception</span> &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【DiposibleBean接口】调用DiposibleBean.destory()&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 通过&lt;bean&gt;的init-method属性指定的初始化方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">myInit</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【init-method】调用&lt;bean&gt;的init-method属性指定的初始化方法&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 通过&lt;bean&gt;的destroy-method属性指定的初始化方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">myDestory</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;【destroy-method】调用&lt;bean&gt;的destroy-method属性指定的初始化方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来是演示BeanPostProcessor接口的方法，如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">package</span> springBeanTest;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeansException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyBeanPostProcessor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">BeanPostProcessor</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MyBeanPostProcessor</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;这是BeanPostProcessor实现类构造器！！&quot;</span>);<br>        <span class=\"hljs-comment\">// TODO Auto-generated constructor stub</span><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">Object <span class=\"hljs-title\">postProcessAfterInitialization</span><span class=\"hljs-params\">(Object arg0, String arg1)</span></span><br><span class=\"hljs-function\">            <span class=\"hljs-keyword\">throws</span> BeansException </span>&#123;<br>        System.out<br>        .println(<span class=\"hljs-string\">&quot;BeanPostProcessor接口方法postProcessAfterInitialization对属性进行更改！&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> arg0;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">Object <span class=\"hljs-title\">postProcessBeforeInitialization</span><span class=\"hljs-params\">(Object arg0, String arg1)</span></span><br><span class=\"hljs-function\">            <span class=\"hljs-keyword\">throws</span> BeansException </span>&#123;<br>        System.out<br>        .println(<span class=\"hljs-string\">&quot;BeanPostProcessor接口方法postProcessBeforeInitialization对属性进行更改！&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> arg0;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如上，BeanPostProcessor接口包括2个方法postProcessAfterInitialization和postProcessBeforeInitialization，这两个方法的第一个参数都是要处理的Bean对象，第二个参数都是Bean的name。返回值也都是要处理的Bean对象。这里要注意。</p>\n<p>InstantiationAwareBeanPostProcessor 接口本质是BeanPostProcessor的子接口，一般我们继承Spring为其提供的适配器类InstantiationAwareBeanPostProcessor Adapter来使用它，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> springBeanTest;<br><br><span class=\"hljs-keyword\">import</span> java.beans.PropertyDescriptor;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeansException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.PropertyValues;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyInstantiationAwareBeanPostProcessor</span> <span class=\"hljs-keyword\">extends</span><br>        <span class=\"hljs-title class_\">InstantiationAwareBeanPostProcessorAdapter</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyInstantiationAwareBeanPostProcessor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>();<br>        System.out<br>                .println(<span class=\"hljs-string\">&quot;这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 接口方法、实例化Bean之前调用</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessBeforeInstantiation</span><span class=\"hljs-params\">(Class beanClass,</span><br><span class=\"hljs-params\">            String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out<br>                .println(<span class=\"hljs-string\">&quot;InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 接口方法、实例化Bean之后调用</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessAfterInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span><br>            <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out<br>                .println(<span class=\"hljs-string\">&quot;InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 接口方法、设置某个属性时调用</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> PropertyValues <span class=\"hljs-title function_\">postProcessPropertyValues</span><span class=\"hljs-params\">(PropertyValues pvs,</span><br><span class=\"hljs-params\">            PropertyDescriptor[] pds, Object bean, String beanName)</span><br>            <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out<br>                .println(<span class=\"hljs-string\">&quot;InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> pvs;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/zrtqsk/p/3735273.html\">https://www.cnblogs.com/zrtqsk/p/3735273.html</a></p>\n<p><a href=\"https://www.cnblogs.com/javazhiyin/p/10905294.html\">https://www.cnblogs.com/javazhiyin/p/10905294.html</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clpxlg52b0000awwfguhc4gly","category_id":"clpphmypu0001ekwf8gqb444a","_id":"clpxlg52i0006awwff174db2p"},{"post_id":"clpxlg52f0001awwfca1nfcaa","category_id":"clpphmypu0001ekwf8gqb444a","_id":"clpxlg52i0008awwfbt0p4rih"},{"post_id":"clpxlg52g0003awwf5ycx0t2a","category_id":"clpphmypu0001ekwf8gqb444a","_id":"clpxlg52i000aawwfgv2h4cj6"},{"post_id":"clpxlg52h0005awwfhupv84vo","category_id":"clpphmypu0001ekwf8gqb444a","_id":"clpxlg52i000bawwfb3nw8gwz"},{"post_id":"clpxlg52u000cawwf5mfj6djw","category_id":"clpphmypu0001ekwf8gqb444a","_id":"clpxlg52v000eawwf9c4agz70"},{"post_id":"clpxmhixe0000wwwf2hkj57om","category_id":"clpxmue4p0001wwwf46h025ht","_id":"clpxmue4q0004wwwf5imqby54"},{"post_id":"clpxn8vyo0005wwwfctr34eq6","category_id":"clpphmypu0001ekwf8gqb444a","_id":"clpxncaxm0007wwwf21524rm3"},{"post_id":"clpxnjd0g0008wwwffw4pdunw","category_id":"clpxnpqfh0009wwwf9k4j9tm3","_id":"clpxnpqfi000cwwwferla8l5s"},{"post_id":"clpxnw3w0000dwwwffu0ybaor","category_id":"clpxnpqfh0009wwwf9k4j9tm3","_id":"clpxny7y1000fwwwf5tu3he1n"},{"post_id":"clpxo3luz000gwwwf530n48we","category_id":"clpxnpqfh0009wwwf9k4j9tm3","_id":"clpxo5ba2000iwwwfc3s51v3v"},{"post_id":"clpxohu9q000kwwwfhn09h9cl","category_id":"clpxnpqfh0009wwwf9k4j9tm3","_id":"clpxpkxm6000mwwwf71suex27"},{"post_id":"clpxq7f3v000pwwwfbh490ozv","category_id":"clpxqp401000qwwwfec137fvz","_id":"clpxqp402000twwwfemmwa03f"},{"post_id":"clpxpue6o000owwwfdlnb4wd4","category_id":"clpxs69ge00009cwfatau4of0","_id":"clpxs69gg00039cwf1sm03gkt"},{"post_id":"clpxvg38y0002q0wf0txe17un","category_id":"clpxvi6070003q0wf5o28cwrj","_id":"clpxvi6080004q0wfdbufcg55"},{"post_id":"clpxwysee00009wwf9ithepqc","category_id":"clpxvi6070003q0wf5o28cwrj","_id":"clpxwysen00029wwf20cd4ui6"},{"post_id":"clpxyp1n10000lcwf34yu5ptm","category_id":"clpphmypu0001ekwf8gqb444a","_id":"clpxyts0n0009lcwfcwzrd41r"}],"PostTag":[{"post_id":"clpxlg52b0000awwfguhc4gly","tag_id":"clpphmypv0002ekwfg4y8510n","_id":"clpxlg52g0002awwfa5hldlvb"},{"post_id":"clpxlg52f0001awwfca1nfcaa","tag_id":"clpphmypv0002ekwfg4y8510n","_id":"clpxlg52h0004awwf79125b5x"},{"post_id":"clpxlg52g0003awwf5ycx0t2a","tag_id":"clpphmypv0002ekwfg4y8510n","_id":"clpxlg52i0007awwf1jogdizp"},{"post_id":"clpxlg52h0005awwfhupv84vo","tag_id":"clpphmypv0002ekwfg4y8510n","_id":"clpxlg52i0009awwf2d9i86ph"},{"post_id":"clpxlg52u000cawwf5mfj6djw","tag_id":"clpphmypv0002ekwfg4y8510n","_id":"clpxlg52v000dawwf77pveeo4"},{"post_id":"clpxmhixe0000wwwf2hkj57om","tag_id":"clpxmue4p0002wwwffn1raw97","_id":"clpxmue4q0003wwwf0t2h9yoh"},{"post_id":"clpxn8vyo0005wwwfctr34eq6","tag_id":"clpphmypv0002ekwfg4y8510n","_id":"clpxncaxm0006wwwf3ypw1uq7"},{"post_id":"clpxnjd0g0008wwwffw4pdunw","tag_id":"clpxnpqfi000awwwf32slemed","_id":"clpxnpqfi000bwwwf4k24gfw0"},{"post_id":"clpxnw3w0000dwwwffu0ybaor","tag_id":"clpxnpqfi000awwwf32slemed","_id":"clpxny7y1000ewwwf0njc8iqz"},{"post_id":"clpxo3luz000gwwwf530n48we","tag_id":"clpxo5ba2000hwwwf5gqd4cld","_id":"clpxo5ba2000jwwwffzlobtr5"},{"post_id":"clpxohu9q000kwwwfhn09h9cl","tag_id":"clpxpkxm4000lwwwfd6m45zob","_id":"clpxpkxm6000nwwwfhjk678be"},{"post_id":"clpxq7f3v000pwwwfbh490ozv","tag_id":"clpxqp401000rwwwfc6pc4fib","_id":"clpxqp402000swwwf83ruat4y"},{"post_id":"clpxpue6o000owwwfdlnb4wd4","tag_id":"clpxs69gf00019cwfd5pz20tx","_id":"clpxs69gg00029cwf12mren2u"},{"post_id":"clpxwysee00009wwf9ithepqc","tag_id":"clpxwysek00019wwf8pw0bxgf","_id":"clpxwysep00049wwffgpzhras"},{"post_id":"clpxvg38y0002q0wf0txe17un","tag_id":"clpxwysek00019wwf8pw0bxgf","_id":"clpxwysep00059wwf6mym6j1q"},{"post_id":"clpxyp1n10000lcwf34yu5ptm","tag_id":"clpxyqsv10002lcwf36zie8lw","_id":"clpxyqsv30005lcwf95nqdjga"},{"post_id":"clpxyp1n10000lcwf34yu5ptm","tag_id":"clpxyqsv20003lcwfhs7y89dn","_id":"clpxyqsv30006lcwfggzz21a6"}],"Tag":[{"name":"jvm","_id":"clpphmypv0002ekwfg4y8510n"},{"name":"git","_id":"clpxmue4p0002wwwffn1raw97"},{"name":"cert","_id":"clpxnpqfi000awwwf32slemed"},{"name":"shell编程","_id":"clpxo5ba2000hwwwf5gqd4cld"},{"name":"shell","_id":"clpxpkxm4000lwwwfd6m45zob"},{"name":"k8s","_id":"clpxqp401000rwwwfc6pc4fib"},{"name":"docker","_id":"clpxs69gf00019cwfd5pz20tx"},{"name":"书单","_id":"clpxwysek00019wwf8pw0bxgf"},{"name":"spring","_id":"clpxyqsv10002lcwf36zie8lw"},{"name":"java","_id":"clpxyqsv20003lcwfhs7y89dn"}]}}